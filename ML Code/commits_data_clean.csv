repository,commit_sha,author,timestamp,message,filename,additions,deletions,changes,patch
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,lerna.json,1,1,2,"""registry"": ""https://registry.npmjs.org/"" } } - ""version"": ""15.6.0-canary.50"" + ""version"": ""15.6.0-canary.51"" }"
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,packages/create-next-app/package.json,1,1,2,"{ ""name"": ""create-next-app"" - ""version"": ""15.6.0-canary.50"" + ""version"": ""15.6.0-canary.51"" ""keywords"": [ ""react"" ""next"""
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,packages/eslint-config-next/package.json,2,2,4,"{ ""name"": ""eslint-config-next"" - ""version"": ""15.6.0-canary.50"" + ""version"": ""15.6.0-canary.51"" ""description"": ""ESLint configuration used by Next.js."" ""main"": ""index.js"" ""license"": ""MIT"" } ""homepage"": ""https://nextjs.org/docs/app/api-reference/config/eslint"" ""dependencies"": { - ""@next/eslint-plugin-next"": ""15.6.0-canary.50"" + ""@next/eslint-plugin-next"": ""15.6.0-canary.51"" ""@rushstack/eslint-patch"": ""^1.10.3"" ""@typescript-eslint/eslint-plugin"": ""^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0"" ""@typescript-eslint/parser"": ""^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0"""
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,packages/eslint-plugin-internal/package.json,1,1,2,"{ ""name"": ""@next/eslint-plugin-internal"" ""private"": true - ""version"": ""15.6.0-canary.50"" + ""version"": ""15.6.0-canary.51"" ""description"": ""ESLint plugin for working on Next.js."" ""exports"": { ""."": ""./src/eslint-plugin-internal.js"""
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,packages/eslint-plugin-next/package.json,1,1,2,"{ ""name"": ""@next/eslint-plugin-next"" - ""version"": ""15.6.0-canary.50"" + ""version"": ""15.6.0-canary.51"" ""description"": ""ESLint plugin for Next.js."" ""main"": ""dist/index.js"" ""types"": ""dist/index.d.ts"""
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,packages/font/package.json,1,1,2,"{ ""name"": ""@next/font"" ""private"": true - ""version"": ""15.6.0-canary.50"" + ""version"": ""15.6.0-canary.51"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/font"""
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,packages/next-bundle-analyzer/package.json,1,1,2,"{ ""name"": ""@next/bundle-analyzer"" - ""version"": ""15.6.0-canary.50"" + ""version"": ""15.6.0-canary.51"" ""main"": ""index.js"" ""types"": ""index.d.ts"" ""license"": ""MIT"""
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,packages/next-codemod/package.json,1,1,2,"{ ""name"": ""@next/codemod"" - ""version"": ""15.6.0-canary.50"" + ""version"": ""15.6.0-canary.51"" ""license"": ""MIT"" ""repository"": { ""type"": ""git"""
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,packages/next-env/package.json,1,1,2,"{ ""name"": ""@next/env"" - ""version"": ""15.6.0-canary.50"" + ""version"": ""15.6.0-canary.51"" ""keywords"": [ ""react"" ""next"""
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,packages/next-mdx/package.json,1,1,2,"{ ""name"": ""@next/mdx"" - ""version"": ""15.6.0-canary.50"" + ""version"": ""15.6.0-canary.51"" ""main"": ""index.js"" ""license"": ""MIT"" ""repository"": {"
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,packages/next-plugin-storybook/package.json,1,1,2,"{ ""name"": ""@next/plugin-storybook"" - ""version"": ""15.6.0-canary.50"" + ""version"": ""15.6.0-canary.51"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/next-plugin-storybook"""
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,packages/next-polyfill-module/package.json,1,1,2,"{ ""name"": ""@next/polyfill-module"" - ""version"": ""15.6.0-canary.50"" + ""version"": ""15.6.0-canary.51"" ""description"": ""A standard library polyfill for ES Modules supporting browsers (Edge 16+ Firefox 60+ Chrome 61+ Safari 10.1+)"" ""main"": ""dist/polyfill-module.js"" ""license"": ""MIT"""
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,packages/next-polyfill-nomodule/package.json,1,1,2,"{ ""name"": ""@next/polyfill-nomodule"" - ""version"": ""15.6.0-canary.50"" + ""version"": ""15.6.0-canary.51"" ""description"": ""A polyfill for non-dead nomodule browsers."" ""main"": ""dist/polyfill-nomodule.js"" ""license"": ""MIT"""
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,packages/next-rspack/package.json,1,1,2,"{ ""name"": ""next-rspack"" - ""version"": ""15.6.0-canary.50"" + ""version"": ""15.6.0-canary.51"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/next-rspack"""
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,packages/next-swc/package.json,1,1,2,"{ ""name"": ""@next/swc"" - ""version"": ""15.6.0-canary.50"" + ""version"": ""15.6.0-canary.51"" ""private"": true ""files"": [ ""native/"""
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,packages/next/package.json,7,7,14,"{ ""name"": ""next"" - ""version"": ""15.6.0-canary.50"" + ""version"": ""15.6.0-canary.51"" ""description"": ""The React Framework"" ""main"": ""./dist/server/next.js"" ""license"": ""MIT"" ] } ""dependencies"": { - ""@next/env"": ""15.6.0-canary.50"" + ""@next/env"": ""15.6.0-canary.51"" ""@swc/helpers"": ""0.5.15"" ""caniuse-lite"": ""^1.0.30001579"" ""postcss"": ""8.4.31"" ""@modelcontextprotocol/sdk"": ""1.18.1"" ""@mswjs/interceptors"": ""0.23.0"" ""@napi-rs/triples"": ""1.2.0"" - ""@next/font"": ""15.6.0-canary.50"" - ""@next/polyfill-module"": ""15.6.0-canary.50"" - ""@next/polyfill-nomodule"": ""15.6.0-canary.50"" - ""@next/react-refresh-utils"": ""15.6.0-canary.50"" - ""@next/swc"": ""15.6.0-canary.50"" + ""@next/font"": ""15.6.0-canary.51"" + ""@next/polyfill-module"": ""15.6.0-canary.51"" + ""@next/polyfill-nomodule"": ""15.6.0-canary.51"" + ""@next/react-refresh-utils"": ""15.6.0-canary.51"" + ""@next/swc"": ""15.6.0-canary.51"" ""@opentelemetry/api"": ""1.6.0"" ""@playwright/test"": ""1.51.1"" ""@rspack/core"": ""1.5.0"""
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,packages/react-refresh-utils/package.json,1,1,2,"{ ""name"": ""@next/react-refresh-utils"" - ""version"": ""15.6.0-canary.50"" + ""version"": ""15.6.0-canary.51"" ""description"": ""An experimental package providing utilities for React Refresh."" ""repository"": { ""url"": ""vercel/next.js"""
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,packages/third-parties/package.json,2,2,4,"{ ""name"": ""@next/third-parties"" - ""version"": ""15.6.0-canary.50"" + ""version"": ""15.6.0-canary.51"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/third-parties"" ""third-party-capital"": ""1.0.20"" } ""devDependencies"": { - ""next"": ""15.6.0-canary.50"" + ""next"": ""15.6.0-canary.51"" ""outdent"": ""0.8.0"" ""prettier"": ""2.5.1"" ""typescript"": ""5.9.2"""
vercel/next.js,2cc84abc6254c4dec1c51ac7945300a03e9e51be,nextjs-bot,2025-10-07 17:20:21,v15.6.0-canary.51,pnpm-lock.yaml,8,8,16,importers: packages/eslint-config-next: dependencies: '@next/eslint-plugin-next': - specifier: 15.6.0-canary.50 + specifier: 15.6.0-canary.51 version: link:../eslint-plugin-next '@rushstack/eslint-patch': specifier: ^1.10.3 importers: packages/next: dependencies: '@next/env': - specifier: 15.6.0-canary.50 + specifier: 15.6.0-canary.51 version: link:../next-env '@swc/helpers': specifier: 0.5.15 importers: specifier: 1.2.0 version: 1.2.0 '@next/font': - specifier: 15.6.0-canary.50 + specifier: 15.6.0-canary.51 version: link:../font '@next/polyfill-module': - specifier: 15.6.0-canary.50 + specifier: 15.6.0-canary.51 version: link:../next-polyfill-module '@next/polyfill-nomodule': - specifier: 15.6.0-canary.50 + specifier: 15.6.0-canary.51 version: link:../next-polyfill-nomodule '@next/react-refresh-utils': - specifier: 15.6.0-canary.50 + specifier: 15.6.0-canary.51 version: link:../react-refresh-utils '@next/swc': - specifier: 15.6.0-canary.50 + specifier: 15.6.0-canary.51 version: link:../next-swc '@opentelemetry/api': specifier: 1.6.0 importers: version: 1.0.20 devDependencies: next: - specifier: 15.6.0-canary.50 + specifier: 15.6.0-canary.51 version: link:../next outdent: specifier: 0.8.0
vercel/next.js,8f5ed83b72f84c39b9951756a57c1155a988f4e9,Tim Neutkens,2025-10-07 17:15:24,"Build: Highlight TypeScript and ESLint being run clearer (#84606)  ## What?  Follow-up to #84602.  - Renamed `Linting and checking validity of types` to `Running ESLint and TypeScript concurrently` - When `Running ESLint and TypeScript concurrently` finishes it logs the individual times for `TypeScript` and `ESLint` separately  Previous PR only showed the time for TypeScript  hiding the time it took to run ESlint.  The reason for renaming it to `Running ESLint and TypeScript` is that it does not hide what is happening under the hood. Someone might assume Next.js is doing extra work here  but it is calling the underlying tools in the application to check linting and types. We've seen cases where running TypeScript here is 1 minute or more  that would previously be hidden or hard to investigate for the developer as they didn't know what ""linting and type checking"" entails in this context.  ```    Creating an optimized production build ...  ✓ Compiled successfully in 764ms  ✓ Finished TypeScript in 968ms      ✓ Finished ESLint in 824ms      ✓ Collecting page data in 203ms      ✓ Generating static pages (4/4) in 318ms  ✓ Collecting build traces in 3.3s      ✓ Finalizing page optimization in 3.3s     ```  ---------  Co-authored-by: vercel[bot] <35613825+vercel[bot]@users.noreply.github.com>",packages/next/src/build/type-check.ts,18,10,28,export async function startTypeChecking({ if (!ignoreTypeScriptErrors && shouldLint) { typeCheckingAndLintingSpinnerPrefixText = - 'Linting and checking validity of types' + 'Running ESLint and TypeScript concurrently' } else if (!ignoreTypeScriptErrors) { - typeCheckingAndLintingSpinnerPrefixText = 'Checking validity of types' + typeCheckingAndLintingSpinnerPrefixText = 'Running TypeScript' } else if (shouldLint) { - typeCheckingAndLintingSpinnerPrefixText = 'Linting' + typeCheckingAndLintingSpinnerPrefixText = 'Running ESLint' } // we will not create a spinner if both ignoreTypeScriptErrors and ignoreESLint are export async function startTypeChecking({ ) } - const typeCheckStart = process.hrtime() + const typeCheckAndLintStart = process.hrtime() try { - const [[verifyResult typeCheckEnd]] = await Promise.all([ + const [[verifyResult typeCheckEnd] lintCheckEnd] = await Promise.all([ nextBuildSpan.traceChild('run-typescript').traceAsyncFn(() => verifyTypeScriptSetup( dir export async function startTypeChecking({ !!appDir !!pagesDir ).then((resolved) => { - const checkEnd = process.hrtime(typeCheckStart) + const checkEnd = process.hrtime(typeCheckAndLintStart) return [resolved checkEnd] as const }) ) export async function startTypeChecking({ config.experimental.workerThreads telemetry ) + const checkEnd = process.hrtime(typeCheckAndLintStart) + return checkEnd }) ]) if (typeCheckingAndLintingSpinner) { - typeCheckingAndLintingSpinner.setText( - `${typeCheckingAndLintingSpinnerPrefixText} in ${hrtimeDurationToString(typeCheckEnd)}` - ) - typeCheckingAndLintingSpinner.stopAndPersist() + typeCheckingAndLintingSpinner.stop() + + createSpinner( + `Finished TypeScript${ignoreTypeScriptErrors ? ' config validation' : ''} in ${hrtimeDurationToString(typeCheckEnd)}` + )?.stopAndPersist() + if (lintCheckEnd) { + createSpinner( + `Finished ESLint in ${hrtimeDurationToString(lintCheckEnd)}` + )?.stopAndPersist() + } } if (!ignoreTypeScriptErrors && verifyResult) {
vercel/next.js,8f5ed83b72f84c39b9951756a57c1155a988f4e9,Tim Neutkens,2025-10-07 17:15:24,"Build: Highlight TypeScript and ESLint being run clearer (#84606)  ## What?  Follow-up to #84602.  - Renamed `Linting and checking validity of types` to `Running ESLint and TypeScript concurrently` - When `Running ESLint and TypeScript concurrently` finishes it logs the individual times for `TypeScript` and `ESLint` separately  Previous PR only showed the time for TypeScript  hiding the time it took to run ESlint.  The reason for renaming it to `Running ESLint and TypeScript` is that it does not hide what is happening under the hood. Someone might assume Next.js is doing extra work here  but it is calling the underlying tools in the application to check linting and types. We've seen cases where running TypeScript here is 1 minute or more  that would previously be hidden or hard to investigate for the developer as they didn't know what ""linting and type checking"" entails in this context.  ```    Creating an optimized production build ...  ✓ Compiled successfully in 764ms  ✓ Finished TypeScript in 968ms      ✓ Finished ESLint in 824ms      ✓ Collecting page data in 203ms      ✓ Generating static pages (4/4) in 318ms  ✓ Collecting build traces in 3.3s      ✓ Finalizing page optimization in 3.3s     ```  ---------  Co-authored-by: vercel[bot] <35613825+vercel[bot]@users.noreply.github.com>",test/production/app-dir/build-output/index.test.ts,1,1,2,describe('production - app dir - build output' () => { 'Creating an optimized production build' ) const indexOfLinting = output.indexOf( - 'Linting and checking validity of types' + 'Running ESLint and TypeScript concurrently' ) expect(indexOfVersion).toBeLessThan(indexOfLinting) expect(indexOfStartCompiling).toBeLessThan(indexOfLinting)
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,lerna.json,1,1,2,"""registry"": ""https://registry.npmjs.org/"" } } - ""version"": ""15.6.0-canary.49"" + ""version"": ""15.6.0-canary.50"" }"
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,packages/create-next-app/package.json,1,1,2,"{ ""name"": ""create-next-app"" - ""version"": ""15.6.0-canary.49"" + ""version"": ""15.6.0-canary.50"" ""keywords"": [ ""react"" ""next"""
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,packages/eslint-config-next/package.json,2,2,4,"{ ""name"": ""eslint-config-next"" - ""version"": ""15.6.0-canary.49"" + ""version"": ""15.6.0-canary.50"" ""description"": ""ESLint configuration used by Next.js."" ""main"": ""index.js"" ""license"": ""MIT"" } ""homepage"": ""https://nextjs.org/docs/app/api-reference/config/eslint"" ""dependencies"": { - ""@next/eslint-plugin-next"": ""15.6.0-canary.49"" + ""@next/eslint-plugin-next"": ""15.6.0-canary.50"" ""@rushstack/eslint-patch"": ""^1.10.3"" ""@typescript-eslint/eslint-plugin"": ""^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0"" ""@typescript-eslint/parser"": ""^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0"""
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,packages/eslint-plugin-internal/package.json,1,1,2,"{ ""name"": ""@next/eslint-plugin-internal"" ""private"": true - ""version"": ""15.6.0-canary.49"" + ""version"": ""15.6.0-canary.50"" ""description"": ""ESLint plugin for working on Next.js."" ""exports"": { ""."": ""./src/eslint-plugin-internal.js"""
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,packages/eslint-plugin-next/package.json,1,1,2,"{ ""name"": ""@next/eslint-plugin-next"" - ""version"": ""15.6.0-canary.49"" + ""version"": ""15.6.0-canary.50"" ""description"": ""ESLint plugin for Next.js."" ""main"": ""dist/index.js"" ""types"": ""dist/index.d.ts"""
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,packages/font/package.json,1,1,2,"{ ""name"": ""@next/font"" ""private"": true - ""version"": ""15.6.0-canary.49"" + ""version"": ""15.6.0-canary.50"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/font"""
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,packages/next-bundle-analyzer/package.json,1,1,2,"{ ""name"": ""@next/bundle-analyzer"" - ""version"": ""15.6.0-canary.49"" + ""version"": ""15.6.0-canary.50"" ""main"": ""index.js"" ""types"": ""index.d.ts"" ""license"": ""MIT"""
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,packages/next-codemod/package.json,1,1,2,"{ ""name"": ""@next/codemod"" - ""version"": ""15.6.0-canary.49"" + ""version"": ""15.6.0-canary.50"" ""license"": ""MIT"" ""repository"": { ""type"": ""git"""
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,packages/next-env/package.json,1,1,2,"{ ""name"": ""@next/env"" - ""version"": ""15.6.0-canary.49"" + ""version"": ""15.6.0-canary.50"" ""keywords"": [ ""react"" ""next"""
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,packages/next-mdx/package.json,1,1,2,"{ ""name"": ""@next/mdx"" - ""version"": ""15.6.0-canary.49"" + ""version"": ""15.6.0-canary.50"" ""main"": ""index.js"" ""license"": ""MIT"" ""repository"": {"
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,packages/next-plugin-storybook/package.json,1,1,2,"{ ""name"": ""@next/plugin-storybook"" - ""version"": ""15.6.0-canary.49"" + ""version"": ""15.6.0-canary.50"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/next-plugin-storybook"""
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,packages/next-polyfill-module/package.json,1,1,2,"{ ""name"": ""@next/polyfill-module"" - ""version"": ""15.6.0-canary.49"" + ""version"": ""15.6.0-canary.50"" ""description"": ""A standard library polyfill for ES Modules supporting browsers (Edge 16+ Firefox 60+ Chrome 61+ Safari 10.1+)"" ""main"": ""dist/polyfill-module.js"" ""license"": ""MIT"""
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,packages/next-polyfill-nomodule/package.json,1,1,2,"{ ""name"": ""@next/polyfill-nomodule"" - ""version"": ""15.6.0-canary.49"" + ""version"": ""15.6.0-canary.50"" ""description"": ""A polyfill for non-dead nomodule browsers."" ""main"": ""dist/polyfill-nomodule.js"" ""license"": ""MIT"""
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,packages/next-rspack/package.json,1,1,2,"{ ""name"": ""next-rspack"" - ""version"": ""15.6.0-canary.49"" + ""version"": ""15.6.0-canary.50"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/next-rspack"""
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,packages/next-swc/package.json,1,1,2,"{ ""name"": ""@next/swc"" - ""version"": ""15.6.0-canary.49"" + ""version"": ""15.6.0-canary.50"" ""private"": true ""files"": [ ""native/"""
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,packages/next/package.json,7,7,14,"{ ""name"": ""next"" - ""version"": ""15.6.0-canary.49"" + ""version"": ""15.6.0-canary.50"" ""description"": ""The React Framework"" ""main"": ""./dist/server/next.js"" ""license"": ""MIT"" ] } ""dependencies"": { - ""@next/env"": ""15.6.0-canary.49"" + ""@next/env"": ""15.6.0-canary.50"" ""@swc/helpers"": ""0.5.15"" ""caniuse-lite"": ""^1.0.30001579"" ""postcss"": ""8.4.31"" ""@modelcontextprotocol/sdk"": ""1.18.1"" ""@mswjs/interceptors"": ""0.23.0"" ""@napi-rs/triples"": ""1.2.0"" - ""@next/font"": ""15.6.0-canary.49"" - ""@next/polyfill-module"": ""15.6.0-canary.49"" - ""@next/polyfill-nomodule"": ""15.6.0-canary.49"" - ""@next/react-refresh-utils"": ""15.6.0-canary.49"" - ""@next/swc"": ""15.6.0-canary.49"" + ""@next/font"": ""15.6.0-canary.50"" + ""@next/polyfill-module"": ""15.6.0-canary.50"" + ""@next/polyfill-nomodule"": ""15.6.0-canary.50"" + ""@next/react-refresh-utils"": ""15.6.0-canary.50"" + ""@next/swc"": ""15.6.0-canary.50"" ""@opentelemetry/api"": ""1.6.0"" ""@playwright/test"": ""1.51.1"" ""@rspack/core"": ""1.5.0"""
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,packages/react-refresh-utils/package.json,1,1,2,"{ ""name"": ""@next/react-refresh-utils"" - ""version"": ""15.6.0-canary.49"" + ""version"": ""15.6.0-canary.50"" ""description"": ""An experimental package providing utilities for React Refresh."" ""repository"": { ""url"": ""vercel/next.js"""
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,packages/third-parties/package.json,2,2,4,"{ ""name"": ""@next/third-parties"" - ""version"": ""15.6.0-canary.49"" + ""version"": ""15.6.0-canary.50"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/third-parties"" ""third-party-capital"": ""1.0.20"" } ""devDependencies"": { - ""next"": ""15.6.0-canary.49"" + ""next"": ""15.6.0-canary.50"" ""outdent"": ""0.8.0"" ""prettier"": ""2.5.1"" ""typescript"": ""5.9.2"""
vercel/next.js,f69066fb20b29e591b40ff20e41181391bda1477,nextjs-bot,2025-10-07 16:08:28,v15.6.0-canary.50,pnpm-lock.yaml,8,8,16,importers: packages/eslint-config-next: dependencies: '@next/eslint-plugin-next': - specifier: 15.6.0-canary.49 + specifier: 15.6.0-canary.50 version: link:../eslint-plugin-next '@rushstack/eslint-patch': specifier: ^1.10.3 importers: packages/next: dependencies: '@next/env': - specifier: 15.6.0-canary.49 + specifier: 15.6.0-canary.50 version: link:../next-env '@swc/helpers': specifier: 0.5.15 importers: specifier: 1.2.0 version: 1.2.0 '@next/font': - specifier: 15.6.0-canary.49 + specifier: 15.6.0-canary.50 version: link:../font '@next/polyfill-module': - specifier: 15.6.0-canary.49 + specifier: 15.6.0-canary.50 version: link:../next-polyfill-module '@next/polyfill-nomodule': - specifier: 15.6.0-canary.49 + specifier: 15.6.0-canary.50 version: link:../next-polyfill-nomodule '@next/react-refresh-utils': - specifier: 15.6.0-canary.49 + specifier: 15.6.0-canary.50 version: link:../react-refresh-utils '@next/swc': - specifier: 15.6.0-canary.49 + specifier: 15.6.0-canary.50 version: link:../next-swc '@opentelemetry/api': specifier: 1.6.0 importers: version: 1.0.20 devDependencies: next: - specifier: 15.6.0-canary.49 + specifier: 15.6.0-canary.50 version: link:../next outdent: specifier: 0.8.0
vercel/next.js,75b1ceff2fb29d78f7a8566124a877bc2b7386c2,Steven,2025-10-07 16:03:51,fix(cache-tags): add `/index` to implicit tags and adjust `revalidatePath()` (#84586)  This fixes an issue where the tag was `/` but the build output was `/index` (and vice-versa) meaning you couldn't use `revalidatePath()` in some cases because the tag didn't match.  ---------  Co-authored-by: JJ Kasper <jj@jjsweb.site>,packages/next/src/server/lib/implicit-tags.test.ts,83,0,83,+import type { OpaqueFallbackRouteParams } from '../request/fallback-params' +import { getImplicitTags } from './implicit-tags' + +describe('getImplicitTags()' () => { + it.each<{ + page: string + url: { pathname: string; search: string } + fallbackRouteParams: null | OpaqueFallbackRouteParams + expectedTags: string[] + }>([ + { + page: '/' + url: { pathname: '/' search: '' } + fallbackRouteParams: null + expectedTags: ['_N_T_/layout' '_N_T_/' '_N_T_/index'] + } + { + page: '' + url: { pathname: '/' search: '' } + fallbackRouteParams: null + expectedTags: ['_N_T_/layout' '_N_T_/' '_N_T_/index'] + } + { + page: '/' + url: { pathname: '' search: '' } + fallbackRouteParams: null + expectedTags: ['_N_T_/layout'] + } + { + page: '/page' + url: { pathname: '' search: '' } + fallbackRouteParams: null + expectedTags: ['_N_T_/layout' '_N_T_/page'] + } + { + page: '/page' + url: { pathname: '/' search: '' } + fallbackRouteParams: null + expectedTags: ['_N_T_/layout' '_N_T_/page' '_N_T_/' '_N_T_/index'] + } + { + page: '/page' + url: { pathname: '/page' search: '' } + fallbackRouteParams: null + expectedTags: ['_N_T_/layout' '_N_T_/page'] + } + { + page: '/index' + url: { pathname: '/' search: '' } + fallbackRouteParams: null + expectedTags: [ + '_N_T_/layout' + '_N_T_/index/layout' + '_N_T_/' + '_N_T_/index' + ] + } + { + page: '/hello' + url: { pathname: '/hello' search: '' } + fallbackRouteParams: null + expectedTags: ['_N_T_/layout' '_N_T_/hello/layout' '_N_T_/hello'] + } + { + page: '/foo/bar/baz' + url: { pathname: '/foo/bar/baz' search: '' } + fallbackRouteParams: null + expectedTags: [ + '_N_T_/layout' + '_N_T_/foo/layout' + '_N_T_/foo/bar/layout' + '_N_T_/foo/bar/baz/layout' + '_N_T_/foo/bar/baz' + ] + } + ])( + 'for page $page with url $url and $fallback' + async ({ page url fallbackRouteParams expectedTags }) => { + const result = await getImplicitTags(page url fallbackRouteParams) + expect(result.tags).toEqual(expectedTags) + } + ) +})
vercel/next.js,75b1ceff2fb29d78f7a8566124a877bc2b7386c2,Steven,2025-10-07 16:03:51,fix(cache-tags): add `/index` to implicit tags and adjust `revalidatePath()` (#84586)  This fixes an issue where the tag was `/` but the build output was `/index` (and vice-versa) meaning you couldn't use `revalidatePath()` in some cases because the tag didn't match.  ---------  Co-authored-by: JJ Kasper <jj@jjsweb.site>,packages/next/src/server/lib/implicit-tags.ts,14,5,19,export async function getImplicitTags( } fallbackRouteParams: null | OpaqueFallbackRouteParams ): Promise<ImplicitTags> { - const tags: string[] = [] + const tags = new Set<string>() // Add the derived tags from the page. const derivedTags = getDerivedTags(page) for (let tag of derivedTags) { tag = `${NEXT_CACHE_IMPLICIT_TAG_ID}${tag}` - tags.push(tag) + tags.add(tag) } // Add the tags from the pathname. If the route has unknown params we don't export async function getImplicitTags( (!fallbackRouteParams || fallbackRouteParams.size === 0) ) { const tag = `${NEXT_CACHE_IMPLICIT_TAG_ID}${url.pathname}` - tags.push(tag) + tags.add(tag) } + if (tags.has(`${NEXT_CACHE_IMPLICIT_TAG_ID}/`)) { + tags.add(`${NEXT_CACHE_IMPLICIT_TAG_ID}/index`) + } + + if (tags.has(`${NEXT_CACHE_IMPLICIT_TAG_ID}/index`)) { + tags.add(`${NEXT_CACHE_IMPLICIT_TAG_ID}/`) + } + + const tagsArray = Array.from(tags) return { - tags - expirationsByCacheKind: createTagsExpirationsByCacheKind(tags) + tags: tagsArray + expirationsByCacheKind: createTagsExpirationsByCacheKind(tagsArray) } }
vercel/next.js,75b1ceff2fb29d78f7a8566124a877bc2b7386c2,Steven,2025-10-07 16:03:51,fix(cache-tags): add `/index` to implicit tags and adjust `revalidatePath()` (#84586)  This fixes an issue where the tag was `/` but the build output was `/index` (and vice-versa) meaning you couldn't use `revalidatePath()` in some cases because the tag didn't match.  ---------  Co-authored-by: JJ Kasper <jj@jjsweb.site>,packages/next/src/server/web/spec-extension/revalidate.ts,18,4,22,"export function unstable_expirePath( return } - let normalizedPath = `${NEXT_CACHE_IMPLICIT_TAG_ID}${originalPath}` + let normalizedPath = `${NEXT_CACHE_IMPLICIT_TAG_ID}${originalPath || '/'}` if (type) { normalizedPath += `${normalizedPath.endsWith('/') ? '' : '/'}${type}` export function unstable_expirePath( `Warning: a dynamic page path ""${originalPath}"" was passed to ""expirePath"" but the ""type"" parameter is missing. This has no effect by default see more info here https://nextjs.org/docs/app/api-reference/functions/unstable_expirePath` ) } - return revalidate([normalizedPath] `unstable_expirePath ${originalPath}`) + const tags = [normalizedPath] + if (normalizedPath === `${NEXT_CACHE_IMPLICIT_TAG_ID}/`) { + tags.push(`${NEXT_CACHE_IMPLICIT_TAG_ID}/index`) + } else if (normalizedPath === `${NEXT_CACHE_IMPLICIT_TAG_ID}/index`) { + tags.push(`${NEXT_CACHE_IMPLICIT_TAG_ID}/`) + } + return revalidate(tags `unstable_expirePath ${originalPath}`) } /** export function revalidatePath(originalPath: string type?: 'layout' | 'page') { return } - let normalizedPath = `${NEXT_CACHE_IMPLICIT_TAG_ID}${originalPath}` + let normalizedPath = `${NEXT_CACHE_IMPLICIT_TAG_ID}${originalPath || '/'}` if (type) { normalizedPath += `${normalizedPath.endsWith('/') ? '' : '/'}${type}` export function revalidatePath(originalPath: string type?: 'layout' | 'page') { `Warning: a dynamic page path ""${originalPath}"" was passed to ""revalidatePath"" but the ""type"" parameter is missing. This has no effect by default see more info here https://nextjs.org/docs/app/api-reference/functions/revalidatePath` ) } - return revalidate([normalizedPath] `revalidatePath ${originalPath}`) + + const tags = [normalizedPath] + if (normalizedPath === `${NEXT_CACHE_IMPLICIT_TAG_ID}/`) { + tags.push(`${NEXT_CACHE_IMPLICIT_TAG_ID}/index`) + } else if (normalizedPath === `${NEXT_CACHE_IMPLICIT_TAG_ID}/index`) { + tags.push(`${NEXT_CACHE_IMPLICIT_TAG_ID}/`) + } + + return revalidate(tags `revalidatePath ${originalPath}`) } function revalidate(tags: string[] expression: string) {"
vercel/next.js,75b1ceff2fb29d78f7a8566124a877bc2b7386c2,Steven,2025-10-07 16:03:51,fix(cache-tags): add `/index` to implicit tags and adjust `revalidatePath()` (#84586)  This fixes an issue where the tag was `/` but the build output was `/index` (and vice-versa) meaning you couldn't use `revalidatePath()` in some cases because the tag didn't match.  ---------  Co-authored-by: JJ Kasper <jj@jjsweb.site>,test/e2e/app-dir/use-cache-custom-handler/use-cache-custom-handler.test.ts,2,2,4,"describe('use-cache-custom-handler' () => { expect(cliOutput).toContain('ModernCustomCacheHandler::refreshTags') expect(next.cliOutput.slice(outputIndex)).toMatch( - /ModernCustomCacheHandler::get \[""(development|[A-Za-z0-9_-]{21})"" ""([0-9a-f]{2})+"" \[\]\] \[ '_N_T_\/layout' '_N_T_\/page' '_N_T_\/' \]/ + /ModernCustomCacheHandler::get \[""(development|[A-Za-z0-9_-]{21})"" ""([0-9a-f]{2})+"" \[\]\] \[ '_N_T_\/layout' '_N_T_\/page' '_N_T_\/' '_N_T_\/index' \]/ ) expect(next.cliOutput.slice(outputIndex)).toMatch( describe('use-cache-custom-handler' () => { // to compare the cache entries timestamp with the expiration of the // implicit tags. expect(next.cliOutput.slice(outputIndex)).toContain( - `ModernCustomCacheHandler::getExpiration [""_N_T_/layout"" ""_N_T_/page"" ""_N_T_/""]` + `ModernCustomCacheHandler::getExpiration [""_N_T_/layout"" ""_N_T_/page"" ""_N_T_/"" ""_N_T_/index""]` ) // Because we use a low `revalidate` value for the ""use cache"" function new"
vercel/next.js,316c06295ca33cd8c340a64722cf9019b980efbf,Hendrik Liebau,2025-10-07 14:59:00,[dev] Define request ID for RSC requests on the client (#84605)  Previously  we defined a request ID for RSC requests on the server. The request ID is used to tag debug information sent via WebSocket to the client  which then routes those chunks to the debug channel associated with this ID.  However  this meant that the client had to await the server response to retrieve the request ID from the response headers  before we could pass the response (and the debug channel) to React.  For #84580  we want to pass the response promise directly to React  to accurately show timing information about the request in the React DevTools. To achieve this  we now define the request ID on the client  and send it to the server via a request header. This means that the client can create the debug channel immediately  without waiting for the server response.  closes NAR-426,packages/next/errors.json,2,1,3,"""850"": ""metadataBase is not a valid URL: %s"" ""851"": ""Pass either `webpack` or `turbopack` not both."" ""852"": ""Only custom servers can pass `webpack` `turbo` or `turbopack`."" - ""853"": ""Turbopack build failed"" + ""853"": ""Turbopack build failed"" + ""854"": ""Expected a %s request header."" }"
vercel/next.js,316c06295ca33cd8c340a64722cf9019b980efbf,Hendrik Liebau,2025-10-07 14:59:00,[dev] Define request ID for RSC requests on the client (#84605)  Previously  we defined a request ID for RSC requests on the server. The request ID is used to tag debug information sent via WebSocket to the client  which then routes those chunks to the debug channel associated with this ID.  However  this meant that the client had to await the server response to retrieve the request ID from the response headers  before we could pass the response (and the debug channel) to React.  For #84580  we want to pass the response promise directly to React  to accurately show timing information about the request in the React DevTools. To achieve this  we now define the request ID on the client  and send it to the server via a request header. This means that the client can create the debug channel immediately  without waiting for the server response.  closes NAR-426,packages/next/src/client/components/router-reducer/fetch-server-response.ts,16,5,21,import { NEXT_DID_POSTPONE_HEADER NEXT_ROUTER_STALE_TIME_HEADER NEXT_HTML_REQUEST_ID_HEADER + NEXT_REQUEST_ID_HEADER } from '../app-router-headers' import { callServer } from '../../app-call-server' import { findSourceMapURL } from '../../app-find-source-map-url' export type RequestHeaders = { // A header that is only added in test mode to assert on fetch priority 'Next-Test-Fetch-Priority'?: RequestInit['priority'] [NEXT_HTML_REQUEST_ID_HEADER]?: string // dev-only + [NEXT_REQUEST_ID_HEADER]?: string // dev-only } function doMpaNavigation(url: string): FetchServerResponseResult { export async function fetchServerResponse( : res.body const response = await (createFromNextReadableStream( flightStream - res.headers + headers ) as Promise<NavigationFlightResponse>) if (getAppBuildId() !== response.b) { export async function createFetch( headers['x-deployment-id'] = process.env.NEXT_DEPLOYMENT_ID } - if (process.env.NODE_ENV !== 'production' && self.__next_r) { - headers[NEXT_HTML_REQUEST_ID_HEADER] = self.__next_r + if (process.env.NODE_ENV !== 'production') { + if (self.__next_r) { + headers[NEXT_HTML_REQUEST_ID_HEADER] = self.__next_r + } + + // Create a new request ID for the server action request. The server uses + // this to tag debug information sent via WebSocket to the client which + // then routes those chunks to the debug channel associated with this ID. + headers[NEXT_REQUEST_ID_HEADER] = crypto + .getRandomValues(new Uint32Array(1))[0] + .toString(16) } const fetchOptions: RequestInit = { export async function createFetch( export function createFromNextReadableStream( flightStream: ReadableStream<Uint8Array> - responseHeaders: Headers + requestHeaders: RequestHeaders ): Promise<unknown> { return createFromReadableStream(flightStream { callServer findSourceMapURL - debugChannel: createDebugChannel && createDebugChannel(responseHeaders) + debugChannel: createDebugChannel && createDebugChannel(requestHeaders) }) }
vercel/next.js,316c06295ca33cd8c340a64722cf9019b980efbf,Hendrik Liebau,2025-10-07 14:59:00,[dev] Define request ID for RSC requests on the client (#84605)  Previously  we defined a request ID for RSC requests on the server. The request ID is used to tag debug information sent via WebSocket to the client  which then routes those chunks to the debug channel associated with this ID.  However  this meant that the client had to await the server response to retrieve the request ID from the response headers  before we could pass the response (and the debug channel) to React.  For #84580  we want to pass the response promise directly to React  to accurately show timing information about the request in the React DevTools. To achieve this  we now define the request ID on the client  and send it to the server via a request header. This means that the client can create the debug channel immediately  without waiting for the server response.  closes NAR-426,packages/next/src/client/components/router-reducer/reducers/server-action-reducer.ts,13,3,16,import { NEXT_ROUTER_STATE_TREE_HEADER NEXT_URL RSC_CONTENT_TYPE_HEADER + NEXT_REQUEST_ID_HEADER } from '../../app-router-headers' import { UnrecognizedActionError } from '../../unrecognized-action-error' async function fetchServerAction( headers[NEXT_URL] = nextUrl } - if (process.env.NODE_ENV !== 'production' && self.__next_r) { - headers[NEXT_HTML_REQUEST_ID_HEADER] = self.__next_r + if (process.env.NODE_ENV !== 'production') { + if (self.__next_r) { + headers[NEXT_HTML_REQUEST_ID_HEADER] = self.__next_r + } + + // Create a new request ID for the server action request. The server uses + // this to tag debug information sent via WebSocket to the client which + // then routes those chunks to the debug channel associated with this ID. + headers[NEXT_REQUEST_ID_HEADER] = crypto + .getRandomValues(new Uint32Array(1))[0] + .toString(16) } const res = await fetch(state.canonicalUrl { method: 'POST' headers body }) async function fetchServerAction( callServer findSourceMapURL temporaryReferences - debugChannel: createDebugChannel && createDebugChannel(res.headers) + debugChannel: createDebugChannel && createDebugChannel(headers) } )
vercel/next.js,316c06295ca33cd8c340a64722cf9019b980efbf,Hendrik Liebau,2025-10-07 14:59:00,[dev] Define request ID for RSC requests on the client (#84605)  Previously  we defined a request ID for RSC requests on the server. The request ID is used to tag debug information sent via WebSocket to the client  which then routes those chunks to the debug channel associated with this ID.  However  this meant that the client had to await the server response to retrieve the request ID from the response headers  before we could pass the response (and the debug channel) to React.  For #84580  we want to pass the response promise directly to React  to accurately show timing information about the request in the React DevTools. To achieve this  we now define the request ID on the client  and send it to the server via a request header. This means that the client can create the debug channel immediately  without waiting for the server response.  closes NAR-426,packages/next/src/client/components/segment-cache-impl/cache.ts,4,4,8,export async function fetchRouteOnCacheMiss( ) const serverData = await (createFromNextReadableStream( prefetchStream - response.headers + headers ) as Promise<RootTreePrefetch>) if (serverData.buildId !== getAppBuildId()) { // The server build does not match the client. Treat as a 404. During export async function fetchRouteOnCacheMiss( ) const serverData = await (createFromNextReadableStream( prefetchStream - response.headers + headers ) as Promise<NavigationFlightResponse>) if (serverData.b !== getAppBuildId()) { // The server build does not match the client. Treat as a 404. During export async function fetchSegmentOnCacheMiss( ) const serverData = await (createFromNextReadableStream( prefetchStream - response.headers + headers ) as Promise<SegmentPrefetch>) if (serverData.buildId !== getAppBuildId()) { // The server build does not match the client. Treat as a 404. During export async function fetchSegmentPrefetchesUsingDynamicRequest( ) const serverData = await (createFromNextReadableStream( prefetchStream - response.headers + headers ) as Promise<NavigationFlightResponse>) const isResponsePartial =
vercel/next.js,316c06295ca33cd8c340a64722cf9019b980efbf,Hendrik Liebau,2025-10-07 14:59:00,[dev] Define request ID for RSC requests on the client (#84605)  Previously  we defined a request ID for RSC requests on the server. The request ID is used to tag debug information sent via WebSocket to the client  which then routes those chunks to the debug channel associated with this ID.  However  this meant that the client had to await the server response to retrieve the request ID from the response headers  before we could pass the response (and the debug channel) to React.  For #84580  we want to pass the response promise directly to React  to accurately show timing information about the request in the React DevTools. To achieve this  we now define the request ID on the client  and send it to the server via a request header. This means that the client can create the debug channel immediately  without waiting for the server response.  closes NAR-426,packages/next/src/client/dev/debug-channel.ts,6,4,10,export function getOrCreateDebugChannelReadableWriterPair( return pair } -export function createDebugChannel(responseHeaders: Headers | undefined): { +export function createDebugChannel( + requestHeaders: Record<string string> | undefined +): { writable?: WritableStream readable?: ReadableStream } { let requestId: string | undefined - if (responseHeaders) { - requestId = responseHeaders.get(NEXT_REQUEST_ID_HEADER) ?? undefined + if (requestHeaders) { + requestId = requestHeaders[NEXT_REQUEST_ID_HEADER] ?? undefined if (!requestId) { throw new InvariantError( - `Expected a ${JSON.stringify(NEXT_REQUEST_ID_HEADER)} response header.` + `Expected a ${JSON.stringify(NEXT_REQUEST_ID_HEADER)} request header.` ) } } else {
vercel/next.js,b5eba8ff916464232004fc914570365f9110296b,Josh Story,2025-10-07 14:16:07,[Cache Components] Schedule work on timeouts (#84344)  Previously we used the immediate queue to schedule the consecutive tasks that would prerender and abort and page prerender. This works fine but since React does not consider immediates as IO for async work tracking it means we can't use it for scheduling more advanced cases like static->runtime->dynamic where the IO that unblocks in runtime phase can be picked up.  While React could change to include immediates as IO the argument here is that it isn't really IO since it is immediate work while timeouts generally have to schedule something to fire later with timeout zero being a sort of special case where later === now.  So instead we are going to move to scheduling our consecutive tasks using timeout as well that way we can align the Next.js and React heuristic for identifying IO and make certain kinds of debugging easier to implement.,packages/next/src/server/app-render/app-render-prerender-utils.ts,11,11,22,import { InvariantError } from '../../shared/lib/invariant-error' /** * This is a utility function to make scheduling sequential tasks that run back to back easier. - * We schedule on the same queue (setImmediate) at the same time to ensure no other events can sneak in between. + * We schedule on the same queue (setTimeout) at the same time to ensure no other events can sneak in between. */ export function prerenderAndAbortInSequentialTasks<R>( prerender: () => Promise<R> export function prerenderAndAbortInSequentialTasks<R>( } else { return new Promise((resolve reject) => { let pendingResult: Promise<R> - setImmediate(() => { + setTimeout(() => { try { pendingResult = prerender() pendingResult.catch(() => {}) } catch (err) { reject(err) } - }) - setImmediate(() => { + } 0) + setTimeout(() => { abort() resolve(pendingResult) - }) + } 0) }) } } export function prerenderAndAbortInSequentialTasksWithStages<R>( } else { return new Promise((resolve reject) => { let pendingResult: Promise<R> - setImmediate(() => { + setTimeout(() => { try { pendingResult = prerender() pendingResult.catch(() => {}) } catch (err) { reject(err) } - }) - setImmediate(() => { + } 0) + setTimeout(() => { advanceStage() - }) - setImmediate(() => { + } 0) + setTimeout(() => { abort() resolve(pendingResult) - }) + } 0) }) } }
vercel/next.js,b5eba8ff916464232004fc914570365f9110296b,Josh Story,2025-10-07 14:16:07,[Cache Components] Schedule work on timeouts (#84344)  Previously we used the immediate queue to schedule the consecutive tasks that would prerender and abort and page prerender. This works fine but since React does not consider immediates as IO for async work tracking it means we can't use it for scheduling more advanced cases like static->runtime->dynamic where the IO that unblocks in runtime phase can be picked up.  While React could change to include immediates as IO the argument here is that it isn't really IO since it is immediate work while timeouts generally have to schedule something to fire later with timeout zero being a sort of special case where later === now.  So instead we are going to move to scheduling our consecutive tasks using timeout as well that way we can align the Next.js and React heuristic for identifying IO and make certain kinds of debugging easier to implement.,packages/next/src/server/app-render/app-render-render-utils.ts,5,5,10,import { InvariantError } from '../../shared/lib/invariant-error' /** * This is a utility function to make scheduling sequential tasks that run back to back easier. - * We schedule on the same queue (setImmediate) at the same time to ensure no other events can sneak in between. + * We schedule on the same queue (setTimeout) at the same time to ensure no other events can sneak in between. */ export function scheduleInSequentialTasks<R>( render: () => R | Promise<R> export function scheduleInSequentialTasks<R>( } else { return new Promise((resolve reject) => { let pendingResult: R | Promise<R> - setImmediate(() => { + setTimeout(() => { try { pendingResult = render() } catch (err) { reject(err) } - }) - setImmediate(() => { + } 0) + setTimeout(() => { followup() resolve(pendingResult) - }) + } 0) }) } }
vercel/next.js,b5eba8ff916464232004fc914570365f9110296b,Josh Story,2025-10-07 14:16:07,[Cache Components] Schedule work on timeouts (#84344)  Previously we used the immediate queue to schedule the consecutive tasks that would prerender and abort and page prerender. This works fine but since React does not consider immediates as IO for async work tracking it means we can't use it for scheduling more advanced cases like static->runtime->dynamic where the IO that unblocks in runtime phase can be picked up.  While React could change to include immediates as IO the argument here is that it isn't really IO since it is immediate work while timeouts generally have to schedule something to fire later with timeout zero being a sort of special case where later === now.  So instead we are going to move to scheduling our consecutive tasks using timeout as well that way we can align the Next.js and React heuristic for identifying IO and make certain kinds of debugging easier to implement.,packages/next/src/server/lib/patch-fetch.ts,14,2,16,import { type ServerComponentsHmrCache type SetIncrementalFetchCacheContext } from '../response-cache' -import { waitAtLeastOneReactRenderTask } from '../../lib/scheduler' import { cloneResponse } from './clone-response' import type { IncrementalCache } from './incremental-cache' export function createPatchedFetcher( // make sure we still exclude them from prerenders if // cacheComponents is on so we introduce an artificial task boundary // here. - await waitAtLeastOneReactRenderTask() + await getTimeoutBoundary() break case 'prerender-ppr': case 'prerender-legacy': export function patchFetch(options: PatchableModule) { // Set the global fetch to the patched fetch. globalThis.fetch = createPatchedFetcher(original options) } + +let currentTimeoutBoundary: null | Promise<void> = null +function getTimeoutBoundary() { + if (!currentTimeoutBoundary) { + currentTimeoutBoundary = new Promise((r) => { + setTimeout(() => { + currentTimeoutBoundary = null + r() + } 0) + }) + } + return currentTimeoutBoundary +}
vercel/next.js,b5eba8ff916464232004fc914570365f9110296b,Josh Story,2025-10-07 14:16:07,[Cache Components] Schedule work on timeouts (#84344)  Previously we used the immediate queue to schedule the consecutive tasks that would prerender and abort and page prerender. This works fine but since React does not consider immediates as IO for async work tracking it means we can't use it for scheduling more advanced cases like static->runtime->dynamic where the IO that unblocks in runtime phase can be picked up.  While React could change to include immediates as IO the argument here is that it isn't really IO since it is immediate work while timeouts generally have to schedule something to fire later with timeout zero being a sort of special case where later === now.  So instead we are going to move to scheduling our consecutive tasks using timeout as well that way we can align the Next.js and React heuristic for identifying IO and make certain kinds of debugging easier to implement.,test/e2e/app-dir/cache-components-errors/cache-components-errors.test.ts,10,32,42,"describe('Cache Components Errors' () => { ""description"": ""Route ""/dynamic-metadata-error-route"": A component accessed data headers params searchParams or a short-lived cache without a Suspense boundary nor a ""use cache"" above it. See more info: https://nextjs.org/docs/messages/next-prerender-missing-suspense"" ""environmentLabel"": ""Server"" ""label"": ""Console Error"" - ""source"": ""app/dynamic-metadata-error-route/page.tsx (21:9) @ Dynamic - > 21 | await new Promise((r) => setTimeout(r)) - | ^"" + ""source"": ""app/dynamic-metadata-error-route/page.tsx (20:16) @ Dynamic + > 20 | async function Dynamic() { + | ^"" ""stack"": [ - ""Dynamic app/dynamic-metadata-error-route/page.tsx (21:9)"" + ""Dynamic app/dynamic-metadata-error-route/page.tsx (20:16)"" ""Page app/dynamic-metadata-error-route/page.tsx (15:7)"" ""LogSafely <anonymous>"" ] describe('Cache Components Errors' () => { ) if (isTurbopack) { - await expect(browser).toDisplayCollapsedRedbox(` - { - ""description"": ""Route ""/use-cache-private-without-suspense"": A component accessed data headers params searchParams or a short-lived cache without a Suspense boundary nor a ""use cache"" above it. See more info: https://nextjs.org/docs/messages/next-prerender-missing-suspense"" - ""environmentLabel"": ""Server"" - ""label"": ""Console Error"" - ""source"": ""app/use-cache-private-without-suspense/page.tsx (10:7) @ Page - > 10 | <Private /> - | ^"" - ""stack"": [ - ""Page app/use-cache-private-without-suspense/page.tsx (10:7)"" - ""LogSafely <anonymous>"" - ] - } - `) + await expect(browser).toDisplayCollapsedRedbox( + `""Redbox did not open.""` + ) } else { - await expect(browser).toDisplayCollapsedRedbox(` - { - ""description"": ""Route ""/use-cache-private-without-suspense"": A component accessed data headers params searchParams or a short-lived cache without a Suspense boundary nor a ""use cache"" above it. See more info: https://nextjs.org/docs/messages/next-prerender-missing-suspense"" - ""environmentLabel"": ""Server"" - ""label"": ""Console Error"" - ""source"": ""app/use-cache-private-without-suspense/page.tsx (10:7) @ Page - > 10 | <Private /> - | ^"" - ""stack"": [ - ""Page app/use-cache-private-without-suspense/page.tsx (10:7)"" - ""LogSafely <anonymous>"" - ] - } - `) + await expect(browser).toDisplayCollapsedRedbox( + `""Redbox did not open.""` + ) } }) } else {"
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,lerna.json,1,1,2,"""registry"": ""https://registry.npmjs.org/"" } } - ""version"": ""15.6.0-canary.48"" + ""version"": ""15.6.0-canary.49"" }"
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,packages/create-next-app/package.json,1,1,2,"{ ""name"": ""create-next-app"" - ""version"": ""15.6.0-canary.48"" + ""version"": ""15.6.0-canary.49"" ""keywords"": [ ""react"" ""next"""
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,packages/eslint-config-next/package.json,2,2,4,"{ ""name"": ""eslint-config-next"" - ""version"": ""15.6.0-canary.48"" + ""version"": ""15.6.0-canary.49"" ""description"": ""ESLint configuration used by Next.js."" ""main"": ""index.js"" ""license"": ""MIT"" } ""homepage"": ""https://nextjs.org/docs/app/api-reference/config/eslint"" ""dependencies"": { - ""@next/eslint-plugin-next"": ""15.6.0-canary.48"" + ""@next/eslint-plugin-next"": ""15.6.0-canary.49"" ""@rushstack/eslint-patch"": ""^1.10.3"" ""@typescript-eslint/eslint-plugin"": ""^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0"" ""@typescript-eslint/parser"": ""^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0"""
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,packages/eslint-plugin-internal/package.json,1,1,2,"{ ""name"": ""@next/eslint-plugin-internal"" ""private"": true - ""version"": ""15.6.0-canary.48"" + ""version"": ""15.6.0-canary.49"" ""description"": ""ESLint plugin for working on Next.js."" ""exports"": { ""."": ""./src/eslint-plugin-internal.js"""
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,packages/eslint-plugin-next/package.json,1,1,2,"{ ""name"": ""@next/eslint-plugin-next"" - ""version"": ""15.6.0-canary.48"" + ""version"": ""15.6.0-canary.49"" ""description"": ""ESLint plugin for Next.js."" ""main"": ""dist/index.js"" ""types"": ""dist/index.d.ts"""
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,packages/font/package.json,1,1,2,"{ ""name"": ""@next/font"" ""private"": true - ""version"": ""15.6.0-canary.48"" + ""version"": ""15.6.0-canary.49"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/font"""
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,packages/next-bundle-analyzer/package.json,1,1,2,"{ ""name"": ""@next/bundle-analyzer"" - ""version"": ""15.6.0-canary.48"" + ""version"": ""15.6.0-canary.49"" ""main"": ""index.js"" ""types"": ""index.d.ts"" ""license"": ""MIT"""
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,packages/next-codemod/package.json,1,1,2,"{ ""name"": ""@next/codemod"" - ""version"": ""15.6.0-canary.48"" + ""version"": ""15.6.0-canary.49"" ""license"": ""MIT"" ""repository"": { ""type"": ""git"""
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,packages/next-env/package.json,1,1,2,"{ ""name"": ""@next/env"" - ""version"": ""15.6.0-canary.48"" + ""version"": ""15.6.0-canary.49"" ""keywords"": [ ""react"" ""next"""
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,packages/next-mdx/package.json,1,1,2,"{ ""name"": ""@next/mdx"" - ""version"": ""15.6.0-canary.48"" + ""version"": ""15.6.0-canary.49"" ""main"": ""index.js"" ""license"": ""MIT"" ""repository"": {"
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,packages/next-plugin-storybook/package.json,1,1,2,"{ ""name"": ""@next/plugin-storybook"" - ""version"": ""15.6.0-canary.48"" + ""version"": ""15.6.0-canary.49"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/next-plugin-storybook"""
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,packages/next-polyfill-module/package.json,1,1,2,"{ ""name"": ""@next/polyfill-module"" - ""version"": ""15.6.0-canary.48"" + ""version"": ""15.6.0-canary.49"" ""description"": ""A standard library polyfill for ES Modules supporting browsers (Edge 16+ Firefox 60+ Chrome 61+ Safari 10.1+)"" ""main"": ""dist/polyfill-module.js"" ""license"": ""MIT"""
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,packages/next-polyfill-nomodule/package.json,1,1,2,"{ ""name"": ""@next/polyfill-nomodule"" - ""version"": ""15.6.0-canary.48"" + ""version"": ""15.6.0-canary.49"" ""description"": ""A polyfill for non-dead nomodule browsers."" ""main"": ""dist/polyfill-nomodule.js"" ""license"": ""MIT"""
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,packages/next-rspack/package.json,1,1,2,"{ ""name"": ""next-rspack"" - ""version"": ""15.6.0-canary.48"" + ""version"": ""15.6.0-canary.49"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/next-rspack"""
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,packages/next-swc/package.json,1,1,2,"{ ""name"": ""@next/swc"" - ""version"": ""15.6.0-canary.48"" + ""version"": ""15.6.0-canary.49"" ""private"": true ""files"": [ ""native/"""
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,packages/next/package.json,7,7,14,"{ ""name"": ""next"" - ""version"": ""15.6.0-canary.48"" + ""version"": ""15.6.0-canary.49"" ""description"": ""The React Framework"" ""main"": ""./dist/server/next.js"" ""license"": ""MIT"" ] } ""dependencies"": { - ""@next/env"": ""15.6.0-canary.48"" + ""@next/env"": ""15.6.0-canary.49"" ""@swc/helpers"": ""0.5.15"" ""caniuse-lite"": ""^1.0.30001579"" ""postcss"": ""8.4.31"" ""@modelcontextprotocol/sdk"": ""1.18.1"" ""@mswjs/interceptors"": ""0.23.0"" ""@napi-rs/triples"": ""1.2.0"" - ""@next/font"": ""15.6.0-canary.48"" - ""@next/polyfill-module"": ""15.6.0-canary.48"" - ""@next/polyfill-nomodule"": ""15.6.0-canary.48"" - ""@next/react-refresh-utils"": ""15.6.0-canary.48"" - ""@next/swc"": ""15.6.0-canary.48"" + ""@next/font"": ""15.6.0-canary.49"" + ""@next/polyfill-module"": ""15.6.0-canary.49"" + ""@next/polyfill-nomodule"": ""15.6.0-canary.49"" + ""@next/react-refresh-utils"": ""15.6.0-canary.49"" + ""@next/swc"": ""15.6.0-canary.49"" ""@opentelemetry/api"": ""1.6.0"" ""@playwright/test"": ""1.51.1"" ""@rspack/core"": ""1.5.0"""
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,packages/react-refresh-utils/package.json,1,1,2,"{ ""name"": ""@next/react-refresh-utils"" - ""version"": ""15.6.0-canary.48"" + ""version"": ""15.6.0-canary.49"" ""description"": ""An experimental package providing utilities for React Refresh."" ""repository"": { ""url"": ""vercel/next.js"""
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,packages/third-parties/package.json,2,2,4,"{ ""name"": ""@next/third-parties"" - ""version"": ""15.6.0-canary.48"" + ""version"": ""15.6.0-canary.49"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/third-parties"" ""third-party-capital"": ""1.0.20"" } ""devDependencies"": { - ""next"": ""15.6.0-canary.48"" + ""next"": ""15.6.0-canary.49"" ""outdent"": ""0.8.0"" ""prettier"": ""2.5.1"" ""typescript"": ""5.9.2"""
vercel/next.js,52a26cdb0ccb8c27d1c484aa22c46d2c9332890e,nextjs-bot,2025-10-07 14:05:33,v15.6.0-canary.49,pnpm-lock.yaml,8,8,16,importers: packages/eslint-config-next: dependencies: '@next/eslint-plugin-next': - specifier: 15.6.0-canary.48 + specifier: 15.6.0-canary.49 version: link:../eslint-plugin-next '@rushstack/eslint-patch': specifier: ^1.10.3 importers: packages/next: dependencies: '@next/env': - specifier: 15.6.0-canary.48 + specifier: 15.6.0-canary.49 version: link:../next-env '@swc/helpers': specifier: 0.5.15 importers: specifier: 1.2.0 version: 1.2.0 '@next/font': - specifier: 15.6.0-canary.48 + specifier: 15.6.0-canary.49 version: link:../font '@next/polyfill-module': - specifier: 15.6.0-canary.48 + specifier: 15.6.0-canary.49 version: link:../next-polyfill-module '@next/polyfill-nomodule': - specifier: 15.6.0-canary.48 + specifier: 15.6.0-canary.49 version: link:../next-polyfill-nomodule '@next/react-refresh-utils': - specifier: 15.6.0-canary.48 + specifier: 15.6.0-canary.49 version: link:../react-refresh-utils '@next/swc': - specifier: 15.6.0-canary.48 + specifier: 15.6.0-canary.49 version: link:../next-swc '@opentelemetry/api': specifier: 1.6.0 importers: version: 1.0.20 devDependencies: next: - specifier: 15.6.0-canary.48 + specifier: 15.6.0-canary.49 version: link:../next outdent: specifier: 0.8.0
vercel/next.js,32acdc03e808e92f0f76e52125979d24798e9a16,Niklas Mischkulnig,2025-10-07 14:02:01,"Turbopack: absolute requests in webpack loader (#84575)  Recent sass-loader versions use this heavily: `this.getResolver()(...  ""/Users/foo/..../bar.scss"")`",test/e2e/app-dir/webpack-loader-binary/webpack-loader-binary.test.ts,3,1,4,import { nextTestSetup } from 'e2e-utils' describe('webpack-loader-ts-transform' () => { - const { next } = nextTestSetup({ + const { next skipped } = nextTestSetup({ files: __dirname skipDeployment: true }) + if (skipped) return + it('should allow passing binary assets to and from a Webpack loader' async () => { const $ = await next.render$('/') expect($('#text').text()).toBe('Got a buffer of 18 bytes')
vercel/next.js,32acdc03e808e92f0f76e52125979d24798e9a16,Niklas Mischkulnig,2025-10-07 14:02:01,"Turbopack: absolute requests in webpack loader (#84575)  Recent sass-loader versions use this heavily: `this.getResolver()(...  ""/Users/foo/..../bar.scss"")`",test/e2e/app-dir/webpack-loader-conditions/webpack-loader-conditions.test.ts,3,1,4,import { nextTestSetup } from 'e2e-utils' ;(process.env.IS_TURBOPACK_TEST ? describe : describe.skip)( 'webpack-loader-conditions' () => { - const { next } = nextTestSetup({ + const { next skipped } = nextTestSetup({ files: __dirname skipDeployment: true }) + if (skipped) return + it('should render correctly on server site' async () => { const res = await next.fetch('/') const html = (await res.text()).replaceAll(/<!-- -->/g '')
vercel/next.js,32acdc03e808e92f0f76e52125979d24798e9a16,Niklas Mischkulnig,2025-10-07 14:02:01,"Turbopack: absolute requests in webpack loader (#84575)  Recent sass-loader versions use this heavily: `this.getResolver()(...  ""/Users/foo/..../bar.scss"")`",test/e2e/app-dir/webpack-loader-fs/webpack-loader-fs.test.ts,3,1,4,import { nextTestSetup } from 'e2e-utils' describe('webpack-loader-fs' () => { - const { next } = nextTestSetup({ + const { next skipped } = nextTestSetup({ files: __dirname skipDeployment: true }) + if (skipped) return + it('should allow reading the input FS' async () => { const $ = await next.render$('/') expect($('#test').text()).toBe(
vercel/next.js,32acdc03e808e92f0f76e52125979d24798e9a16,Niklas Mischkulnig,2025-10-07 14:02:01,"Turbopack: absolute requests in webpack loader (#84575)  Recent sass-loader versions use this heavily: `this.getResolver()(...  ""/Users/foo/..../bar.scss"")`",test/e2e/app-dir/webpack-loader-resolve/app/file.test-file.ts,1,0,1,+export default 'wrong'
vercel/next.js,32acdc03e808e92f0f76e52125979d24798e9a16,Niklas Mischkulnig,2025-10-07 14:02:01,"Turbopack: absolute requests in webpack loader (#84575)  Recent sass-loader versions use this heavily: `this.getResolver()(...  ""/Users/foo/..../bar.scss"")`",test/e2e/app-dir/webpack-loader-resolve/app/layout.tsx,7,0,7,+export default function Root({ children }: { children: React.ReactNode }) { + return ( + <html> + <body>{children}</body> + </html> + ) +}
vercel/next.js,32acdc03e808e92f0f76e52125979d24798e9a16,Niklas Mischkulnig,2025-10-07 14:02:01,"Turbopack: absolute requests in webpack loader (#84575)  Recent sass-loader versions use this heavily: `this.getResolver()(...  ""/Users/foo/..../bar.scss"")`",test/e2e/app-dir/webpack-loader-resolve/app/page.js,11,0,11,"+import absolute from './file.test-file?absolute=data1' +import relative from './file.test-file?relative=data2' + +export default function Page() { + return ( + <div> + <p id=""absolute"">{absolute}</p> + <p id=""relative"">{relative}</p> + </div> + ) +}"
vercel/next.js,32acdc03e808e92f0f76e52125979d24798e9a16,Niklas Mischkulnig,2025-10-07 14:02:01,"Turbopack: absolute requests in webpack loader (#84575)  Recent sass-loader versions use this heavily: `this.getResolver()(...  ""/Users/foo/..../bar.scss"")`",test/e2e/app-dir/webpack-loader-resolve/data1.js,1,0,1,+export default 'abc'
vercel/next.js,32acdc03e808e92f0f76e52125979d24798e9a16,Niklas Mischkulnig,2025-10-07 14:02:01,"Turbopack: absolute requests in webpack loader (#84575)  Recent sass-loader versions use this heavily: `this.getResolver()(...  ""/Users/foo/..../bar.scss"")`",test/e2e/app-dir/webpack-loader-resolve/data2.js,1,0,1,+export default 'xyz'
vercel/next.js,32acdc03e808e92f0f76e52125979d24798e9a16,Niklas Mischkulnig,2025-10-07 14:02:01,"Turbopack: absolute requests in webpack loader (#84575)  Recent sass-loader versions use this heavily: `this.getResolver()(...  ""/Users/foo/..../bar.scss"")`",test/e2e/app-dir/webpack-loader-resolve/next.config.js,19,0,19,+/** + * @type {import('next').NextConfig} + */ +const nextConfig = { + turbopack: { + rules: { + '*.test-file.ts': [require.resolve('./test-file-loader.js')] + } + } + webpack(config) { + config.module.rules.push({ + test: /\.test-file\.ts/ + use: require.resolve('./test-file-loader.js') + }) + return config + } +} + +module.exports = nextConfig
vercel/next.js,32acdc03e808e92f0f76e52125979d24798e9a16,Niklas Mischkulnig,2025-10-07 14:02:01,"Turbopack: absolute requests in webpack loader (#84575)  Recent sass-loader versions use this heavily: `this.getResolver()(...  ""/Users/foo/..../bar.scss"")`",test/e2e/app-dir/webpack-loader-resolve/test-file-loader.js,21,0,21,"+const fs = require('fs') +const path = require('path') + +module.exports = async function () { + let params = new URLSearchParams(this.resourceQuery.slice(1)) + let file + if (params.has('absolute')) { + file = path.join(__dirname params.get('absolute')) + } else if (params.has('relative')) { + file = './' + params.get('relative') + } else { + this.callback(null ""throw new Error('no file specified')"") + return + } + + const resolve = this.getResolve({}) + const result = await resolve(__dirname file) + this.addDependency(result) + + return fs.readFileSync(result 'utf8') +}"
vercel/next.js,32acdc03e808e92f0f76e52125979d24798e9a16,Niklas Mischkulnig,2025-10-07 14:02:01,"Turbopack: absolute requests in webpack loader (#84575)  Recent sass-loader versions use this heavily: `this.getResolver()(...  ""/Users/foo/..../bar.scss"")`",test/e2e/app-dir/webpack-loader-resolve/webpack-loader-resolve.test.ts,19,0,19,+import { nextTestSetup } from 'e2e-utils' + +describe('webpack-loader-resolve' () => { + const { next skipped } = nextTestSetup({ + files: __dirname + // This test is skipped because it's only expected to run in turbopack which isn't enabled for builds + skipDeployment: true + }) + + if (skipped) { + return + } + + it('should support resolving absolute path via loader getResolve' async () => { + const $ = await next.render$('/') + expect($('#absolute').text()).toBe('abc') + expect($('#relative').text()).toBe('xyz') + }) +})
vercel/next.js,32acdc03e808e92f0f76e52125979d24798e9a16,Niklas Mischkulnig,2025-10-07 14:02:01,"Turbopack: absolute requests in webpack loader (#84575)  Recent sass-loader versions use this heavily: `this.getResolver()(...  ""/Users/foo/..../bar.scss"")`",test/e2e/app-dir/webpack-loader-resource-query/turbopack-loader-resource-query.test.ts,3,2,5,import { nextTestSetup } from 'e2e-utils' describe('webpack-loader-resource-query' () => { - const { next } = nextTestSetup({ + const { next skipped } = nextTestSetup({ files: __dirname skipDeployment: true }) - // Recommended for tests that check HTML. Cheerio is a HTML parser that has a jQuery like API. + if (skipped) return + it('should pass query to loader' async () => { await next.render$('/')
vercel/next.js,32acdc03e808e92f0f76e52125979d24798e9a16,Niklas Mischkulnig,2025-10-07 14:02:01,"Turbopack: absolute requests in webpack loader (#84575)  Recent sass-loader versions use this heavily: `this.getResolver()(...  ""/Users/foo/..../bar.scss"")`",test/e2e/app-dir/webpack-loader-ts-transform/webpack-loader-ts-transform.test.ts,2,5,7,import { nextTestSetup } from 'e2e-utils' describe('webpack-loader-ts-transform' () => { - const { next isTurbopack skipped } = nextTestSetup({ + const { next skipped } = nextTestSetup({ files: __dirname // This test is skipped because it's only expected to run in turbopack which isn't enabled for builds skipDeployment: true }) - if (!isTurbopack || skipped) { - it('should only run the test in turbopack' () => {}) - return - } + if (skipped) return it('should accept Typescript returned from Webpack loaders' async () => { const $ = await next.render$('/')
vercel/next.js,32acdc03e808e92f0f76e52125979d24798e9a16,Niklas Mischkulnig,2025-10-07 14:02:01,"Turbopack: absolute requests in webpack loader (#84575)  Recent sass-loader versions use this heavily: `this.getResolver()(...  ""/Users/foo/..../bar.scss"")`",turbopack/crates/turbopack-node/js/src/transforms/webpack-loaders.ts,17,0,17,import { type TransformIpc } from './transforms' import fs from 'fs' +import path from 'path' export type IpcInfoMessage = | { const transform = ( request: string callback?: (err?: Error result?: string) => void ) => { + if (path.isAbsolute(request)) { + // Relativize absolute requests. Turbopack disallow them in JS code but here it's + // generated programatically and there is a smaller problem of + // non-cacheable/non-portable builds. + request = path.relative(lookupPath request) + + // On Windows the path might be still absolute if it's on a different drive. Just + // let the resolver throw the error in that case. + if ( + !path.isAbsolute(request) && + request.split(path.sep)[0] !== '..' + ) { + request = './' + request + } + } + const promise = ipc .sendRequest({ type: 'resolve'
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,crates/next-core/src/next_config.rs,0,6,6,pub struct ExperimentalConfig { trust_host_header: Option<bool> url_imports: Option<serde_json::Value> - view_transition: Option<bool> /// This option is to enable running the Webpack build in a worker thread /// (doesn't apply to Turbopack). webpack_build_worker: Option<bool> impl NextConfig { Vc::cell(self.experimental.taint.unwrap_or(false)) } - #[turbo_tasks::function] - pub fn enable_view_transition(&self) -> Vc<bool> { - Vc::cell(self.experimental.view_transition.unwrap_or(false)) - } - #[turbo_tasks::function] pub fn enable_cache_components(&self) -> Vc<bool> { Vc::cell(self.experimental.cache_components.unwrap_or(false))
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,crates/next-core/src/next_import_map.rs,8,14,22,"pub async fn get_next_client_import_map( match &ty { ClientContextType::Pages { .. } => {} ClientContextType::App { app_dir } => { - let react_flavor = if *next_config.enable_ppr().await? - || *next_config.enable_taint().await? - || *next_config.enable_view_transition().await? - { - ""-experimental"" - } else { - """" - }; + // Keep in sync with file:///./../../../packages/next/src/lib/needs-experimental-react.ts + let react_flavor = + if *next_config.enable_ppr().await? || *next_config.enable_taint().await? { + ""-experimental"" + } else { + """" + }; import_map.insert_exact_alias( rcstr!(""react"") async fn apply_vendored_react_aliases_server( ) -> Result<()> { let ppr = *next_config.enable_ppr().await?; let taint = *next_config.enable_taint().await?; - let view_transition = *next_config.enable_view_transition().await?; - let react_channel = if ppr || taint || view_transition { - ""-experimental"" - } else { - """" - }; + let react_channel = if ppr || taint { ""-experimental"" } else { """" }; let react_condition = if ty.should_use_react_server_condition() { ""server"" } else {"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,docs/01-app/03-api-reference/05-config/01-next-config-js/viewTransition.mdx,6,7,13,description: Enable ViewTransition API from React in App Router version: experimental --- -`viewTransition` is an experimental flag that enables the new experimental [View Transitions API](https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API) in React. This API allows you to leverage the native View Transitions browser API to create seamless transitions between UI states. +`viewTransition` is an experimental flag that enables the new [View Transitions API](https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API) in React. This API allows you to leverage the native View Transitions browser API to create seamless transitions between UI states. To enable this feature you need to set the `viewTransition` property to `true` in your `next.config.js` file. const nextConfig = { module.exports = nextConfig ``` -> Important Notice: This feature is not developed or maintained by the Next.js team — it is an experimental API from the React team. It is still in **early stages** and **not recommended for production use**. The implementation is still being iterated on and its behavior may change in future React releases. -> Enabling this feature requires understanding the experimental nature of the API. To fully grasp its behavior refer to the [React pull request](https://github.com/facebook/react/pull/31975) and related discussions. +> Important Notice: The `<ViewTransition>` Component is already available in React's Canary release channel. +> `experimental.viewTransition` is only required to enable deeper integration with Next.js features e.g. automatically +> [adding Transition types](https://react.dev/reference/react/addTransitionType) for navigations. Next.js specific transition types are not implemented yet. ## Usage -Once enabled you can import the `ViewTransition` component from React in your application: +You can import the [`<ViewTransition>` Component](https://react.dev/reference/react/ViewTransition) from React in your application: ```jsx -import { unstable_ViewTransition as ViewTransition } from 'react' +import { ViewTransition } from 'react' ``` -However documentation and examples are currently limited and you will need to refer directly to React’s source code and discussions to understand how this works. - ### Live Demo Check out our [Next.js View Transition Demo](https://view-transition-example.vercel.app) to see this feature in action.
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-client.development.js,7,9,16,"? parentHostFiber : Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC; }; - FragmentInstance.prototype.experimental_scrollIntoView = function ( - alignToTop - ) { + FragmentInstance.prototype.scrollIntoView = function (alignToTop) { if (""object"" === typeof alignToTop) throw Error( - ""FragmentInstance.experimental_scrollIntoView() does not support scrollIntoViewOptions. Use the alignToTop boolean instead."" + ""FragmentInstance.scrollIntoView() does not support scrollIntoViewOptions. Use the alignToTop boolean instead."" ); var children = []; traverseVisibleHostChildren( }; (function () { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-a4eb2dfa-20251006"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-a4eb2dfa-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); })(); (""function"" === typeof Map && !(function () { var internals = { bundleType: 1 - version: ""19.3.0-experimental-c7862584-20251006"" + version: ""19.3.0-experimental-a4eb2dfa-20251006"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-c7862584-20251006"" + reconcilerVersion: ""19.3.0-experimental-a4eb2dfa-20251006"" }; internals.overrideHookState = overrideHookState; internals.overrideHookStateDeletePath = overrideHookStateDeletePath; listenToAllSupportedEvents(container); return new ReactDOMHydrationRoot(initialChildren); }; - exports.version = ""19.3.0-experimental-c7862584-20251006""; + exports.version = ""19.3.0-experimental-a4eb2dfa-20251006""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-client.production.js,6,6,12,"function validateDocumentPositionWithFiberTree( fragmentFiber) : !1; } -FragmentInstance.prototype.experimental_scrollIntoView = function (alignToTop) { +FragmentInstance.prototype.scrollIntoView = function (alignToTop) { if (""object"" === typeof alignToTop) throw Error(formatProdErrorMessage(566)); var children = []; traverseVisibleHostChildren( ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (target) { }; var isomorphicReactPackageVersion$jscomp$inline_2217 = React.version; if ( - ""19.3.0-experimental-c7862584-20251006"" !== + ""19.3.0-experimental-a4eb2dfa-20251006"" !== isomorphicReactPackageVersion$jscomp$inline_2217 ) throw Error( formatProdErrorMessage( 527 isomorphicReactPackageVersion$jscomp$inline_2217 - ""19.3.0-experimental-c7862584-20251006"" + ""19.3.0-experimental-a4eb2dfa-20251006"" ) ); ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { }; var internals$jscomp$inline_2914 = { bundleType: 0 - version: ""19.3.0-experimental-c7862584-20251006"" + version: ""19.3.0-experimental-a4eb2dfa-20251006"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-c7862584-20251006"" + reconcilerVersion: ""19.3.0-experimental-a4eb2dfa-20251006"" }; if (""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) { var hook$jscomp$inline_2915 = __REACT_DEVTOOLS_GLOBAL_HOOK__; exports.hydrateRoot = function (container initialChildren options) { listenToAllSupportedEvents(container); return new ReactDOMHydrationRoot(initialChildren); }; -exports.version = ""19.3.0-experimental-c7862584-20251006""; +exports.version = ""19.3.0-experimental-a4eb2dfa-20251006"";"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-profiling.development.js,7,9,16,"? parentHostFiber : Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC; }; - FragmentInstance.prototype.experimental_scrollIntoView = function ( - alignToTop - ) { + FragmentInstance.prototype.scrollIntoView = function (alignToTop) { if (""object"" === typeof alignToTop) throw Error( - ""FragmentInstance.experimental_scrollIntoView() does not support scrollIntoViewOptions. Use the alignToTop boolean instead."" + ""FragmentInstance.scrollIntoView() does not support scrollIntoViewOptions. Use the alignToTop boolean instead."" ); var children = []; traverseVisibleHostChildren( }; (function () { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-a4eb2dfa-20251006"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-a4eb2dfa-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); })(); (""function"" === typeof Map && !(function () { var internals = { bundleType: 1 - version: ""19.3.0-experimental-c7862584-20251006"" + version: ""19.3.0-experimental-a4eb2dfa-20251006"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-c7862584-20251006"" + reconcilerVersion: ""19.3.0-experimental-a4eb2dfa-20251006"" }; internals.overrideHookState = overrideHookState; internals.overrideHookStateDeletePath = overrideHookStateDeletePath; exports.useFormStatus = function () { return resolveDispatcher().useHostTransitionStatus(); }; - exports.version = ""19.3.0-experimental-c7862584-20251006""; + exports.version = ""19.3.0-experimental-a4eb2dfa-20251006""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-profiling.profiling.js,6,6,12,"function validateDocumentPositionWithFiberTree( fragmentFiber) : !1; } -FragmentInstance.prototype.experimental_scrollIntoView = function (alignToTop) { +FragmentInstance.prototype.scrollIntoView = function (alignToTop) { if (""object"" === typeof alignToTop) throw Error(formatProdErrorMessage(566)); var children = []; traverseVisibleHostChildren( ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (target) { }; var isomorphicReactPackageVersion$jscomp$inline_2513 = React.version; if ( - ""19.3.0-experimental-c7862584-20251006"" !== + ""19.3.0-experimental-a4eb2dfa-20251006"" !== isomorphicReactPackageVersion$jscomp$inline_2513 ) throw Error( formatProdErrorMessage( 527 isomorphicReactPackageVersion$jscomp$inline_2513 - ""19.3.0-experimental-c7862584-20251006"" + ""19.3.0-experimental-a4eb2dfa-20251006"" ) ); ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { }; var internals$jscomp$inline_3223 = { bundleType: 0 - version: ""19.3.0-experimental-c7862584-20251006"" + version: ""19.3.0-experimental-a4eb2dfa-20251006"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-c7862584-20251006"" + reconcilerVersion: ""19.3.0-experimental-a4eb2dfa-20251006"" }; if (""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) { var hook$jscomp$inline_3224 = __REACT_DEVTOOLS_GLOBAL_HOOK__; exports.useFormState = function (action initialState permalink) { exports.useFormStatus = function () { return ReactSharedInternals.H.useHostTransitionStatus(); }; -exports.version = ""19.3.0-experimental-c7862584-20251006""; +exports.version = ""19.3.0-experimental-a4eb2dfa-20251006""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server-legacy.browser.development.js,1,1,2,"'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToReadableStream"" which supports Suspense on the server' ); }; - exports.version = ""19.3.0-experimental-c7862584-20251006""; + exports.version = ""19.3.0-experimental-a4eb2dfa-20251006""; })();"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server-legacy.browser.production.js,1,1,2,"exports.renderToString = function (children options) { 'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToReadableStream"" which supports Suspense on the server' ); }; -exports.version = ""19.3.0-experimental-c7862584-20251006""; +exports.version = ""19.3.0-experimental-a4eb2dfa-20251006"";"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server-legacy.node.development.js,1,1,2,"'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToPipeableStream"" which supports Suspense on the server' ); }; - exports.version = ""19.3.0-experimental-c7862584-20251006""; + exports.version = ""19.3.0-experimental-a4eb2dfa-20251006""; })();"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server-legacy.node.production.js,1,1,2,"exports.renderToString = function (children options) { 'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToPipeableStream"" which supports Suspense on the server' ); }; -exports.version = ""19.3.0-experimental-c7862584-20251006""; +exports.version = ""19.3.0-experimental-a4eb2dfa-20251006"";"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.browser.development.js,3,3,6,"} function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-a4eb2dfa-20251006"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-a4eb2dfa-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); } var React = require(""next/dist/compiled/react-experimental"") startWork(request); }); }; - exports.version = ""19.3.0-experimental-c7862584-20251006""; + exports.version = ""19.3.0-experimental-a4eb2dfa-20251006""; })();"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.browser.production.js,3,3,6,"function getPostponedState(request) { } function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-a4eb2dfa-20251006"" !== isomorphicReactPackageVersion) throw Error( formatProdErrorMessage( 527 isomorphicReactPackageVersion - ""19.3.0-experimental-c7862584-20251006"" + ""19.3.0-experimental-a4eb2dfa-20251006"" ) ); } exports.resumeAndPrerender = function (children postponedState options) { startWork(request); }); }; -exports.version = ""19.3.0-experimental-c7862584-20251006""; +exports.version = ""19.3.0-experimental-a4eb2dfa-20251006"";"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.bun.production.js,3,3,6,"function addToReplayParent(node parentKeyPath trackedPostpones) { } var isomorphicReactPackageVersion$jscomp$inline_871 = React.version; if ( - ""19.3.0-experimental-c7862584-20251006"" !== + ""19.3.0-experimental-a4eb2dfa-20251006"" !== isomorphicReactPackageVersion$jscomp$inline_871 ) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion$jscomp$inline_871 + - ""\n - react-dom: 19.3.0-experimental-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-a4eb2dfa-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); exports.renderToReadableStream = function (children options) { return new Promise(function (resolve reject) { exports.renderToReadableStream = function (children options) { startWork(request); }); }; -exports.version = ""19.3.0-experimental-c7862584-20251006""; +exports.version = ""19.3.0-experimental-a4eb2dfa-20251006"";"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.edge.development.js,3,3,6,"} function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-a4eb2dfa-20251006"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-a4eb2dfa-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); } var React = require(""next/dist/compiled/react-experimental"") startWork(request); }); }; - exports.version = ""19.3.0-experimental-c7862584-20251006""; + exports.version = ""19.3.0-experimental-a4eb2dfa-20251006""; })();"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.edge.production.js,3,3,6,"function getPostponedState(request) { } function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-a4eb2dfa-20251006"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-a4eb2dfa-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); } ensureCorrectIsomorphicReactVersion(); exports.resumeAndPrerender = function (children postponedState options) { startWork(request); }); }; -exports.version = ""19.3.0-experimental-c7862584-20251006""; +exports.version = ""19.3.0-experimental-a4eb2dfa-20251006"";"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.node.development.js,3,3,6,"} function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-a4eb2dfa-20251006"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-a4eb2dfa-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); } function createDrainHandler(destination request) { } }; }; - exports.version = ""19.3.0-experimental-c7862584-20251006""; + exports.version = ""19.3.0-experimental-a4eb2dfa-20251006""; })();"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.node.production.js,3,3,6,"function getPostponedState(request) { } function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-a4eb2dfa-20251006"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-a4eb2dfa-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); } ensureCorrectIsomorphicReactVersion(); exports.resumeToPipeableStream = function (children postponedState options) { } }; }; -exports.version = ""19.3.0-experimental-c7862584-20251006""; +exports.version = ""19.3.0-experimental-a4eb2dfa-20251006"";"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-unstable_testing.development.js,7,9,16,"? parentHostFiber : Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC; }; - FragmentInstance.prototype.experimental_scrollIntoView = function ( - alignToTop - ) { + FragmentInstance.prototype.scrollIntoView = function (alignToTop) { if (""object"" === typeof alignToTop) throw Error( - ""FragmentInstance.experimental_scrollIntoView() does not support scrollIntoViewOptions. Use the alignToTop boolean instead."" + ""FragmentInstance.scrollIntoView() does not support scrollIntoViewOptions. Use the alignToTop boolean instead."" ); var children = []; traverseVisibleHostChildren( }; (function () { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-a4eb2dfa-20251006"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-a4eb2dfa-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); })(); (""function"" === typeof Map && !(function () { var internals = { bundleType: 1 - version: ""19.3.0-experimental-c7862584-20251006"" + version: ""19.3.0-experimental-a4eb2dfa-20251006"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-c7862584-20251006"" + reconcilerVersion: ""19.3.0-experimental-a4eb2dfa-20251006"" }; internals.overrideHookState = overrideHookState; internals.overrideHookStateDeletePath = overrideHookStateDeletePath; } }; }; - exports.version = ""19.3.0-experimental-c7862584-20251006""; + exports.version = ""19.3.0-experimental-a4eb2dfa-20251006""; })();"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-unstable_testing.production.js,6,6,12,"function validateDocumentPositionWithFiberTree( fragmentFiber) : !1; } -FragmentInstance.prototype.experimental_scrollIntoView = function (alignToTop) { +FragmentInstance.prototype.scrollIntoView = function (alignToTop) { if (""object"" === typeof alignToTop) throw Error(formatProdErrorMessage(566)); var children = []; traverseVisibleHostChildren( ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (target) { }; var isomorphicReactPackageVersion$jscomp$inline_2246 = React.version; if ( - ""19.3.0-experimental-c7862584-20251006"" !== + ""19.3.0-experimental-a4eb2dfa-20251006"" !== isomorphicReactPackageVersion$jscomp$inline_2246 ) throw Error( formatProdErrorMessage( 527 isomorphicReactPackageVersion$jscomp$inline_2246 - ""19.3.0-experimental-c7862584-20251006"" + ""19.3.0-experimental-a4eb2dfa-20251006"" ) ); ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { }; var internals$jscomp$inline_2948 = { bundleType: 0 - version: ""19.3.0-experimental-c7862584-20251006"" + version: ""19.3.0-experimental-a4eb2dfa-20251006"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-c7862584-20251006"" + reconcilerVersion: ""19.3.0-experimental-a4eb2dfa-20251006"" }; if (""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) { var hook$jscomp$inline_2949 = __REACT_DEVTOOLS_GLOBAL_HOOK__; exports.observeVisibleRects = function ( } }; }; -exports.version = ""19.3.0-experimental-c7862584-20251006""; +exports.version = ""19.3.0-experimental-a4eb2dfa-20251006"";"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom.development.js,1,1,2,"exports.useFormStatus = function () { return resolveDispatcher().useHostTransitionStatus(); }; - exports.version = ""19.3.0-experimental-c7862584-20251006""; + exports.version = ""19.3.0-experimental-a4eb2dfa-20251006""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom.production.js,1,1,2,"exports.useFormState = function (action initialState permalink) { exports.useFormStatus = function () { return ReactSharedInternals.H.useHostTransitionStatus(); }; -exports.version = ""19.3.0-experimental-c7862584-20251006""; +exports.version = ""19.3.0-experimental-a4eb2dfa-20251006"";"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom.react-server.development.js,1,1,2,"})) : Internals.d.m(href)); }; - exports.version = ""19.3.0-experimental-c7862584-20251006""; + exports.version = ""19.3.0-experimental-a4eb2dfa-20251006""; })();"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom.react-server.production.js,1,1,2,"exports.preloadModule = function (href options) { }); } else Internals.d.m(href); }; -exports.version = ""19.3.0-experimental-c7862584-20251006""; +exports.version = ""19.3.0-experimental-a4eb2dfa-20251006"";"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/package.json,2,2,4,"""./package.json"": ""./package.json"" } ""dependencies"": { - ""scheduler"": ""0.0.0-experimental-c7862584-20251006"" + ""scheduler"": ""0.0.0-experimental-a4eb2dfa-20251006"" } ""peerDependencies"": { - ""react"": ""0.0.0-experimental-c7862584-20251006"" + ""react"": ""0.0.0-experimental-a4eb2dfa-20251006"" } ""browser"": { ""./server.js"": ""./server.browser.js"""
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom.development.js,1,1,2,"exports.useFormStatus = function () { return resolveDispatcher().useHostTransitionStatus(); }; - exports.version = ""19.3.0-canary-c7862584-20251006""; + exports.version = ""19.3.0-canary-a4eb2dfa-20251006""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom.production.js,1,1,2,"exports.useFormState = function (action initialState permalink) { exports.useFormStatus = function () { return ReactSharedInternals.H.useHostTransitionStatus(); }; -exports.version = ""19.3.0-canary-c7862584-20251006""; +exports.version = ""19.3.0-canary-a4eb2dfa-20251006"";"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom.react-server.development.js,1,1,2,"})) : Internals.d.m(href)); }; - exports.version = ""19.3.0-canary-c7862584-20251006""; + exports.version = ""19.3.0-canary-a4eb2dfa-20251006""; })();"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom.react-server.production.js,1,1,2,"exports.preloadModule = function (href options) { }); } else Internals.d.m(href); }; -exports.version = ""19.3.0-canary-c7862584-20251006""; +exports.version = ""19.3.0-canary-a4eb2dfa-20251006"";"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/package.json,2,2,4,"""./package.json"": ""./package.json"" } ""dependencies"": { - ""scheduler"": ""0.28.0-canary-c7862584-20251006"" + ""scheduler"": ""0.28.0-canary-a4eb2dfa-20251006"" } ""peerDependencies"": { - ""react"": ""19.3.0-canary-c7862584-20251006"" + ""react"": ""19.3.0-canary-a4eb2dfa-20251006"" } ""browser"": { ""./server.js"": ""./server.browser.js"""
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-experimental/cjs/react.development.js,3,3,6,"exports.PureComponent = PureComponent; exports.StrictMode = REACT_STRICT_MODE_TYPE; exports.Suspense = REACT_SUSPENSE_TYPE; + exports.ViewTransition = REACT_VIEW_TRANSITION_TYPE; exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals; exports.__COMPILER_RUNTIME = deprecatedAPIs; } }; }; + exports.addTransitionType = addTransitionType; exports.cache = function (fn) { return function () { return fn.apply(null arguments); }; exports.startTransition = startTransition; exports.unstable_SuspenseList = REACT_SUSPENSE_LIST_TYPE; - exports.unstable_ViewTransition = REACT_VIEW_TRANSITION_TYPE; - exports.unstable_addTransitionType = addTransitionType; exports.unstable_getCacheForType = function (resourceType) { var dispatcher = ReactSharedInternals.A; return dispatcher exports.useTransition = function () { return resolveDispatcher().useTransition(); }; - exports.version = ""19.3.0-experimental-c7862584-20251006""; + exports.version = ""19.3.0-experimental-a4eb2dfa-20251006""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-experimental/cjs/react.production.js,3,3,6,"exports.Profiler = REACT_PROFILER_TYPE; exports.PureComponent = PureComponent; exports.StrictMode = REACT_STRICT_MODE_TYPE; exports.Suspense = REACT_SUSPENSE_TYPE; +exports.ViewTransition = REACT_VIEW_TRANSITION_TYPE; exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals; exports.__COMPILER_RUNTIME = { exports.__COMPILER_RUNTIME = { return ReactSharedInternals.H.useMemoCache(size); } }; +exports.addTransitionType = addTransitionType; exports.cache = function (fn) { return function () { return fn.apply(null arguments); exports.memo = function (type compare) { exports.startTransition = startTransition; exports.unstable_Activity = REACT_ACTIVITY_TYPE; exports.unstable_SuspenseList = REACT_SUSPENSE_LIST_TYPE; -exports.unstable_ViewTransition = REACT_VIEW_TRANSITION_TYPE; -exports.unstable_addTransitionType = addTransitionType; exports.unstable_getCacheForType = function (resourceType) { var dispatcher = ReactSharedInternals.A; return dispatcher ? dispatcher.getCacheForType(resourceType) : resourceType(); exports.useSyncExternalStore = function ( exports.useTransition = function () { return ReactSharedInternals.H.useTransition(); }; -exports.version = ""19.3.0-experimental-c7862584-20251006""; +exports.version = ""19.3.0-experimental-a4eb2dfa-20251006"";"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-experimental/cjs/react.react-server.development.js,2,2,4,"exports.Profiler = REACT_PROFILER_TYPE; exports.StrictMode = REACT_STRICT_MODE_TYPE; exports.Suspense = REACT_SUSPENSE_TYPE; + exports.ViewTransition = REACT_VIEW_TRANSITION_TYPE; exports.__SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals; exports.cache = function (fn) { } }; exports.unstable_SuspenseList = REACT_SUSPENSE_LIST_TYPE; - exports.unstable_ViewTransition = REACT_VIEW_TRANSITION_TYPE; exports.unstable_getCacheForType = function (resourceType) { var dispatcher = ReactSharedInternals.A; return dispatcher exports.useMemo = function (create deps) { return resolveDispatcher().useMemo(create deps); }; - exports.version = ""19.3.0-experimental-c7862584-20251006""; + exports.version = ""19.3.0-experimental-a4eb2dfa-20251006""; })();"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-experimental/cjs/react.react-server.production.js,2,2,4,"exports.Fragment = REACT_FRAGMENT_TYPE; exports.Profiler = REACT_PROFILER_TYPE; exports.StrictMode = REACT_STRICT_MODE_TYPE; exports.Suspense = REACT_SUSPENSE_TYPE; +exports.ViewTransition = REACT_VIEW_TRANSITION_TYPE; exports.__SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals; exports.cache = function (fn) { exports.startTransition = function (scope) { } }; exports.unstable_SuspenseList = REACT_SUSPENSE_LIST_TYPE; -exports.unstable_ViewTransition = REACT_VIEW_TRANSITION_TYPE; exports.unstable_getCacheForType = function (resourceType) { var dispatcher = ReactSharedInternals.A; return dispatcher ? dispatcher.getCacheForType(resourceType) : resourceType(); exports.useId = function () { exports.useMemo = function (create deps) { return ReactSharedInternals.H.useMemo(create deps); }; -exports.version = ""19.3.0-experimental-c7862584-20251006""; +exports.version = ""19.3.0-experimental-a4eb2dfa-20251006"";"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-is/cjs/react-is.development.js,1,0,1,"type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || + type === REACT_VIEW_TRANSITION_TYPE || (""object"" === typeof type && null !== type && (type.$$typeof === REACT_LAZY_TYPE ||"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-is/cjs/react-is.production.js,1,0,1,"exports.isValidElementType = function (type) { type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || + type === REACT_VIEW_TRANSITION_TYPE || (""object"" === typeof type && null !== type && (type.$$typeof === REACT_LAZY_TYPE ||"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-is/package.json,1,1,2,"{ ""name"": ""react-is"" - ""version"": ""19.3.0-canary-c7862584-20251006"" + ""version"": ""19.3.0-canary-a4eb2dfa-20251006"" ""description"": ""Brand checking of React Elements."" ""main"": ""index.js"" ""sideEffects"": false"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-turbopack-experimental/cjs/react-server-dom-turbopack-client.browser.development.js,2,2,4,"return hook.checkDCE ? !0 : !1; })({ bundleType: 1 - version: ""19.3.0-experimental-c7862584-20251006"" + version: ""19.3.0-experimental-a4eb2dfa-20251006"" rendererPackageName: ""react-server-dom-turbopack"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-c7862584-20251006"" + reconcilerVersion: ""19.3.0-experimental-a4eb2dfa-20251006"" getCurrentComponentInfo: function () { return currentOwnerInDEV; }"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-turbopack-experimental/package.json,2,2,4,"""neo-async"": ""^2.6.1"" } ""peerDependencies"": { - ""react"": ""0.0.0-experimental-c7862584-20251006"" - ""react-dom"": ""0.0.0-experimental-c7862584-20251006"" + ""react"": ""0.0.0-experimental-a4eb2dfa-20251006"" + ""react-dom"": ""0.0.0-experimental-a4eb2dfa-20251006"" } } \ No newline at end of file"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-turbopack/cjs/react-server-dom-turbopack-client.browser.development.js,7,2,9,"return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) { return ""SuspenseList""; case REACT_ACTIVITY_TYPE: return ""Activity""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch ( REACT_MEMO_TYPE = Symbol.for(""react.memo"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_ACTIVITY_TYPE = Symbol.for(""react.activity"") + REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") MAYBE_ITERATOR_SYMBOL = Symbol.iterator ASYNC_ITERATOR = Symbol.asyncIterator isArrayImpl = Array.isArray return hook.checkDCE ? !0 : !1; })({ bundleType: 1 - version: ""19.3.0-canary-c7862584-20251006"" + version: ""19.3.0-canary-a4eb2dfa-20251006"" rendererPackageName: ""react-server-dom-turbopack"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-canary-c7862584-20251006"" + reconcilerVersion: ""19.3.0-canary-a4eb2dfa-20251006"" getCurrentComponentInfo: function () { return currentOwnerInDEV; }"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-turbopack/cjs/react-server-dom-turbopack-client.edge.development.js,5,0,5,"return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) { return ""SuspenseList""; case REACT_ACTIVITY_TYPE: return ""Activity""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch ( REACT_MEMO_TYPE = Symbol.for(""react.memo"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_ACTIVITY_TYPE = Symbol.for(""react.activity"") + REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") MAYBE_ITERATOR_SYMBOL = Symbol.iterator ASYNC_ITERATOR = Symbol.asyncIterator isArrayImpl = Array.isArray"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-turbopack/cjs/react-server-dom-turbopack-client.node.development.js,5,0,5,"return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) { return ""SuspenseList""; case REACT_ACTIVITY_TYPE: return ""Activity""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch ( REACT_MEMO_TYPE = Symbol.for(""react.memo"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_ACTIVITY_TYPE = Symbol.for(""react.activity"") + REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") MAYBE_ITERATOR_SYMBOL = Symbol.iterator ASYNC_ITERATOR = Symbol.asyncIterator isArrayImpl = Array.isArray"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-turbopack/cjs/react-server-dom-turbopack-server.browser.development.js,4,1,5,"return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) { REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_MEMO_CACHE_SENTINEL = Symbol.for(""react.memo_cache_sentinel""); Symbol.for(""react.postpone""); - var MAYBE_ITERATOR_SYMBOL = Symbol.iterator + var REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") + MAYBE_ITERATOR_SYMBOL = Symbol.iterator ASYNC_ITERATOR = Symbol.asyncIterator SuspenseException = Error( ""Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors wrap your component in an error boundary or call the promise's `.catch` method and pass the result to `use`."""
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-turbopack/cjs/react-server-dom-turbopack-server.browser.production.js,4,1,5,"var REACT_LEGACY_ELEMENT_TYPE = Symbol.for(""react.element"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_MEMO_CACHE_SENTINEL = Symbol.for(""react.memo_cache_sentinel""); Symbol.for(""react.postpone""); -var MAYBE_ITERATOR_SYMBOL = Symbol.iterator; +var REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") + MAYBE_ITERATOR_SYMBOL = Symbol.iterator; function getIteratorFn(maybeIterable) { if (null === maybeIterable || ""object"" !== typeof maybeIterable) return null; maybeIterable = function describeElementType(type) { return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) {"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-turbopack/cjs/react-server-dom-turbopack-server.edge.development.js,4,1,5,"return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) { REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_MEMO_CACHE_SENTINEL = Symbol.for(""react.memo_cache_sentinel""); Symbol.for(""react.postpone""); - var MAYBE_ITERATOR_SYMBOL = Symbol.iterator + var REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") + MAYBE_ITERATOR_SYMBOL = Symbol.iterator ASYNC_ITERATOR = Symbol.asyncIterator LocalPromise = Promise scheduleMicrotask ="
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-turbopack/cjs/react-server-dom-turbopack-server.edge.production.js,4,1,5,"var ReactDOM = require(""react-dom"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_MEMO_CACHE_SENTINEL = Symbol.for(""react.memo_cache_sentinel""); Symbol.for(""react.postpone""); -var MAYBE_ITERATOR_SYMBOL = Symbol.iterator; +var REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") + MAYBE_ITERATOR_SYMBOL = Symbol.iterator; function getIteratorFn(maybeIterable) { if (null === maybeIterable || ""object"" !== typeof maybeIterable) return null; maybeIterable = function describeElementType(type) { return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) {"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-turbopack/cjs/react-server-dom-turbopack-server.node.development.js,4,1,5,"return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) { REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_MEMO_CACHE_SENTINEL = Symbol.for(""react.memo_cache_sentinel""); Symbol.for(""react.postpone""); - var MAYBE_ITERATOR_SYMBOL = Symbol.iterator + var REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") + MAYBE_ITERATOR_SYMBOL = Symbol.iterator ASYNC_ITERATOR = Symbol.asyncIterator scheduleMicrotask = queueMicrotask currentView = null"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-turbopack/cjs/react-server-dom-turbopack-server.node.production.js,4,1,5,"var async_hooks = require(""async_hooks"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_MEMO_CACHE_SENTINEL = Symbol.for(""react.memo_cache_sentinel""); Symbol.for(""react.postpone""); -var MAYBE_ITERATOR_SYMBOL = Symbol.iterator; +var REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") + MAYBE_ITERATOR_SYMBOL = Symbol.iterator; function getIteratorFn(maybeIterable) { if (null === maybeIterable || ""object"" !== typeof maybeIterable) return null; maybeIterable = function describeElementType(type) { return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) {"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-turbopack/package.json,2,2,4,"""neo-async"": ""^2.6.1"" } ""peerDependencies"": { - ""react"": ""19.3.0-canary-c7862584-20251006"" - ""react-dom"": ""19.3.0-canary-c7862584-20251006"" + ""react"": ""19.3.0-canary-a4eb2dfa-20251006"" + ""react-dom"": ""19.3.0-canary-a4eb2dfa-20251006"" } } \ No newline at end of file"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack-experimental/cjs/react-server-dom-webpack-client.browser.development.js,2,2,4,"return hook.checkDCE ? !0 : !1; })({ bundleType: 1 - version: ""19.3.0-experimental-c7862584-20251006"" + version: ""19.3.0-experimental-a4eb2dfa-20251006"" rendererPackageName: ""react-server-dom-webpack"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-c7862584-20251006"" + reconcilerVersion: ""19.3.0-experimental-a4eb2dfa-20251006"" getCurrentComponentInfo: function () { return currentOwnerInDEV; }"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack-experimental/package.json,2,2,4,"""webpack-sources"": ""^3.2.0"" } ""peerDependencies"": { - ""react"": ""0.0.0-experimental-c7862584-20251006"" - ""react-dom"": ""0.0.0-experimental-c7862584-20251006"" + ""react"": ""0.0.0-experimental-a4eb2dfa-20251006"" + ""react-dom"": ""0.0.0-experimental-a4eb2dfa-20251006"" ""webpack"": ""^5.59.0"" } } \ No newline at end of file"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js,7,2,9,"return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) { return ""SuspenseList""; case REACT_ACTIVITY_TYPE: return ""Activity""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch ( REACT_MEMO_TYPE = Symbol.for(""react.memo"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_ACTIVITY_TYPE = Symbol.for(""react.activity"") + REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") MAYBE_ITERATOR_SYMBOL = Symbol.iterator ASYNC_ITERATOR = Symbol.asyncIterator isArrayImpl = Array.isArray return hook.checkDCE ? !0 : !1; })({ bundleType: 1 - version: ""19.3.0-canary-c7862584-20251006"" + version: ""19.3.0-canary-a4eb2dfa-20251006"" rendererPackageName: ""react-server-dom-webpack"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-canary-c7862584-20251006"" + reconcilerVersion: ""19.3.0-canary-a4eb2dfa-20251006"" getCurrentComponentInfo: function () { return currentOwnerInDEV; }"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.edge.development.js,5,0,5,"return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) { return ""SuspenseList""; case REACT_ACTIVITY_TYPE: return ""Activity""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch ( REACT_MEMO_TYPE = Symbol.for(""react.memo"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_ACTIVITY_TYPE = Symbol.for(""react.activity"") + REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") MAYBE_ITERATOR_SYMBOL = Symbol.iterator ASYNC_ITERATOR = Symbol.asyncIterator isArrayImpl = Array.isArray"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.node.development.js,5,0,5,"return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) { return ""SuspenseList""; case REACT_ACTIVITY_TYPE: return ""Activity""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch ( REACT_MEMO_TYPE = Symbol.for(""react.memo"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_ACTIVITY_TYPE = Symbol.for(""react.activity"") + REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") MAYBE_ITERATOR_SYMBOL = Symbol.iterator ASYNC_ITERATOR = Symbol.asyncIterator isArrayImpl = Array.isArray"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.node.unbundled.development.js,5,0,5,"return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) { return ""SuspenseList""; case REACT_ACTIVITY_TYPE: return ""Activity""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch ( REACT_MEMO_TYPE = Symbol.for(""react.memo"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_ACTIVITY_TYPE = Symbol.for(""react.activity"") + REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") MAYBE_ITERATOR_SYMBOL = Symbol.iterator ASYNC_ITERATOR = Symbol.asyncIterator isArrayImpl = Array.isArray"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.browser.development.js,4,1,5,"return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) { REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_MEMO_CACHE_SENTINEL = Symbol.for(""react.memo_cache_sentinel""); Symbol.for(""react.postpone""); - var MAYBE_ITERATOR_SYMBOL = Symbol.iterator + var REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") + MAYBE_ITERATOR_SYMBOL = Symbol.iterator ASYNC_ITERATOR = Symbol.asyncIterator SuspenseException = Error( ""Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors wrap your component in an error boundary or call the promise's `.catch` method and pass the result to `use`."""
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.browser.production.js,4,1,5,"var REACT_LEGACY_ELEMENT_TYPE = Symbol.for(""react.element"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_MEMO_CACHE_SENTINEL = Symbol.for(""react.memo_cache_sentinel""); Symbol.for(""react.postpone""); -var MAYBE_ITERATOR_SYMBOL = Symbol.iterator; +var REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") + MAYBE_ITERATOR_SYMBOL = Symbol.iterator; function getIteratorFn(maybeIterable) { if (null === maybeIterable || ""object"" !== typeof maybeIterable) return null; maybeIterable = function describeElementType(type) { return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) {"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.edge.development.js,4,1,5,"return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) { REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_MEMO_CACHE_SENTINEL = Symbol.for(""react.memo_cache_sentinel""); Symbol.for(""react.postpone""); - var MAYBE_ITERATOR_SYMBOL = Symbol.iterator + var REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") + MAYBE_ITERATOR_SYMBOL = Symbol.iterator ASYNC_ITERATOR = Symbol.asyncIterator LocalPromise = Promise scheduleMicrotask ="
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.edge.production.js,4,1,5,"var ReactDOM = require(""react-dom"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_MEMO_CACHE_SENTINEL = Symbol.for(""react.memo_cache_sentinel""); Symbol.for(""react.postpone""); -var MAYBE_ITERATOR_SYMBOL = Symbol.iterator; +var REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") + MAYBE_ITERATOR_SYMBOL = Symbol.iterator; function getIteratorFn(maybeIterable) { if (null === maybeIterable || ""object"" !== typeof maybeIterable) return null; maybeIterable = function describeElementType(type) { return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) {"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.node.development.js,4,1,5,"return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) { REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_MEMO_CACHE_SENTINEL = Symbol.for(""react.memo_cache_sentinel""); Symbol.for(""react.postpone""); - var MAYBE_ITERATOR_SYMBOL = Symbol.iterator + var REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") + MAYBE_ITERATOR_SYMBOL = Symbol.iterator ASYNC_ITERATOR = Symbol.asyncIterator scheduleMicrotask = queueMicrotask currentView = null"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.node.production.js,4,1,5,"var async_hooks = require(""async_hooks"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_MEMO_CACHE_SENTINEL = Symbol.for(""react.memo_cache_sentinel""); Symbol.for(""react.postpone""); -var MAYBE_ITERATOR_SYMBOL = Symbol.iterator; +var REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") + MAYBE_ITERATOR_SYMBOL = Symbol.iterator; function getIteratorFn(maybeIterable) { if (null === maybeIterable || ""object"" !== typeof maybeIterable) return null; maybeIterable = function describeElementType(type) { return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) {"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.node.unbundled.development.js,4,1,5,"return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) { REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_MEMO_CACHE_SENTINEL = Symbol.for(""react.memo_cache_sentinel""); Symbol.for(""react.postpone""); - var MAYBE_ITERATOR_SYMBOL = Symbol.iterator + var REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") + MAYBE_ITERATOR_SYMBOL = Symbol.iterator ASYNC_ITERATOR = Symbol.asyncIterator scheduleMicrotask = queueMicrotask currentView = null"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.node.unbundled.production.js,4,1,5,"var async_hooks = require(""async_hooks"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_MEMO_CACHE_SENTINEL = Symbol.for(""react.memo_cache_sentinel""); Symbol.for(""react.postpone""); -var MAYBE_ITERATOR_SYMBOL = Symbol.iterator; +var REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") + MAYBE_ITERATOR_SYMBOL = Symbol.iterator; function getIteratorFn(maybeIterable) { if (null === maybeIterable || ""object"" !== typeof maybeIterable) return null; maybeIterable = function describeElementType(type) { return ""Suspense""; case REACT_SUSPENSE_LIST_TYPE: return ""SuspenseList""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch (type.$$typeof) {"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack/package.json,2,2,4,"""webpack-sources"": ""^3.2.0"" } ""peerDependencies"": { - ""react"": ""19.3.0-canary-c7862584-20251006"" - ""react-dom"": ""19.3.0-canary-c7862584-20251006"" + ""react"": ""19.3.0-canary-a4eb2dfa-20251006"" + ""react-dom"": ""19.3.0-canary-a4eb2dfa-20251006"" ""webpack"": ""^5.59.0"" } } \ No newline at end of file"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react/cjs/react-jsx-dev-runtime.development.js,3,0,3,"return ""SuspenseList""; case REACT_ACTIVITY_TYPE: return ""Activity""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch ( REACT_MEMO_TYPE = Symbol.for(""react.memo"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_ACTIVITY_TYPE = Symbol.for(""react.activity"") + REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") REACT_CLIENT_REFERENCE = Symbol.for(""react.client.reference"") ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react/cjs/react-jsx-dev-runtime.react-server.development.js,3,0,3,"return ""SuspenseList""; case REACT_ACTIVITY_TYPE: return ""Activity""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch ( REACT_MEMO_TYPE = Symbol.for(""react.memo"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_ACTIVITY_TYPE = Symbol.for(""react.activity"") + REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") REACT_CLIENT_REFERENCE = Symbol.for(""react.client.reference"") ReactSharedInternalsServer = React.__SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react/cjs/react-jsx-runtime.development.js,3,0,3,"return ""SuspenseList""; case REACT_ACTIVITY_TYPE: return ""Activity""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch ( REACT_MEMO_TYPE = Symbol.for(""react.memo"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_ACTIVITY_TYPE = Symbol.for(""react.activity"") + REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") REACT_CLIENT_REFERENCE = Symbol.for(""react.client.reference"") ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react/cjs/react-jsx-runtime.react-server.development.js,3,0,3,"return ""SuspenseList""; case REACT_ACTIVITY_TYPE: return ""Activity""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch ( REACT_MEMO_TYPE = Symbol.for(""react.memo"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_ACTIVITY_TYPE = Symbol.for(""react.activity"") + REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") REACT_CLIENT_REFERENCE = Symbol.for(""react.client.reference"") ReactSharedInternalsServer = React.__SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react/cjs/react.react-server.development.js,5,1,6,"return ""SuspenseList""; case REACT_ACTIVITY_TYPE: return ""Activity""; + case REACT_VIEW_TRANSITION_TYPE: + return ""ViewTransition""; } if (""object"" === typeof type) switch ( REACT_MEMO_TYPE = Symbol.for(""react.memo"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_ACTIVITY_TYPE = Symbol.for(""react.activity"") + REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") MAYBE_ITERATOR_SYMBOL = Symbol.iterator REACT_CLIENT_REFERENCE = Symbol.for(""react.client.reference"") hasOwnProperty = Object.prototype.hasOwnProperty exports.Profiler = REACT_PROFILER_TYPE; exports.StrictMode = REACT_STRICT_MODE_TYPE; exports.Suspense = REACT_SUSPENSE_TYPE; + exports.ViewTransition = REACT_VIEW_TRANSITION_TYPE; exports.__SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals; exports.cache = function (fn) { exports.useMemo = function (create deps) { return resolveDispatcher().useMemo(create deps); }; - exports.version = ""19.3.0-canary-c7862584-20251006""; + exports.version = ""19.3.0-canary-a4eb2dfa-20251006""; })();"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react/cjs/react.react-server.production.js,3,1,4,"var REACT_ELEMENT_TYPE = Symbol.for(""react.transitional.element"") REACT_MEMO_TYPE = Symbol.for(""react.memo"") REACT_LAZY_TYPE = Symbol.for(""react.lazy"") REACT_ACTIVITY_TYPE = Symbol.for(""react.activity"") + REACT_VIEW_TRANSITION_TYPE = Symbol.for(""react.view_transition"") MAYBE_ITERATOR_SYMBOL = Symbol.iterator; function getIteratorFn(maybeIterable) { if (null === maybeIterable || ""object"" !== typeof maybeIterable) return null; exports.Fragment = REACT_FRAGMENT_TYPE; exports.Profiler = REACT_PROFILER_TYPE; exports.StrictMode = REACT_STRICT_MODE_TYPE; exports.Suspense = REACT_SUSPENSE_TYPE; +exports.ViewTransition = REACT_VIEW_TRANSITION_TYPE; exports.__SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals; exports.cache = function (fn) { exports.useId = function () { exports.useMemo = function (create deps) { return ReactSharedInternals.H.useMemo(create deps); }; -exports.version = ""19.3.0-canary-c7862584-20251006""; +exports.version = ""19.3.0-canary-a4eb2dfa-20251006"";"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/unistore/unistore.js,1,1,2,"-(()=>{var t={232:t=>{function n(t i){for(var _ in i)t[_]=i[_];return t}t.exports=function(t){var i=[];function u(t){for(var _=[] a=0;a<i.length;a++)i[a]===t?t=null:_.push(i[a]);i=_}function e(_ a f){t=a?_:n(n({} t) _);for(var o=i c=0;c<o.length;c++)o[c](t f)}return t=t||{} {action:function(i){function r(t){e(t !1 i)}return function(){for(var _=arguments a=[t] f=0;f<arguments.length;f++)a.push(_[f]);var o=i.apply(this a);if(null!=o)return o.then?o.then(r):r(o)}} setState:e subscribe:function(t){return i.push(t) function(){u(t)}} unsubscribe:u getState:function(){return t}}}}};var i={};function __nccwpck_require__(_){var a=i[_];if(a!==undefined){return a.exports}var f=i[_]={exports:{}};var o=true;try{t[_](f f.exports __nccwpck_require__);o=false}finally{if(o)delete i[_]}return f.exports}if(typeof __nccwpck_require__!==""undefined"")__nccwpck_require__.ab=__dirname+""/"";var _=__nccwpck_require__(232);module.exports=_})(); \ No newline at end of file +(()=>{var t={827:t=>{function n(t i){for(var _ in i)t[_]=i[_];return t}t.exports=function(t){var i=[];function u(t){for(var _=[] a=0;a<i.length;a++)i[a]===t?t=null:_.push(i[a]);i=_}function e(_ a f){t=a?_:n(n({} t) _);for(var o=i c=0;c<o.length;c++)o[c](t f)}return t=t||{} {action:function(i){function r(t){e(t !1 i)}return function(){for(var _=arguments a=[t] f=0;f<arguments.length;f++)a.push(_[f]);var o=i.apply(this a);if(null!=o)return o.then?o.then(r):r(o)}} setState:e subscribe:function(t){return i.push(t) function(){u(t)}} unsubscribe:u getState:function(){return t}}}}};var i={};function __nccwpck_require__(_){var a=i[_];if(a!==undefined){return a.exports}var f=i[_]={exports:{}};var o=true;try{t[_](f f.exports __nccwpck_require__);o=false}finally{if(o)delete i[_]}return f.exports}if(typeof __nccwpck_require__!==""undefined"")__nccwpck_require__.ab=__dirname+""/"";var _=__nccwpck_require__(827);module.exports=_})(); \ No newline at end of file"
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/lib/needs-experimental-react.ts,3,2,5,import type { NextConfig } from '../server/config-shared' +// Keep in sync with Turbopack's experimental React switch: file://./../../../../crates/next-core/src/next_import_map.rs export function needsExperimentalReact(config: NextConfig) { - const { ppr taint viewTransition } = config.experimental || {} - return Boolean(ppr || taint || viewTransition) + const { ppr taint } = config.experimental || {} + return Boolean(ppr || taint) }
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/server/config-shared.ts,1,1,2,export interface ExperimentalConfig { useLightningcss?: boolean /** - * Enables view transitions by using the {@link https://github.com/facebook/react/pull/31975 unstable_ViewTransition} Component. + * Enables view transitions by using the {@link https://react.dev/reference/react/ViewTransition ViewTransition} Component. */ viewTransition?: boolean
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,test/e2e/app-dir/view-transitions/fixtures/default/app/basic/page.js,1,1,2,-import { unstable_ViewTransition as ViewTransition } from 'react' +import { ViewTransition } from 'react' import { Toggle } from './Toggle' export default function BasicPage() {
vercel/next.js,adb2829e4c68e4dc22636309d0d66632a0739fd9,nextjs-bot,2025-10-07 14:01:50,Upgrade React from `c7862584-20251006` to `a4eb2dfa-20251006` (#84589)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,test/lib/next-modes/base.ts,2,2,4,export class NextInstance { const finalDependencies = { react: reactVersion 'react-dom': reactVersion - '@types/react': '19.1.16' - '@types/react-dom': '19.1.10' + '@types/react': '19.2.2' + '@types/react-dom': '19.2.1' typescript: 'latest' '@types/node': 'latest' ...this.dependencies
vercel/next.js,21f72d3ff85d403f56899cf27e597b2f070c8b35,stefanprobst,2025-10-07 13:18:21,fix(cna): use correct postcss plugins syntax (#79949)  this updates all CNA templates to use the correct object syntax for postcss plugins.  this was done previously in https://github.com/vercel/next.js/pull/77376 but only for the `--empty` CNA templates.  Co-authored-by: Tim Neutkens <tim@timneutkens.nl>,packages/create-next-app/templates/app-tw/js/postcss.config.mjs,3,1,4,"const config = { - plugins: [""@tailwindcss/postcss""] + plugins: { + ""@tailwindcss/postcss"": {} + } }; export default config;"
vercel/next.js,21f72d3ff85d403f56899cf27e597b2f070c8b35,stefanprobst,2025-10-07 13:18:21,fix(cna): use correct postcss plugins syntax (#79949)  this updates all CNA templates to use the correct object syntax for postcss plugins.  this was done previously in https://github.com/vercel/next.js/pull/77376 but only for the `--empty` CNA templates.  Co-authored-by: Tim Neutkens <tim@timneutkens.nl>,packages/create-next-app/templates/app-tw/ts/postcss.config.mjs,3,1,4,"const config = { - plugins: [""@tailwindcss/postcss""] + plugins: { + ""@tailwindcss/postcss"": {} + } }; export default config;"
vercel/next.js,21f72d3ff85d403f56899cf27e597b2f070c8b35,stefanprobst,2025-10-07 13:18:21,fix(cna): use correct postcss plugins syntax (#79949)  this updates all CNA templates to use the correct object syntax for postcss plugins.  this was done previously in https://github.com/vercel/next.js/pull/77376 but only for the `--empty` CNA templates.  Co-authored-by: Tim Neutkens <tim@timneutkens.nl>,packages/create-next-app/templates/default-tw-empty/js/postcss.config.mjs,3,1,4,"const config = { - plugins: [""@tailwindcss/postcss""] + plugins: { + ""@tailwindcss/postcss"": {} + } }; export default config;"
vercel/next.js,21f72d3ff85d403f56899cf27e597b2f070c8b35,stefanprobst,2025-10-07 13:18:21,fix(cna): use correct postcss plugins syntax (#79949)  this updates all CNA templates to use the correct object syntax for postcss plugins.  this was done previously in https://github.com/vercel/next.js/pull/77376 but only for the `--empty` CNA templates.  Co-authored-by: Tim Neutkens <tim@timneutkens.nl>,packages/create-next-app/templates/default-tw-empty/ts/postcss.config.mjs,3,1,4,"const config = { - plugins: [""@tailwindcss/postcss""] + plugins: { + ""@tailwindcss/postcss"": {} + } }; export default config;"
vercel/next.js,21f72d3ff85d403f56899cf27e597b2f070c8b35,stefanprobst,2025-10-07 13:18:21,fix(cna): use correct postcss plugins syntax (#79949)  this updates all CNA templates to use the correct object syntax for postcss plugins.  this was done previously in https://github.com/vercel/next.js/pull/77376 but only for the `--empty` CNA templates.  Co-authored-by: Tim Neutkens <tim@timneutkens.nl>,packages/create-next-app/templates/default-tw/js/postcss.config.mjs,3,1,4,"const config = { - plugins: [""@tailwindcss/postcss""] + plugins: { + ""@tailwindcss/postcss"": {} + } }; export default config;"
vercel/next.js,21f72d3ff85d403f56899cf27e597b2f070c8b35,stefanprobst,2025-10-07 13:18:21,fix(cna): use correct postcss plugins syntax (#79949)  this updates all CNA templates to use the correct object syntax for postcss plugins.  this was done previously in https://github.com/vercel/next.js/pull/77376 but only for the `--empty` CNA templates.  Co-authored-by: Tim Neutkens <tim@timneutkens.nl>,packages/create-next-app/templates/default-tw/ts/postcss.config.mjs,3,1,4,"const config = { - plugins: [""@tailwindcss/postcss""] + plugins: { + ""@tailwindcss/postcss"": {} + } }; export default config;"
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,lerna.json,1,1,2,"""registry"": ""https://registry.npmjs.org/"" } } - ""version"": ""15.6.0-canary.47"" + ""version"": ""15.6.0-canary.48"" }"
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,packages/create-next-app/package.json,1,1,2,"{ ""name"": ""create-next-app"" - ""version"": ""15.6.0-canary.47"" + ""version"": ""15.6.0-canary.48"" ""keywords"": [ ""react"" ""next"""
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,packages/eslint-config-next/package.json,2,2,4,"{ ""name"": ""eslint-config-next"" - ""version"": ""15.6.0-canary.47"" + ""version"": ""15.6.0-canary.48"" ""description"": ""ESLint configuration used by Next.js."" ""main"": ""index.js"" ""license"": ""MIT"" } ""homepage"": ""https://nextjs.org/docs/app/api-reference/config/eslint"" ""dependencies"": { - ""@next/eslint-plugin-next"": ""15.6.0-canary.47"" + ""@next/eslint-plugin-next"": ""15.6.0-canary.48"" ""@rushstack/eslint-patch"": ""^1.10.3"" ""@typescript-eslint/eslint-plugin"": ""^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0"" ""@typescript-eslint/parser"": ""^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0"""
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,packages/eslint-plugin-internal/package.json,1,1,2,"{ ""name"": ""@next/eslint-plugin-internal"" ""private"": true - ""version"": ""15.6.0-canary.47"" + ""version"": ""15.6.0-canary.48"" ""description"": ""ESLint plugin for working on Next.js."" ""exports"": { ""."": ""./src/eslint-plugin-internal.js"""
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,packages/eslint-plugin-next/package.json,1,1,2,"{ ""name"": ""@next/eslint-plugin-next"" - ""version"": ""15.6.0-canary.47"" + ""version"": ""15.6.0-canary.48"" ""description"": ""ESLint plugin for Next.js."" ""main"": ""dist/index.js"" ""types"": ""dist/index.d.ts"""
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,packages/font/package.json,1,1,2,"{ ""name"": ""@next/font"" ""private"": true - ""version"": ""15.6.0-canary.47"" + ""version"": ""15.6.0-canary.48"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/font"""
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,packages/next-bundle-analyzer/package.json,1,1,2,"{ ""name"": ""@next/bundle-analyzer"" - ""version"": ""15.6.0-canary.47"" + ""version"": ""15.6.0-canary.48"" ""main"": ""index.js"" ""types"": ""index.d.ts"" ""license"": ""MIT"""
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,packages/next-codemod/package.json,1,1,2,"{ ""name"": ""@next/codemod"" - ""version"": ""15.6.0-canary.47"" + ""version"": ""15.6.0-canary.48"" ""license"": ""MIT"" ""repository"": { ""type"": ""git"""
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,packages/next-env/package.json,1,1,2,"{ ""name"": ""@next/env"" - ""version"": ""15.6.0-canary.47"" + ""version"": ""15.6.0-canary.48"" ""keywords"": [ ""react"" ""next"""
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,packages/next-mdx/package.json,1,1,2,"{ ""name"": ""@next/mdx"" - ""version"": ""15.6.0-canary.47"" + ""version"": ""15.6.0-canary.48"" ""main"": ""index.js"" ""license"": ""MIT"" ""repository"": {"
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,packages/next-plugin-storybook/package.json,1,1,2,"{ ""name"": ""@next/plugin-storybook"" - ""version"": ""15.6.0-canary.47"" + ""version"": ""15.6.0-canary.48"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/next-plugin-storybook"""
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,packages/next-polyfill-module/package.json,1,1,2,"{ ""name"": ""@next/polyfill-module"" - ""version"": ""15.6.0-canary.47"" + ""version"": ""15.6.0-canary.48"" ""description"": ""A standard library polyfill for ES Modules supporting browsers (Edge 16+ Firefox 60+ Chrome 61+ Safari 10.1+)"" ""main"": ""dist/polyfill-module.js"" ""license"": ""MIT"""
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,packages/next-polyfill-nomodule/package.json,1,1,2,"{ ""name"": ""@next/polyfill-nomodule"" - ""version"": ""15.6.0-canary.47"" + ""version"": ""15.6.0-canary.48"" ""description"": ""A polyfill for non-dead nomodule browsers."" ""main"": ""dist/polyfill-nomodule.js"" ""license"": ""MIT"""
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,packages/next-rspack/package.json,1,1,2,"{ ""name"": ""next-rspack"" - ""version"": ""15.6.0-canary.47"" + ""version"": ""15.6.0-canary.48"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/next-rspack"""
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,packages/next-swc/package.json,1,1,2,"{ ""name"": ""@next/swc"" - ""version"": ""15.6.0-canary.47"" + ""version"": ""15.6.0-canary.48"" ""private"": true ""files"": [ ""native/"""
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,packages/next/package.json,7,7,14,"{ ""name"": ""next"" - ""version"": ""15.6.0-canary.47"" + ""version"": ""15.6.0-canary.48"" ""description"": ""The React Framework"" ""main"": ""./dist/server/next.js"" ""license"": ""MIT"" ] } ""dependencies"": { - ""@next/env"": ""15.6.0-canary.47"" + ""@next/env"": ""15.6.0-canary.48"" ""@swc/helpers"": ""0.5.15"" ""caniuse-lite"": ""^1.0.30001579"" ""postcss"": ""8.4.31"" ""@modelcontextprotocol/sdk"": ""1.18.1"" ""@mswjs/interceptors"": ""0.23.0"" ""@napi-rs/triples"": ""1.2.0"" - ""@next/font"": ""15.6.0-canary.47"" - ""@next/polyfill-module"": ""15.6.0-canary.47"" - ""@next/polyfill-nomodule"": ""15.6.0-canary.47"" - ""@next/react-refresh-utils"": ""15.6.0-canary.47"" - ""@next/swc"": ""15.6.0-canary.47"" + ""@next/font"": ""15.6.0-canary.48"" + ""@next/polyfill-module"": ""15.6.0-canary.48"" + ""@next/polyfill-nomodule"": ""15.6.0-canary.48"" + ""@next/react-refresh-utils"": ""15.6.0-canary.48"" + ""@next/swc"": ""15.6.0-canary.48"" ""@opentelemetry/api"": ""1.6.0"" ""@playwright/test"": ""1.51.1"" ""@rspack/core"": ""1.5.0"""
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,packages/react-refresh-utils/package.json,1,1,2,"{ ""name"": ""@next/react-refresh-utils"" - ""version"": ""15.6.0-canary.47"" + ""version"": ""15.6.0-canary.48"" ""description"": ""An experimental package providing utilities for React Refresh."" ""repository"": { ""url"": ""vercel/next.js"""
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,packages/third-parties/package.json,2,2,4,"{ ""name"": ""@next/third-parties"" - ""version"": ""15.6.0-canary.47"" + ""version"": ""15.6.0-canary.48"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/third-parties"" ""third-party-capital"": ""1.0.20"" } ""devDependencies"": { - ""next"": ""15.6.0-canary.47"" + ""next"": ""15.6.0-canary.48"" ""outdent"": ""0.8.0"" ""prettier"": ""2.5.1"" ""typescript"": ""5.9.2"""
vercel/next.js,1da862828f4a9fccac2a2499d27f32cab4fd3882,nextjs-bot,2025-10-07 13:12:56,v15.6.0-canary.48,pnpm-lock.yaml,8,8,16,importers: packages/eslint-config-next: dependencies: '@next/eslint-plugin-next': - specifier: 15.6.0-canary.47 + specifier: 15.6.0-canary.48 version: link:../eslint-plugin-next '@rushstack/eslint-patch': specifier: ^1.10.3 importers: packages/next: dependencies: '@next/env': - specifier: 15.6.0-canary.47 + specifier: 15.6.0-canary.48 version: link:../next-env '@swc/helpers': specifier: 0.5.15 importers: specifier: 1.2.0 version: 1.2.0 '@next/font': - specifier: 15.6.0-canary.47 + specifier: 15.6.0-canary.48 version: link:../font '@next/polyfill-module': - specifier: 15.6.0-canary.47 + specifier: 15.6.0-canary.48 version: link:../next-polyfill-module '@next/polyfill-nomodule': - specifier: 15.6.0-canary.47 + specifier: 15.6.0-canary.48 version: link:../next-polyfill-nomodule '@next/react-refresh-utils': - specifier: 15.6.0-canary.47 + specifier: 15.6.0-canary.48 version: link:../react-refresh-utils '@next/swc': - specifier: 15.6.0-canary.47 + specifier: 15.6.0-canary.48 version: link:../next-swc '@opentelemetry/api': specifier: 1.6.0 importers: version: 1.0.20 devDependencies: next: - specifier: 15.6.0-canary.47 + specifier: 15.6.0-canary.48 version: link:../next outdent: specifier: 0.8.0
vercel/next.js,cb92e8dfbba419c03a9b539b6071c66a508cb922,Tim Neutkens,2025-10-07 13:08:10,Build: Add time to logline of every step (#84602)  ## What?  Add timing to every step of the `next build` process for both Turbopack and webpack.  Besides the existing `compiled successfully in` time for Turbopack/webpack these now also have timings:  ```  ✓ Linting and checking validity of types in 954ms      ✓ Collecting page data in 205ms      ✓ Generating static pages (4/4) in 307ms  ✓ Collecting build traces in 3.3s      ✓ Finalizing page optimization in 3.3s  ```,packages/next/src/build/duration-to-string.ts,9,0,9,export function durationToString(compilerDuration: number) { } return durationString } + +export function hrtimeToSeconds(hrtime: [number number]): number { + // hrtime is a tuple of [seconds nanoseconds] + return hrtime[0] + hrtime[1] / 1e9 +} + +export function hrtimeDurationToString(hrtime: [number number]): string { + return durationToString(hrtimeToSeconds(hrtime)) +}
vercel/next.js,cb92e8dfbba419c03a9b539b6071c66a508cb922,Tim Neutkens,2025-10-07 13:08:10,Build: Add time to logline of every step (#84602)  ## What?  Add timing to every step of the `next build` process for both Turbopack and webpack.  Besides the existing `compiled successfully in` time for Turbopack/webpack these now also have timings:  ```  ✓ Linting and checking validity of types in 954ms      ✓ Collecting page data in 205ms      ✓ Generating static pages (4/4) in 307ms  ✓ Collecting build traces in 3.3s      ✓ Finalizing page optimization in 3.3s  ```,packages/next/src/build/index.ts,27,3,30,import { turbopackBuild } from './turbopack-build' import { isPersistentCachingEnabledForBuild } from '../shared/lib/turbopack/utils' import { inlineStaticEnv } from '../lib/inline-static-env' import { populateStaticEnv } from '../lib/static-env' -import { durationToString } from './duration-to-string' +import { durationToString hrtimeDurationToString } from './duration-to-string' import { traceGlobals } from '../trace/shared' import { extractNextErrorCode } from '../lib/error-telemetry-utils' import { runAfterProductionCompile } from './after-production-compile' export default async function build( traceMemoryUsage('Finished type checking' nextBuildSpan) } + const collectingPageDataStart = process.hrtime() const postCompileSpinner = createSpinner('Collecting page data') const buildManifestPath = path.join(distDir BUILD_MANIFEST) export default async function build( return returnValue }) - if (postCompileSpinner) postCompileSpinner.stopAndPersist() + if (postCompileSpinner) { + const collectingPageDataEnd = process.hrtime(collectingPageDataStart) + postCompileSpinner.setText( + `Collecting page data in ${hrtimeDurationToString(collectingPageDataEnd)}` + ) + postCompileSpinner.stopAndPersist() + } traceMemoryUsage('Finished collecting page data' nextBuildSpan) if (customAppGetInitialProps) { export default async function build( .traceAsyncFn(() => writeManifest(routesManifestPath routesManifest)) } + const finalizingPageOptimizationStart = process.hrtime() const postBuildSpinner = createSpinner('Finalizing page optimization') let buildTracesSpinner + let buildTracesStart if (buildTracesPromise) { + buildTracesStart = process.hrtime() buildTracesSpinner = createSpinner('Collecting build traces') } export default async function build( await buildTracesPromise if (buildTracesSpinner) { + if (buildTracesStart) { + const buildTracesEnd = process.hrtime(buildTracesStart) + buildTracesSpinner.setText( + `Collecting build traces in ${hrtimeDurationToString(buildTracesEnd)}` + ) + } buildTracesSpinner.stopAndPersist() buildTracesSpinner = undefined } export default async function build( }) } - if (postBuildSpinner) postBuildSpinner.stopAndPersist() + if (postBuildSpinner) { + const finalizingPageOptimizationEnd = process.hrtime( + finalizingPageOptimizationStart + ) + postBuildSpinner.setText( + `Finalizing page optimization in ${hrtimeDurationToString(finalizingPageOptimizationEnd)}` + ) + postBuildSpinner.stopAndPersist() + } console.log() if (debugOutput) {
vercel/next.js,cb92e8dfbba419c03a9b539b6071c66a508cb922,Tim Neutkens,2025-10-07 13:08:10,Build: Add time to logline of every step (#84602)  ## What?  Add timing to every step of the `next build` process for both Turbopack and webpack.  Besides the existing `compiled successfully in` time for Turbopack/webpack these now also have timings:  ```  ✓ Linting and checking validity of types in 954ms      ✓ Collecting page data in 205ms      ✓ Generating static pages (4/4) in 307ms  ✓ Collecting build traces in 3.3s      ✓ Finalizing page optimization in 3.3s  ```,packages/next/src/build/progress.ts,5,1,6,import * as Log from '../build/output/log' +import { hrtimeDurationToString } from './duration-to-string' import createSpinner from './spinner' function divideSegments(number: number segments: number): number[] { function divideSegments(number: number segments: number): number[] { } export const createProgress = (total: number label: string) => { + const progressStart = process.hrtime() + const segments = divideSegments(total 4) if (total === 0) { export const createProgress = (total: number label: string) => { } else { progressSpinner?.stop() if (isFinished) { - Log.event(message) + const progressEnd = process.hrtime(progressStart) + Log.event(`${message} in ${hrtimeDurationToString(progressEnd)}`) } else { Log.info(`${message} ${process.stdout.isTTY ? '\n' : '\r'}`) }
vercel/next.js,cb92e8dfbba419c03a9b539b6071c66a508cb922,Tim Neutkens,2025-10-07 13:08:10,Build: Add time to logline of every step (#84602)  ## What?  Add timing to every step of the `next build` process for both Turbopack and webpack.  Besides the existing `compiled successfully in` time for Turbopack/webpack these now also have timings:  ```  ✓ Linting and checking validity of types in 954ms      ✓ Collecting page data in 205ms      ✓ Generating static pages (4/4) in 307ms  ✓ Collecting build traces in 3.3s      ✓ Finalizing page optimization in 3.3s  ```,packages/next/src/build/type-check.ts,8,1,9,"import { verifyAndLint } from '../lib/verifyAndLint' import createSpinner from './spinner' import { eventTypeCheckCompleted } from '../telemetry/events' import isError from '../lib/is-error' +import { hrtimeDurationToString } from './duration-to-string' /** * typescript will be loaded in ""next/lib/verify-typescript-setup"" and export async function startTypeChecking({ ) }) ]) - typeCheckingAndLintingSpinner?.stopAndPersist() + + if (typeCheckingAndLintingSpinner) { + typeCheckingAndLintingSpinner.setText( + `${typeCheckingAndLintingSpinnerPrefixText} in ${hrtimeDurationToString(typeCheckEnd)}` + ) + typeCheckingAndLintingSpinner.stopAndPersist() + } if (!ignoreTypeScriptErrors && verifyResult) { telemetry.record("
vercel/next.js,cb92e8dfbba419c03a9b539b6071c66a508cb922,Tim Neutkens,2025-10-07 13:08:10,Build: Add time to logline of every step (#84602)  ## What?  Add timing to every step of the `next build` process for both Turbopack and webpack.  Besides the existing `compiled successfully in` time for Turbopack/webpack these now also have timings:  ```  ✓ Linting and checking validity of types in 954ms      ✓ Collecting page data in 205ms      ✓ Generating static pages (4/4) in 307ms  ✓ Collecting build traces in 3.3s      ✓ Finalizing page optimization in 3.3s  ```,packages/next/src/build/webpack-build/impl.ts,1,6,7,import type { UnwrapPromise } from '../../lib/coalesced-function' import origDebug from 'next/dist/compiled/debug' import { Telemetry } from '../../telemetry/storage' -import { durationToString } from '../duration-to-string' +import { durationToString hrtimeToSeconds } from '../duration-to-string' const debug = origDebug('next:build:webpack-build') -function hrtimeToSeconds(hrtime: [number number]): number { - // hrtime is a tuple of [seconds nanoseconds] - return hrtime[0] + hrtime[1] / 1e9 -} - type CompilerResult = { errors: webpack.StatsError[] warnings: webpack.StatsError[]
vercel/next.js,15edf7b9865a5ca887d5b9fc4908b7bc121827e8,Janka Uryga,2025-10-07 13:05:20,fix hidden errors in router-act (#84603)  `createRouterAct` had a couple places where we create a promise via `new Promise(async (resolve) => { ... })` without accounting for the fact that some operations inside can throw  in which case the promise would never resolve. Some tests that use `createRouterAct` like to hang mysteriously  and i suspect this might be the reason. This PR changes those places to use an `(async () => { ... })()` IIFE instead.,test/e2e/app-dir/segment-cache/router-act.ts,8,8,16,export function createRouterAct( // `act` controls the timing of when responses reach the client // but it should not affect the timing of when requests reach the // server; we pass the request to the server the immediately. - result: new Promise(async (resolve) => { + result: (async () => { const originalResponse = await page.request.fetch(request { maxRedirects: 0 }) export function createRouterAct( const headers = originalResponse.headers() delete headers['transfer-encoding'] - resolve({ + return { text: await originalResponse.text() body: await originalResponse.body() headers status: originalResponse.status() - }) - }) + } + })() didProcess: false }) if (onDidIssueFirstRequest !== null) { ${fulfilled.body} batch.pendingRequests.add({ url: req.url() route: null - result: new Promise(async (resolve) => { - resolve({ + result: (async () => { + return { text: await res.text() body: await res.body() headers: res.headers() status: res.status() - }) - }) + } + })() didProcess: false }) page.off('response' handleResponse)
vercel/next.js,1712abe192c2214919403b4076c17dc9032369c6,Hendrik Liebau,2025-10-07 13:01:17,Guard `createDebugChannel` import by feature flag (#84604)  We already do that for the initial load in `app-index.tsx` (via #83699)  and should also do it for RSC requests.,packages/next/src/client/components/router-reducer/fetch-server-response.ts,4,1,5,let createDebugChannel: | typeof import('../../dev/debug-channel').createDebugChannel | undefined -if (process.env.NODE_ENV !== 'production') { +if ( + process.env.NODE_ENV !== 'production' && + process.env.__NEXT_REACT_DEBUG_CHANNEL +) { createDebugChannel = ( require('../../dev/debug-channel') as typeof import('../../dev/debug-channel') ).createDebugChannel
vercel/next.js,1712abe192c2214919403b4076c17dc9032369c6,Hendrik Liebau,2025-10-07 13:01:17,Guard `createDebugChannel` import by feature flag (#84604)  We already do that for the initial load in `app-index.tsx` (via #83699)  and should also do it for RSC requests.,packages/next/src/client/components/router-reducer/reducers/server-action-reducer.ts,4,1,5,let createDebugChannel: | typeof import('../../../dev/debug-channel').createDebugChannel | undefined -if (process.env.NODE_ENV !== 'production') { +if ( + process.env.NODE_ENV !== 'production' && + process.env.__NEXT_REACT_DEBUG_CHANNEL +) { createDebugChannel = ( require('../../../dev/debug-channel') as typeof import('../../../dev/debug-channel') ).createDebugChannel
vercel/next.js,7453d200579512a6574f9c53edd716e5cc01615c,Niklas Mischkulnig,2025-10-07 10:03:24,Turbopack: improve next/dynamic eventual consistentcy (#84560)  Use bail instead of panic to better recover from eventual consistency situations.,crates/next-api/src/dynamic_imports.rs,7,3,10,"//! to wait until all the dynamic components are being loaded this ensures hydration mismatch //! won't occur -use anyhow::Result; +use anyhow::{Context Result}; use next_core::{ next_app::ClientReferencesChunks next_client_reference::EcmascriptClientReferenceModule next_dynamic::NextDynamicEntryModule pub(crate) async fn collect_next_dynamic_chunks( NextDynamicChunkAvailability::ClientReferences(client_reference_chunks) => { client_reference_chunks .client_component_client_chunks - .get(&parent_client_reference.unwrap()) - .unwrap() + .get( + &parent_client_reference.context( + ""Parent client reference not found for next/dynamic import"" + )? + ) + .context(""Client reference chunk group not found for next/dynamic import"")? .availability_info } NextDynamicChunkAvailability::AvailabilityInfo(availability_info) => {"
vercel/next.js,c0a7c842563e3722dea30b00a1ac4fd0a18c6cbf,JJ Kasper,2025-10-07 04:44:38,Add documentation for experimental adapters handling (#83737)  This adds initial documentation for the new adapter interface initially outlined in this RFC https://github.com/vercel/next.js/discussions/77740  ---------  Co-authored-by: vercel[bot] <35613825+vercel[bot]@users.noreply.github.com> Co-authored-by: Zack Tanner <1939140+ztanner@users.noreply.github.com>,docs/02-pages/04-api-reference/04-config/01-next-config-js/adapterPath.mdx,7,0,7,+--- +title: experimental.adapterPath +description: Configure a custom adapter for Next.js to hook into the build process with modifyConfig and buildComplete callbacks. +source: app/api-reference/config/next-config-js/adapterPath +--- + +{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}
vercel/next.js,a29b4fa5c3f02c5a8f5a14050a1cdd7736a8bb30,Jude Gao,2025-10-07 03:26:04,[MCP] Fix: Do not dedup by URL for MCP get_page_metadata (#84564)  The `get_page_metadata` MCP tool was incorrectly grouping browser sessions by URL instead of counting each session individually. When multiple browser tabs were open to the same URL  the tool would report only 1 session instead of the actual number of sessions.,packages/next/src/server/mcp/tools/get-page-metadata.ts,10,7,17,export function registerGetPageMetadataTool( } } - const metadataByUrl = new Map<string PageMetadata>() + const sessionMetadata: Array<{ url: string; metadata: PageMetadata }> = + [] for (const response of responses) { if (response.data) { // TODO: Add other metadata for the current page render here. Currently we only have segment trie data. const pageMetadata = convertSegmentTrieToPageMetadata(response.data) - metadataByUrl.set(response.url pageMetadata) + sessionMetadata.push({ url: response.url metadata: pageMetadata }) } } - if (metadataByUrl.size === 0) { + if (sessionMetadata.length === 0) { return { content: [ { export function registerGetPageMetadataTool( } } - const output = formatPageMetadata(metadataByUrl) + const output = formatPageMetadata(sessionMetadata) return { content: [ function convertSegmentTrieToPageMetadata(data: SegmentTrieData): PageMetadata { } } -function formatPageMetadata(metadataByUrl: Map<string PageMetadata>): string { - let output = `# Page metadata from ${metadataByUrl.size} browser session(s)\n\n` +function formatPageMetadata( + sessionMetadata: Array<{ url: string; metadata: PageMetadata }> +): string { + let output = `# Page metadata from ${sessionMetadata.length} browser session(s)\n\n` - for (const [url metadata] of metadataByUrl) { + for (const { url metadata } of sessionMetadata) { let displayUrl = url try { const urlObj = new URL(url)
vercel/next.js,a29b4fa5c3f02c5a8f5a14050a1cdd7736a8bb30,Jude Gao,2025-10-07 03:26:04,[MCP] Fix: Do not dedup by URL for MCP get_page_metadata (#84564)  The `get_page_metadata` MCP tool was incorrectly grouping browser sessions by URL instead of counting each session individually. When multiple browser tabs were open to the same URL  the tool would report only 1 session instead of the actual number of sessions.,test/development/mcp-server/mcp-server-get-page-metadata.test.ts,27,0,27,describe('mcp-server get_page_metadata tool' () => { await session2.close() } }) + + it('should count multiple browser tabs with the same URL separately' async () => { + await new Promise((resolve) => setTimeout(resolve 500)) + + const session1 = await launchStandaloneSession(next.url '/') + const session2 = await launchStandaloneSession(next.url '/') + + try { + await new Promise((resolve) => setTimeout(resolve 1000)) + + let metadata: string = '' + await retry(async () => { + const sessionId = 'test-same-url-' + Date.now() + metadata = await callGetPageMetadata(next.url sessionId) + const rootSessions = (metadata.match(/## Session: \/(?!\w)/g) || []) + .length + expect(rootSessions).toBeGreaterThanOrEqual(2) + }) + + const rootSessions = (metadata.match(/## Session: \/(?!\w)/g) || []) + .length + expect(rootSessions).toBeGreaterThanOrEqual(2) + } finally { + await session1.close() + await session2.close() + } + }) }) describe('pages router' () => {
vercel/next.js,c0cd530ad8699b433a52c1459ef4d6c06de286ee,Josh Story,2025-10-07 02:03:12,Allow silencing unhandled rejection filter warnings and improve debugging (#84572)  The original debug logs were added to help validate the filter worked correctly in real applications. They leak implementation details which is more permissive than ideal. One reason to keep these around however is if you end up seeing the filter being removed you might want to understand what code is actually doing the removal. The debug mode now allows you to receive stacks so you can pinpoint what is manipulating the listeners.  Additionally if you are ok with whatever is leading to these warnings you might want to quiet them. This introduces a silent mode  Additionally this removes any warnings except for the one about uninstalling the filter because doing so is so likely to be a bad idea that we must highlight it if it is happening.,test/e2e/app-dir/cache-components-errors/cache-components-console-patch.test.ts,0,1,1,describe('Cache Components Errors' () => { skipDeployment: true skipStart: !isNextDev env: { - NEXT_USE_UNHANDLED_REJECTION_FILTER: 'enabled' NODE_OPTIONS: '--require ./patch-console.js' } })
vercel/next.js,c0cd530ad8699b433a52c1459ef4d6c06de286ee,Josh Story,2025-10-07 02:03:12,Allow silencing unhandled rejection filter warnings and improve debugging (#84572)  The original debug logs were added to help validate the filter worked correctly in real applications. They leak implementation details which is more permissive than ideal. One reason to keep these around however is if you end up seeing the filter being removed you might want to understand what code is actually doing the removal. The debug mode now allows you to receive stacks so you can pinpoint what is manipulating the listeners.  Additionally if you are ok with whatever is leading to these warnings you might want to quiet them. This introduces a silent mode  Additionally this removes any warnings except for the one about uninstalling the filter because doing so is so likely to be a bad idea that we must highlight it if it is happening.,test/e2e/app-dir/cache-components-errors/cache-components-errors.test.ts,0,3,3,describe('Cache Components Errors' () => { files: __dirname + '/fixtures/default' skipStart: !isNextDev skipDeployment: true - env: { - NEXT_USE_UNHANDLED_REJECTION_FILTER: 'enabled' - } }) const isRspack = !!process.env.NEXT_RSPACK
vercel/next.js,844f0a62430dd697f4757d2f5eeef75da81f6e81,Benjamin Woodruff,2025-10-07 00:18:32,Turbopack: Lower the IO concurrency limit in CI tests (#84508)  @lukesandberg pointed out that we have test flakes from too many file descriptors open.  I think we should significantly raise these limits on the ci runners (@ijjk?)  but given that we run 8 tests in parallel  it's probably good anyways for Turbopack to be less aggressive with file IO in our CI.,.github/workflows/build_reusable.yml,3,0,3,env: NEXT_CI_RUNNER: ${{ inputs.runs_on_labels }} NEXT_TEST_PROXY_ADDRESS: ${{ inputs.overrideProxyAddress || '' }} + # defaults to 256 but we run a lot of tests in parallel so the limit should be lower + NEXT_TURBOPACK_IO_CONCURRENCY: 64 + jobs: build: timeout-minutes: ${{ inputs.timeout_minutes }}
vercel/next.js,844f0a62430dd697f4757d2f5eeef75da81f6e81,Benjamin Woodruff,2025-10-07 00:18:32,Turbopack: Lower the IO concurrency limit in CI tests (#84508)  @lukesandberg pointed out that we have test flakes from too many file descriptors open.  I think we should significantly raise these limits on the ci runners (@ijjk?)  but given that we run 8 tests in parallel  it's probably good anyways for Turbopack to be less aggressive with file IO in our CI.,turbopack/crates/turbo-tasks-fs/src/lib.rs,15,1,16,"mod watcher; use std::{ borrow::Cow cmp::{Ordering min} + env fmt::{self Debug Display Formatter} fs::FileType future::Future where } fn create_semaphore() -> tokio::sync::Semaphore { - tokio::sync::Semaphore::new(256) + // the semaphore isn't serialized and we assume the environment variable doesn't change during + // runtime so it's okay to access it in this untracked way. + static NEXT_TURBOPACK_IO_CONCURRENCY: LazyLock<usize> = LazyLock::new(|| { + env::var(""NEXT_TURBOPACK_IO_CONCURRENCY"") + .ok() + .filter(|val| !val.is_empty()) + .map(|val| { + val.parse() + .expect(""NEXT_TURBOPACK_IO_CONCURRENCY must be a valid integer"") + }) + .filter(|val| *val != 0) + .unwrap_or(256) + }); + tokio::sync::Semaphore::new(*NEXT_TURBOPACK_IO_CONCURRENCY) } #[turbo_tasks::value_trait]"
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,lerna.json,1,1,2,"""registry"": ""https://registry.npmjs.org/"" } } - ""version"": ""15.6.0-canary.46"" + ""version"": ""15.6.0-canary.47"" }"
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,packages/create-next-app/package.json,1,1,2,"{ ""name"": ""create-next-app"" - ""version"": ""15.6.0-canary.46"" + ""version"": ""15.6.0-canary.47"" ""keywords"": [ ""react"" ""next"""
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,packages/eslint-config-next/package.json,2,2,4,"{ ""name"": ""eslint-config-next"" - ""version"": ""15.6.0-canary.46"" + ""version"": ""15.6.0-canary.47"" ""description"": ""ESLint configuration used by Next.js."" ""main"": ""index.js"" ""license"": ""MIT"" } ""homepage"": ""https://nextjs.org/docs/app/api-reference/config/eslint"" ""dependencies"": { - ""@next/eslint-plugin-next"": ""15.6.0-canary.46"" + ""@next/eslint-plugin-next"": ""15.6.0-canary.47"" ""@rushstack/eslint-patch"": ""^1.10.3"" ""@typescript-eslint/eslint-plugin"": ""^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0"" ""@typescript-eslint/parser"": ""^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0"""
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,packages/eslint-plugin-internal/package.json,1,1,2,"{ ""name"": ""@next/eslint-plugin-internal"" ""private"": true - ""version"": ""15.6.0-canary.46"" + ""version"": ""15.6.0-canary.47"" ""description"": ""ESLint plugin for working on Next.js."" ""exports"": { ""."": ""./src/eslint-plugin-internal.js"""
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,packages/eslint-plugin-next/package.json,1,1,2,"{ ""name"": ""@next/eslint-plugin-next"" - ""version"": ""15.6.0-canary.46"" + ""version"": ""15.6.0-canary.47"" ""description"": ""ESLint plugin for Next.js."" ""main"": ""dist/index.js"" ""types"": ""dist/index.d.ts"""
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,packages/font/package.json,1,1,2,"{ ""name"": ""@next/font"" ""private"": true - ""version"": ""15.6.0-canary.46"" + ""version"": ""15.6.0-canary.47"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/font"""
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,packages/next-bundle-analyzer/package.json,1,1,2,"{ ""name"": ""@next/bundle-analyzer"" - ""version"": ""15.6.0-canary.46"" + ""version"": ""15.6.0-canary.47"" ""main"": ""index.js"" ""types"": ""index.d.ts"" ""license"": ""MIT"""
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,packages/next-codemod/package.json,1,1,2,"{ ""name"": ""@next/codemod"" - ""version"": ""15.6.0-canary.46"" + ""version"": ""15.6.0-canary.47"" ""license"": ""MIT"" ""repository"": { ""type"": ""git"""
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,packages/next-env/package.json,1,1,2,"{ ""name"": ""@next/env"" - ""version"": ""15.6.0-canary.46"" + ""version"": ""15.6.0-canary.47"" ""keywords"": [ ""react"" ""next"""
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,packages/next-mdx/package.json,1,1,2,"{ ""name"": ""@next/mdx"" - ""version"": ""15.6.0-canary.46"" + ""version"": ""15.6.0-canary.47"" ""main"": ""index.js"" ""license"": ""MIT"" ""repository"": {"
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,packages/next-plugin-storybook/package.json,1,1,2,"{ ""name"": ""@next/plugin-storybook"" - ""version"": ""15.6.0-canary.46"" + ""version"": ""15.6.0-canary.47"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/next-plugin-storybook"""
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,packages/next-polyfill-module/package.json,1,1,2,"{ ""name"": ""@next/polyfill-module"" - ""version"": ""15.6.0-canary.46"" + ""version"": ""15.6.0-canary.47"" ""description"": ""A standard library polyfill for ES Modules supporting browsers (Edge 16+ Firefox 60+ Chrome 61+ Safari 10.1+)"" ""main"": ""dist/polyfill-module.js"" ""license"": ""MIT"""
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,packages/next-polyfill-nomodule/package.json,1,1,2,"{ ""name"": ""@next/polyfill-nomodule"" - ""version"": ""15.6.0-canary.46"" + ""version"": ""15.6.0-canary.47"" ""description"": ""A polyfill for non-dead nomodule browsers."" ""main"": ""dist/polyfill-nomodule.js"" ""license"": ""MIT"""
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,packages/next-rspack/package.json,1,1,2,"{ ""name"": ""next-rspack"" - ""version"": ""15.6.0-canary.46"" + ""version"": ""15.6.0-canary.47"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/next-rspack"""
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,packages/next-swc/package.json,1,1,2,"{ ""name"": ""@next/swc"" - ""version"": ""15.6.0-canary.46"" + ""version"": ""15.6.0-canary.47"" ""private"": true ""files"": [ ""native/"""
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,packages/next/package.json,7,7,14,"{ ""name"": ""next"" - ""version"": ""15.6.0-canary.46"" + ""version"": ""15.6.0-canary.47"" ""description"": ""The React Framework"" ""main"": ""./dist/server/next.js"" ""license"": ""MIT"" ] } ""dependencies"": { - ""@next/env"": ""15.6.0-canary.46"" + ""@next/env"": ""15.6.0-canary.47"" ""@swc/helpers"": ""0.5.15"" ""caniuse-lite"": ""^1.0.30001579"" ""postcss"": ""8.4.31"" ""@modelcontextprotocol/sdk"": ""1.18.1"" ""@mswjs/interceptors"": ""0.23.0"" ""@napi-rs/triples"": ""1.2.0"" - ""@next/font"": ""15.6.0-canary.46"" - ""@next/polyfill-module"": ""15.6.0-canary.46"" - ""@next/polyfill-nomodule"": ""15.6.0-canary.46"" - ""@next/react-refresh-utils"": ""15.6.0-canary.46"" - ""@next/swc"": ""15.6.0-canary.46"" + ""@next/font"": ""15.6.0-canary.47"" + ""@next/polyfill-module"": ""15.6.0-canary.47"" + ""@next/polyfill-nomodule"": ""15.6.0-canary.47"" + ""@next/react-refresh-utils"": ""15.6.0-canary.47"" + ""@next/swc"": ""15.6.0-canary.47"" ""@opentelemetry/api"": ""1.6.0"" ""@playwright/test"": ""1.51.1"" ""@rspack/core"": ""1.5.0"""
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,packages/react-refresh-utils/package.json,1,1,2,"{ ""name"": ""@next/react-refresh-utils"" - ""version"": ""15.6.0-canary.46"" + ""version"": ""15.6.0-canary.47"" ""description"": ""An experimental package providing utilities for React Refresh."" ""repository"": { ""url"": ""vercel/next.js"""
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,packages/third-parties/package.json,2,2,4,"{ ""name"": ""@next/third-parties"" - ""version"": ""15.6.0-canary.46"" + ""version"": ""15.6.0-canary.47"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/third-parties"" ""third-party-capital"": ""1.0.20"" } ""devDependencies"": { - ""next"": ""15.6.0-canary.46"" + ""next"": ""15.6.0-canary.47"" ""outdent"": ""0.8.0"" ""prettier"": ""2.5.1"" ""typescript"": ""5.9.2"""
vercel/next.js,a6c48f029d7292af04dcb525a85269f92a7f1e96,nextjs-bot,2025-10-06 23:24:20,v15.6.0-canary.47,pnpm-lock.yaml,8,8,16,importers: packages/eslint-config-next: dependencies: '@next/eslint-plugin-next': - specifier: 15.6.0-canary.46 + specifier: 15.6.0-canary.47 version: link:../eslint-plugin-next '@rushstack/eslint-patch': specifier: ^1.10.3 importers: packages/next: dependencies: '@next/env': - specifier: 15.6.0-canary.46 + specifier: 15.6.0-canary.47 version: link:../next-env '@swc/helpers': specifier: 0.5.15 importers: specifier: 1.2.0 version: 1.2.0 '@next/font': - specifier: 15.6.0-canary.46 + specifier: 15.6.0-canary.47 version: link:../font '@next/polyfill-module': - specifier: 15.6.0-canary.46 + specifier: 15.6.0-canary.47 version: link:../next-polyfill-module '@next/polyfill-nomodule': - specifier: 15.6.0-canary.46 + specifier: 15.6.0-canary.47 version: link:../next-polyfill-nomodule '@next/react-refresh-utils': - specifier: 15.6.0-canary.46 + specifier: 15.6.0-canary.47 version: link:../react-refresh-utils '@next/swc': - specifier: 15.6.0-canary.46 + specifier: 15.6.0-canary.47 version: link:../next-swc '@opentelemetry/api': specifier: 1.6.0 importers: version: 1.0.20 devDependencies: next: - specifier: 15.6.0-canary.46 + specifier: 15.6.0-canary.47 version: link:../next outdent: specifier: 0.8.0
vercel/next.js,d796c0f20966482d3187923a145dafe9ff30cc08,Hendrik Liebau,2025-10-06 22:44:45,"[test] Unflake static image test (#84535)  [flakiness metric](https://app.datadoghq.com/ci/test/runs?query=test_level%3Atest%20%40git.repository.id%3A%22github.com%2Fvercel%2Fnext.js%22%20%40test.name%3A%22Static%20Image%20Component%20Tests%20development%20mode%20Should%20allow%20an%20image%20with%20a%20static%20src%20to%20omit%20height%20and%20width%22%20%40test.type%3A%22turbopack%22%20%40test.status%3A%22fail%22&agg_m=count&agg_m_source=base&agg_t=count&currentTab=overview&eventStack=&fromUser=false&index=citest&start=1759057503838&end=1759662303838&paused=false)  I suspect that the test `Should allow an image with a static src to omit height and width` is frequently failing with `waiting for locator('#basic-static') to be visible` because the image is covered by one of the images with a `fill` prop  which are rendered later in the page. This means that the image is not actually visible  even though it is in the DOM. Playwright then fails to find it. However  I wasn't able to reproduce this locally.  The fix is to wrap the `fill` images in a relatively positioned div with a set height  so that they don't cover the other images.  **Before:**  <img width=""490"" height=""894"" alt=""before"" src=""https://github.com/user-attachments/assets/7632dc67-a649-42b7-8b62-a9a216632ec2"" />  **After:**  <img width=""490"" height=""894"" alt=""after"" src=""https://github.com/user-attachments/assets/2d369e4d-ef08-47cc-bdc4-04ab94afcceb"" />  ---------  Co-authored-by: graphite-app[bot] <96075541+graphite-app[bot]@users.noreply.github.com>",test/integration/next-image-new/default/pages/static-img.js,43,15,58,"export const getStaticProps = () => ({ props: { testImgProp } }) +function FillContainer({ children }) { + // Optimized to accept the square test images. Subtracting 16px to account for + // the default 8px body margin. + return ( + <div style={{ position: 'relative' height: 'calc(100vw - 16px)' }}> + {children} + </div> + ) +} + const Page = ({ testImgProp }) => { return ( <div> const Page = ({ testImgProp }) => { <Image id=""static-bmp"" src={testBMP} /> <Image id=""static-ico"" src={testICO} /> <br /> - <Image id=""static-svg-fill"" src={testSVG} fill /> - <Image id=""static-gif-fill"" src={testGIF} fill /> - <Image id=""static-bmp-fill"" src={testBMP} fill /> - <Image id=""static-ico-fill"" src={testICO} fill /> + <FillContainer> + <Image id=""static-svg-fill"" src={testSVG} fill /> + </FillContainer> + <FillContainer> + <Image id=""static-gif-fill"" src={testGIF} fill /> + </FillContainer> + <FillContainer> + <Image id=""static-bmp-fill"" src={testBMP} fill /> + </FillContainer> + <FillContainer> + <Image id=""static-ico-fill"" src={testICO} fill /> + </FillContainer> <br /> - <Image id=""blur-png-fill"" src={testPNG} placeholder=""blur"" fill /> - <Image id=""blur-jpg-fill"" src={testJPG} placeholder=""blur"" fill /> - <Image id=""blur-webp-fill"" src={testWEBP} placeholder=""blur"" fill /> - <Image id=""blur-avif-fill"" src={testAVIF} placeholder=""blur"" fill /> + <FillContainer> + <Image id=""blur-png-fill"" src={testPNG} placeholder=""blur"" fill /> + </FillContainer> + <FillContainer> + <Image id=""blur-jpg-fill"" src={testJPG} placeholder=""blur"" fill /> + </FillContainer> + <FillContainer> + <Image id=""blur-webp-fill"" src={testWEBP} placeholder=""blur"" fill /> + </FillContainer> + <FillContainer> + <Image id=""blur-avif-fill"" src={testAVIF} placeholder=""blur"" fill /> + </FillContainer> <br /> - <Image - id=""blurdataurl-fill"" - src=""/test.jpg"" - placeholder=""blur"" - blurDataURL={blurDataURL} - fill - /> + <FillContainer> + <Image + id=""blurdataurl-fill"" + src=""/test.jpg"" + placeholder=""blur"" + blurDataURL={blurDataURL} + fill + /> + </FillContainer> <Image id=""blurdataurl-ratio"" src=""/test.png"""
vercel/next.js,c388db43dc580c22d8a42b6092b48717e1ad1d81,Jiwon Choi,2025-10-06 22:44:08,CI: Enable `experimental.isolatedDevBuild` for `test-dev` (#84562)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-dev instead of test-experimental-dev because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  The flag was enabled for `test-experimental-dev` at https://github.com/vercel/next.js/pull/84099  and this PR moves the flag to the `test-dev` job.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev (here) 3. test-prod 4. test-integration 5. test-unit 6. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,.github/workflows/build_and_test.yml,1,1,2,"jobs: export IS_WEBPACK_TEST=1 export NEXT_TEST_MODE=dev export NEXT_TEST_REACT_VERSION=""${{ matrix.react }}"" + export __NEXT_EXPERIMENTAL_ISOLATED_DEV_BUILD=true node run-tests.js \ --timings \ jobs: export __NEXT_EXPERIMENTAL_DEBUG_CHANNEL=true export NEXT_EXTERNAL_TESTS_FILTERS=""test/experimental-tests-manifest.json"" export NEXT_TEST_MODE=dev - export __NEXT_EXPERIMENTAL_ISOLATED_DEV_BUILD=true export IS_WEBPACK_TEST=1 node run-tests.js \"
vercel/next.js,c388db43dc580c22d8a42b6092b48717e1ad1d81,Jiwon Choi,2025-10-06 22:44:08,CI: Enable `experimental.isolatedDevBuild` for `test-dev` (#84562)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-dev instead of test-experimental-dev because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  The flag was enabled for `test-experimental-dev` at https://github.com/vercel/next.js/pull/84099  and this PR moves the flag to the `test-dev` job.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev (here) 3. test-prod 4. test-integration 5. test-unit 6. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/development/basic/hmr/run-error-recovery-hmr-test.util.ts,2,1,3,import { retry waitFor trimEndMultiline + getDistDir } from 'next-test-utils' import { nextTestSetup } from 'e2e-utils' import { outdent } from 'outdent' export function runErrorRecoveryHmrTest(nextConfig: { if (!process.env.IS_TURBOPACK_TEST) { it('should have client HMR events in trace file' async () => { - const traceData = await next.readFile('.next/trace') + const traceData = await next.readFile(`${getDistDir()}/trace`) expect(traceData).toContain('client-hmr-latency') expect(traceData).toContain('client-error') expect(traceData).toContain('client-success')
vercel/next.js,c388db43dc580c22d8a42b6092b48717e1ad1d81,Jiwon Choi,2025-10-06 22:44:08,CI: Enable `experimental.isolatedDevBuild` for `test-dev` (#84562)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-dev instead of test-experimental-dev because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  The flag was enabled for `test-experimental-dev` at https://github.com/vercel/next.js/pull/84099  and this PR moves the flag to the `test-dev` job.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev (here) 3. test-prod 4. test-integration 5. test-unit 6. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/development/mcp-server/mcp-server-get-server-action-by-id.test.ts,3,2,5,import { FileRef nextTestSetup } from 'e2e-utils' import path from 'path' import fs from 'fs/promises' +import { getDistDir } from 'next-test-utils' describe('mcp-server get_server_action_by_id tool' () => { const { next } = nextTestSetup({ describe('mcp-server get_server_action_by_id tool' () => { // Read the manifest to get a valid action ID const manifestPath = path.join( next.testDir - '.next' + getDistDir() 'server' 'server-reference-manifest.json' ) describe('mcp-server get_server_action_by_id tool' () => { // Read the manifest to get inline action ID const manifestPath = path.join( next.testDir - '.next' + getDistDir() 'server' 'server-reference-manifest.json' )
vercel/next.js,c388db43dc580c22d8a42b6092b48717e1ad1d81,Jiwon Choi,2025-10-06 22:44:08,CI: Enable `experimental.isolatedDevBuild` for `test-dev` (#84562)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-dev instead of test-experimental-dev because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  The flag was enabled for `test-experimental-dev` at https://github.com/vercel/next.js/pull/84099  and this PR moves the flag to the `test-dev` job.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev (here) 3. test-prod 4. test-integration 5. test-unit 6. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/development/middleware-errors/index.test.ts,2,2,4,-import { assertNoRedbox check retry } from 'next-test-utils' +import { assertNoRedbox check getDistDir retry } from 'next-test-utils' import stripAnsi from 'strip-ansi' import { nextTestSetup } from 'e2e-utils' describe('middleware - development errors' () => { '\n at <unknown> (middleware.js:3)' + // TODO: Should be ignore-listed '\n at eval (middleware.js:3:13)' + - '\n at (middleware)/./middleware.js (.next/server/middleware.js:18:1)' + + `\n at (middleware)/./middleware.js (${getDistDir()}/server/middleware.js:18:1)` + '\n at __webpack_require__ ' ) })
vercel/next.js,c388db43dc580c22d8a42b6092b48717e1ad1d81,Jiwon Choi,2025-10-06 22:44:08,CI: Enable `experimental.isolatedDevBuild` for `test-dev` (#84562)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-dev instead of test-experimental-dev because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  The flag was enabled for `test-experimental-dev` at https://github.com/vercel/next.js/pull/84099  and this PR moves the flag to the `test-dev` job.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev (here) 3. test-prod 4. test-integration 5. test-unit 6. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/development/pages-dir/client-navigation/rendering.test.ts,6,4,10,import cheerio from 'cheerio' import { nextTestSetup } from 'e2e-utils' -import { fetchViaHTTP renderViaHTTP } from 'next-test-utils' +import { fetchViaHTTP getDistDir renderViaHTTP } from 'next-test-utils' import webdriver from 'next-webdriver' import { BUILD_MANIFEST REACT_LOADABLE_MANIFEST } from 'next/constants' import path from 'path' describe('Client Navigation rendering' () => { // build dynamic page await fetch('/dynamic/ssr') - const buildManifest = await next.readJSON(`.next/${BUILD_MANIFEST}`) + const buildManifest = await next.readJSON( + `${getDistDir()}/${BUILD_MANIFEST}` + ) const reactLoadableManifest = await next.readJSON( process.env.IS_TURBOPACK_TEST - ? `.next/server/pages/dynamic/ssr/${REACT_LOADABLE_MANIFEST}` - : `.next/${REACT_LOADABLE_MANIFEST}` + ? `${getDistDir()}/server/pages/dynamic/ssr/${REACT_LOADABLE_MANIFEST}` + : `${getDistDir()}/${REACT_LOADABLE_MANIFEST}` ) const resources = []
vercel/next.js,c388db43dc580c22d8a42b6092b48717e1ad1d81,Jiwon Choi,2025-10-06 22:44:08,CI: Enable `experimental.isolatedDevBuild` for `test-dev` (#84562)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-dev instead of test-experimental-dev because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  The flag was enabled for `test-experimental-dev` at https://github.com/vercel/next.js/pull/84099  and this PR moves the flag to the `test-dev` job.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev (here) 3. test-prod 4. test-integration 5. test-unit 6. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/e2e/app-dir/actions/app-action.test.ts,6,5,11,"import { check waitFor getRedboxSource + getDistDir } from 'next-test-utils' import type { Request Response } from 'playwright' import fs from 'node:fs/promises' describe('app-dir action handling' () => { if (isNextStart) { it('should output exportName and filename info in manifest' async () => { const referenceManifest = await next.readJSON( - '.next/server/server-reference-manifest.json' + `${getDistDir()}/server/server-reference-manifest.json` ) let foundExportNames = [] describe('app-dir action handling' () => { it('should not expose action content in sourcemaps' async () => { // We check all sourcemaps in the `static` folder for sensitive information given that chunking const sourcemaps = await fs - .readdir(join(next.testDir '.next' 'static') { + .readdir(join(next.testDir getDistDir() 'static') { recursive: true encoding: 'utf8' }) describe('app-dir action handling' () => { files .filter((f) => f.endsWith('.js.map')) .map((f) => - fs.readFile(join(next.testDir '.next' 'static' f) { + fs.readFile(join(next.testDir getDistDir() 'static' f) { encoding: 'utf8' }) ) describe('app-dir action handling' () => { it('should bundle external libraries if they are on the action layer' async () => { await next.fetch('/client') const pageBundle = await fs.readFile( - join(next.testDir '.next' 'server' 'app' 'client' 'page.js') + join(next.testDir getDistDir() 'server' 'app' 'client' 'page.js') { encoding: 'utf8' } ) if (isTurbopack) { const chunkPaths = pageBundle.matchAll(/R\.c\(""([^""]*)""\)/g) const reads = [...chunkPaths].map(async (match) => { const bundle = await fs.readFile( - join(next.testDir '.next' ...match[1].split(/[\\/]/g)) + join(next.testDir getDistDir() ...match[1].split(/[\\/]/g)) { encoding: 'utf8' } ) return bundle.includes('node_modules/nanoid/index.js')"
vercel/next.js,c388db43dc580c22d8a42b6092b48717e1ad1d81,Jiwon Choi,2025-10-06 22:44:08,CI: Enable `experimental.isolatedDevBuild` for `test-dev` (#84562)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-dev instead of test-experimental-dev because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  The flag was enabled for `test-experimental-dev` at https://github.com/vercel/next.js/pull/84099  and this PR moves the flag to the `test-dev` job.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev (here) 3. test-prod 4. test-integration 5. test-unit 6. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/e2e/app-dir/app-external/app-external.test.ts,2,2,4,import { nextTestSetup } from 'e2e-utils' -import { assertNoRedbox check retry } from 'next-test-utils' +import { assertNoRedbox check getDistDir retry } from 'next-test-utils' async function resolveStreamResponse(response: any onData?: any) { let result = '' describe('app dir - external dependency' () => { expect(html).toContain('resolve response') const outputFile = await next.readFile( - '.next/server/app/cjs/server/page.js' + `${getDistDir()}/server/app/cjs/server/page.js` ) expect(outputFile).not.toContain('image-response') })
vercel/next.js,c388db43dc580c22d8a42b6092b48717e1ad1d81,Jiwon Choi,2025-10-06 22:44:08,CI: Enable `experimental.isolatedDevBuild` for `test-dev` (#84562)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-dev instead of test-experimental-dev because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  The flag was enabled for `test-experimental-dev` at https://github.com/vercel/next.js/pull/84099  and this PR moves the flag to the `test-dev` job.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev (here) 3. test-prod 4. test-integration 5. test-unit 6. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/e2e/app-dir/metadata-dynamic-routes/index.test.ts,3,3,6,import { nextTestSetup } from 'e2e-utils' import imageSize from 'image-size' -import { check } from 'next-test-utils' +import { check getDistDir } from 'next-test-utils' const CACHE_HEADERS = { NONE: 'no-cache no-store' describe('app dir - metadata dynamic routes' () => { if (isNextDev) { await check(async () => { - next.hasFile('.next/server/app-paths-manifest.json') + next.hasFile(`${getDistDir()}/server/app-paths-manifest.json`) return 'success' } /success/) const appPathsManifest = JSON.parse( - await next.readFile('.next/server/app-paths-manifest.json') + await next.readFile(`${getDistDir()}/server/app-paths-manifest.json`) ) const entryKeys = Object.keys(appPathsManifest) // Only has one route for twitter-image with catch-all routes in dev
vercel/next.js,c388db43dc580c22d8a42b6092b48717e1ad1d81,Jiwon Choi,2025-10-06 22:44:08,CI: Enable `experimental.isolatedDevBuild` for `test-dev` (#84562)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-dev instead of test-experimental-dev because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  The flag was enabled for `test-experimental-dev` at https://github.com/vercel/next.js/pull/84099  and this PR moves the flag to the `test-dev` job.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev (here) 3. test-prod 4. test-integration 5. test-unit 6. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/e2e/app-dir/rsc-basic/rsc-basic.test.ts,6,4,10,import path from 'path' -import { check } from 'next-test-utils' +import { check getDistDir } from 'next-test-utils' import { nextTestSetup } from 'e2e-utils' import cheerio from 'cheerio' import { describe('app dir - rsc basics' () => { const clientReferenceManifest = JSON.parse( ( await next.readFile( - '.next/server/app/page_client-reference-manifest.js' + `${getDistDir()}/server/app/page_client-reference-manifest.js` ) ).match(/]=(.+)$/)[1] ) describe('app dir - rsc basics' () => { if (isNextStart) { it('should generate edge SSR manifests for Node.js' async () => { const requiredServerFiles = JSON.parse( - await next.readFile('.next/required-server-files.json') + await next.readFile(`${getDistDir()}/required-server-files.json`) ).files const files = ['middleware-build-manifest.js' 'middleware-manifest.json'] let promises = files.map(async (file) => { - expect(await next.hasFile(path.join('.next/server' file))).toBe(true) + expect( + await next.hasFile(path.join(`${getDistDir()}/server` file)) + ).toBe(true) }) await Promise.all(promises)
vercel/next.js,c388db43dc580c22d8a42b6092b48717e1ad1d81,Jiwon Choi,2025-10-06 22:44:08,CI: Enable `experimental.isolatedDevBuild` for `test-dev` (#84562)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-dev instead of test-experimental-dev because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  The flag was enabled for `test-experimental-dev` at https://github.com/vercel/next.js/pull/84099  and this PR moves the flag to the `test-dev` job.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev (here) 3. test-prod 4. test-integration 5. test-unit 6. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/e2e/app-dir/typed-routes-validator/typed-routes-validator.test.ts,2,1,3,import { nextTestSetup } from 'e2e-utils' +import { getDistDir } from 'next-test-utils' describe('typed-routes-validator' () => { const { next isNextStart skipped } = nextTestSetup({ describe('typed-routes-validator' () => { } it('should generate route validation correctly' async () => { - const dts = await next.readFile('.next/types/validator.ts') + const dts = await next.readFile(`${getDistDir()}/types/validator.ts`) // sanity check that dev generation is working expect(dts).toContain('const handler = {} as typeof import(') })
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,lerna.json,1,1,2,"""registry"": ""https://registry.npmjs.org/"" } } - ""version"": ""15.6.0-canary.45"" + ""version"": ""15.6.0-canary.46"" }"
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,packages/create-next-app/package.json,1,1,2,"{ ""name"": ""create-next-app"" - ""version"": ""15.6.0-canary.45"" + ""version"": ""15.6.0-canary.46"" ""keywords"": [ ""react"" ""next"""
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,packages/eslint-config-next/package.json,2,2,4,"{ ""name"": ""eslint-config-next"" - ""version"": ""15.6.0-canary.45"" + ""version"": ""15.6.0-canary.46"" ""description"": ""ESLint configuration used by Next.js."" ""main"": ""index.js"" ""license"": ""MIT"" } ""homepage"": ""https://nextjs.org/docs/app/api-reference/config/eslint"" ""dependencies"": { - ""@next/eslint-plugin-next"": ""15.6.0-canary.45"" + ""@next/eslint-plugin-next"": ""15.6.0-canary.46"" ""@rushstack/eslint-patch"": ""^1.10.3"" ""@typescript-eslint/eslint-plugin"": ""^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0"" ""@typescript-eslint/parser"": ""^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0"""
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,packages/eslint-plugin-internal/package.json,1,1,2,"{ ""name"": ""@next/eslint-plugin-internal"" ""private"": true - ""version"": ""15.6.0-canary.45"" + ""version"": ""15.6.0-canary.46"" ""description"": ""ESLint plugin for working on Next.js."" ""exports"": { ""."": ""./src/eslint-plugin-internal.js"""
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,packages/eslint-plugin-next/package.json,1,1,2,"{ ""name"": ""@next/eslint-plugin-next"" - ""version"": ""15.6.0-canary.45"" + ""version"": ""15.6.0-canary.46"" ""description"": ""ESLint plugin for Next.js."" ""main"": ""dist/index.js"" ""types"": ""dist/index.d.ts"""
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,packages/font/package.json,1,1,2,"{ ""name"": ""@next/font"" ""private"": true - ""version"": ""15.6.0-canary.45"" + ""version"": ""15.6.0-canary.46"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/font"""
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,packages/next-bundle-analyzer/package.json,1,1,2,"{ ""name"": ""@next/bundle-analyzer"" - ""version"": ""15.6.0-canary.45"" + ""version"": ""15.6.0-canary.46"" ""main"": ""index.js"" ""types"": ""index.d.ts"" ""license"": ""MIT"""
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,packages/next-codemod/package.json,1,1,2,"{ ""name"": ""@next/codemod"" - ""version"": ""15.6.0-canary.45"" + ""version"": ""15.6.0-canary.46"" ""license"": ""MIT"" ""repository"": { ""type"": ""git"""
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,packages/next-env/package.json,1,1,2,"{ ""name"": ""@next/env"" - ""version"": ""15.6.0-canary.45"" + ""version"": ""15.6.0-canary.46"" ""keywords"": [ ""react"" ""next"""
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,packages/next-mdx/package.json,1,1,2,"{ ""name"": ""@next/mdx"" - ""version"": ""15.6.0-canary.45"" + ""version"": ""15.6.0-canary.46"" ""main"": ""index.js"" ""license"": ""MIT"" ""repository"": {"
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,packages/next-plugin-storybook/package.json,1,1,2,"{ ""name"": ""@next/plugin-storybook"" - ""version"": ""15.6.0-canary.45"" + ""version"": ""15.6.0-canary.46"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/next-plugin-storybook"""
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,packages/next-polyfill-module/package.json,1,1,2,"{ ""name"": ""@next/polyfill-module"" - ""version"": ""15.6.0-canary.45"" + ""version"": ""15.6.0-canary.46"" ""description"": ""A standard library polyfill for ES Modules supporting browsers (Edge 16+ Firefox 60+ Chrome 61+ Safari 10.1+)"" ""main"": ""dist/polyfill-module.js"" ""license"": ""MIT"""
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,packages/next-polyfill-nomodule/package.json,1,1,2,"{ ""name"": ""@next/polyfill-nomodule"" - ""version"": ""15.6.0-canary.45"" + ""version"": ""15.6.0-canary.46"" ""description"": ""A polyfill for non-dead nomodule browsers."" ""main"": ""dist/polyfill-nomodule.js"" ""license"": ""MIT"""
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,packages/next-rspack/package.json,1,1,2,"{ ""name"": ""next-rspack"" - ""version"": ""15.6.0-canary.45"" + ""version"": ""15.6.0-canary.46"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/next-rspack"""
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,packages/next-swc/package.json,1,1,2,"{ ""name"": ""@next/swc"" - ""version"": ""15.6.0-canary.45"" + ""version"": ""15.6.0-canary.46"" ""private"": true ""files"": [ ""native/"""
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,packages/next/package.json,7,7,14,"{ ""name"": ""next"" - ""version"": ""15.6.0-canary.45"" + ""version"": ""15.6.0-canary.46"" ""description"": ""The React Framework"" ""main"": ""./dist/server/next.js"" ""license"": ""MIT"" ] } ""dependencies"": { - ""@next/env"": ""15.6.0-canary.45"" + ""@next/env"": ""15.6.0-canary.46"" ""@swc/helpers"": ""0.5.15"" ""caniuse-lite"": ""^1.0.30001579"" ""postcss"": ""8.4.31"" ""@modelcontextprotocol/sdk"": ""1.18.1"" ""@mswjs/interceptors"": ""0.23.0"" ""@napi-rs/triples"": ""1.2.0"" - ""@next/font"": ""15.6.0-canary.45"" - ""@next/polyfill-module"": ""15.6.0-canary.45"" - ""@next/polyfill-nomodule"": ""15.6.0-canary.45"" - ""@next/react-refresh-utils"": ""15.6.0-canary.45"" - ""@next/swc"": ""15.6.0-canary.45"" + ""@next/font"": ""15.6.0-canary.46"" + ""@next/polyfill-module"": ""15.6.0-canary.46"" + ""@next/polyfill-nomodule"": ""15.6.0-canary.46"" + ""@next/react-refresh-utils"": ""15.6.0-canary.46"" + ""@next/swc"": ""15.6.0-canary.46"" ""@opentelemetry/api"": ""1.6.0"" ""@playwright/test"": ""1.51.1"" ""@rspack/core"": ""1.5.0"""
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,packages/react-refresh-utils/package.json,1,1,2,"{ ""name"": ""@next/react-refresh-utils"" - ""version"": ""15.6.0-canary.45"" + ""version"": ""15.6.0-canary.46"" ""description"": ""An experimental package providing utilities for React Refresh."" ""repository"": { ""url"": ""vercel/next.js"""
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,packages/third-parties/package.json,2,2,4,"{ ""name"": ""@next/third-parties"" - ""version"": ""15.6.0-canary.45"" + ""version"": ""15.6.0-canary.46"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/third-parties"" ""third-party-capital"": ""1.0.20"" } ""devDependencies"": { - ""next"": ""15.6.0-canary.45"" + ""next"": ""15.6.0-canary.46"" ""outdent"": ""0.8.0"" ""prettier"": ""2.5.1"" ""typescript"": ""5.9.2"""
vercel/next.js,8acd54a8c807671b016ad9e02f108739c6563a43,nextjs-bot,2025-10-06 22:41:21,v15.6.0-canary.46,pnpm-lock.yaml,8,8,16,importers: packages/eslint-config-next: dependencies: '@next/eslint-plugin-next': - specifier: 15.6.0-canary.45 + specifier: 15.6.0-canary.46 version: link:../eslint-plugin-next '@rushstack/eslint-patch': specifier: ^1.10.3 importers: packages/next: dependencies: '@next/env': - specifier: 15.6.0-canary.45 + specifier: 15.6.0-canary.46 version: link:../next-env '@swc/helpers': specifier: 0.5.15 importers: specifier: 1.2.0 version: 1.2.0 '@next/font': - specifier: 15.6.0-canary.45 + specifier: 15.6.0-canary.46 version: link:../font '@next/polyfill-module': - specifier: 15.6.0-canary.45 + specifier: 15.6.0-canary.46 version: link:../next-polyfill-module '@next/polyfill-nomodule': - specifier: 15.6.0-canary.45 + specifier: 15.6.0-canary.46 version: link:../next-polyfill-nomodule '@next/react-refresh-utils': - specifier: 15.6.0-canary.45 + specifier: 15.6.0-canary.46 version: link:../react-refresh-utils '@next/swc': - specifier: 15.6.0-canary.45 + specifier: 15.6.0-canary.46 version: link:../next-swc '@opentelemetry/api': specifier: 1.6.0 importers: version: 1.0.20 devDependencies: next: - specifier: 15.6.0-canary.45 + specifier: 15.6.0-canary.46 version: link:../next outdent: specifier: 0.8.0
vercel/next.js,751b11dcab8f104511bba634f89579548501d28d,Luke Sandberg,2025-10-06 21:17:52,Add a webpack flag to create next app.  Ensure that if you set it or decline turbopack we set the --webpack flag on the generated project (#84476)  Add a --webpack flag to create-next-app to allow selecting the webpack bundler.  Add the --webpack flag to the `next` command lines if it is set or if the turbopack prompt is declined.  This is necessary now that we have flipped the default.,packages/create-next-app/create-app.ts,4,7,11,import { getOnline } from './helpers/is-online' import { isWriteable } from './helpers/is-writeable' import { runTypegen } from './helpers/typegen' -import type { TemplateMode TemplateType } from './templates' +import type { Bundler TemplateMode TemplateType } from './templates' import { getTemplateFile installTemplate } from './templates' export class DownloadError extends Error {} export async function createApp({ skipInstall empty api - turbopack - rspack + bundler disableGit reactCompiler }: { export async function createApp({ skipInstall: boolean empty: boolean api?: boolean - turbopack: boolean - rspack: boolean + bundler: Bundler disableGit?: boolean reactCompiler: boolean }): Promise<void> { export async function createApp({ srcDir importAlias skipInstall - turbopack - rspack + bundler reactCompiler }) }
vercel/next.js,751b11dcab8f104511bba634f89579548501d28d,Luke Sandberg,2025-10-06 21:17:52,Add a webpack flag to create next app.  Ensure that if you set it or decline turbopack we set the --webpack flag on the generated project (#84476)  Add a --webpack flag to create-next-app to allow selecting the webpack bundler.  Add the --webpack flag to the `next` command lines if it is set or if the turbopack prompt is declined.  This is necessary now that we have flipped the default.,packages/create-next-app/index.ts,23,8,31,"import { getPkgManager } from './helpers/get-pkg-manager' import { isFolderEmpty } from './helpers/is-folder-empty' import { validateNpmName } from './helpers/validate-pkg' import packageJson from './package.json' +import { Bundler } from './templates' let projectPath: string = '' const program = new Command(packageJson.name) .option('--biome' 'Initialize with Biome config.') .option('--app' 'Initialize as an App Router project.') .option('--src-dir' ""Initialize inside a 'src/' directory."") - .option('--turbopack' 'Enable Turbopack by default for development.') - .option('--rspack' 'Using Rspack as the bundler') + .option('--turbopack' 'Enable Turbopack as the bundler.') + .option('--webpack' 'Enable Webpack as the bundler.') + .option('--rspack' 'Enable Rspack as the bundler') .option( '--import-alias <prefix/*>' 'Specify import alias to use (default ""@/*"").' async function run(): Promise<void> { * Depending on the prompt response set the appropriate program flags. */ opts.typescript = Boolean(typescript) - opts.javascript = !Boolean(typescript) + opts.javascript = !typescript preferences.typescript = Boolean(typescript) } } async function run(): Promise<void> { } } - if (!opts.turbopack && !args.includes('--no-turbopack')) { + if ( + !opts.turbopack && + !args.includes('--no-turbopack') && + !opts.webpack && + !opts.rspack + ) { if (skipPrompt) { opts.turbopack = getPrefOrDefault('turbopack') } else { async function run(): Promise<void> { opts.turbopack = Boolean(turbopack) preferences.turbopack = Boolean(turbopack) } + // If Turbopack is not selected default to Webpack + opts.webpack = !opts.turbopack } const importAliasPattern = /^[^*""]+\/\*\s*$/ async function run(): Promise<void> { } } + const bundler: Bundler = opts.turbopack + ? Bundler.Turbopack + : opts.webpack + ? Bundler.Webpack + : opts.rspack + ? Bundler.Rspack + : Bundler.Turbopack + try { await createApp({ appPath async function run(): Promise<void> { skipInstall: opts.skipInstall empty: opts.empty api: opts.api - turbopack: opts.turbopack - rspack: opts.rspack + bundler disableGit: opts.disableGit reactCompiler: opts.reactCompiler }) async function run(): Promise<void> { importAlias: opts.importAlias skipInstall: opts.skipInstall empty: opts.empty - turbopack: opts.turbopack - rspack: opts.rspack + bundler disableGit: opts.disableGit reactCompiler: opts.reactCompiler })"
vercel/next.js,751b11dcab8f104511bba634f89579548501d28d,Luke Sandberg,2025-10-06 21:17:52,Add a webpack flag to create next app.  Ensure that if you set it or decline turbopack we set the --webpack flag on the generated project (#84476)  Add a --webpack flag to create-next-app to allow selecting the webpack bundler.  Add the --webpack flag to the `next` command lines if it is set or if the turbopack prompt is declined.  This is necessary now that we have flipped the default.,packages/create-next-app/templates/index.ts,7,7,14,"import { cyan bold } from ""picocolors""; import { Sema } from ""async-sema""; import pkg from ""../package.json""; -import { GetTemplateFileArgs InstallTemplateArgs } from ""./types""; +import { Bundler GetTemplateFileArgs InstallTemplateArgs } from ""./types""; // Do not rename or format. sync-react script relies on this line. // prettier-ignore export const installTemplate = async ({ srcDir importAlias skipInstall - turbopack - rspack + bundler reactCompiler }: InstallTemplateArgs) => { console.log(bold(`Using ${packageManager}.`)); export const installTemplate = async ({ } }); - if (rspack) { + if (bundler === Bundler.Rspack) { const nextConfigFile = path.join( root mode === ""js"" ? ""next.config.mjs"" : ""next.config.ts"" export const installTemplate = async ({ /** Copy the version from package.json or override for tests. */ const version = process.env.NEXT_PRIVATE_TEST_VERSION ?? pkg.version; + const bundlerFlags = `${bundler === Bundler.Turbopack ? "" --turbopack"" : """"}${bundler === Bundler.Webpack ? "" --webpack"" : """"}`; /** Create a package.json for the new project and write it to disk. */ const packageJson: any = { name: appName version: ""0.1.0"" private: true scripts: { - dev: `next dev${turbopack ? "" --turbopack"" : """"}` - build: `next build${turbopack ? "" --turbopack"" : """"}` + dev: `next dev${bundlerFlags}` + build: `next build${bundlerFlags}` start: ""next start"" ...(eslint && { lint: ""eslint"" }) ...(biome && { lint: ""biome check"" format: ""biome format --write"" }) export const installTemplate = async ({ devDependencies: {} }; - if (rspack) { + if (bundler === Bundler.Rspack) { const NEXT_PRIVATE_TEST_VERSION = process.env.NEXT_PRIVATE_TEST_VERSION; if ( NEXT_PRIVATE_TEST_VERSION &&"
vercel/next.js,751b11dcab8f104511bba634f89579548501d28d,Luke Sandberg,2025-10-06 21:17:52,Add a webpack flag to create next app.  Ensure that if you set it or decline turbopack we set the --webpack flag on the generated project (#84476)  Add a --webpack flag to create-next-app to allow selecting the webpack bundler.  Add the --webpack flag to the `next` command lines if it is set or if the turbopack prompt is declined.  This is necessary now that we have flipped the default.,packages/create-next-app/templates/types.ts,7,2,9,"export interface InstallTemplateArgs { srcDir: boolean; importAlias: string; skipInstall: boolean; - turbopack: boolean; - rspack: boolean; + bundler: Bundler; reactCompiler: boolean; } + +export enum Bundler { + Turbopack = ""turbopack"" + Webpack = ""webpack"" + Rspack = ""rspack"" +}"
vercel/next.js,df6aed34f0726061bbac6971952df4d36a0a1f05,Joshua Hannaford,2025-10-06 19:43:58,"fix(Turbopack): Add better error messaging for when we can't determine Next.js root (#83918)  ## Improve error message when Next.js package can't be found  ### What? Enhances the `get_next_package` function to provide a more informative error message when the Next.js package cannot be found from the context directory.  ### Why? When users encounter issues with Next.js package resolution  the previous generic error message ""Next.js package not found"" didn't provide enough context or guidance on how to fix the problem. The improved error message explains potential causes and solutions.  ### How? - Updated the function to use Vc<FileSystemPath> for context_directory - Improved error handling with a detailed message that:   - Explains the issue clearly   - Shows the context directory path where resolution failed   - Suggests setting `turbopack.root` in the Next.js config   - Mentions potential issues with symlinks   - Provides a link to documentation for more information  ### How to Test  To test this   1. Modify `<projectRoot>/bench/basic-app/next.config.js` to      ```js     module.exports = {       experimental: {         serverMinification: true        }        turbopack: {         root: __dirname        }     }     ``` 2. Run `pnpm build && pnpm swc-build-native` to ensure that you have the updated code 3. Run `pnpm next dev --turbo bench/basic-app` and ensure the error shows up exactly once 4. Run `pnpm next build --turbo bench/basic-app` and ensure the same error shows up exactly once  ---------  Co-authored-by: Niklas Mischkulnig <4586894+mischnic@users.noreply.github.com> Co-authored-by: Luke Sandberg <lukeisandberg@gmail.com>",crates/next-api/src/module_graph.rs,1,1,2,impl Issue for CssGlobalImportIssue { } fn severity(&self) -> IssueSeverity { - IssueSeverity::Error + IssueSeverity::Fatal } #[turbo_tasks::function]
vercel/next.js,df6aed34f0726061bbac6971952df4d36a0a1f05,Joshua Hannaford,2025-10-06 19:43:58,"fix(Turbopack): Add better error messaging for when we can't determine Next.js root (#83918)  ## Improve error message when Next.js package can't be found  ### What? Enhances the `get_next_package` function to provide a more informative error message when the Next.js package cannot be found from the context directory.  ### Why? When users encounter issues with Next.js package resolution  the previous generic error message ""Next.js package not found"" didn't provide enough context or guidance on how to fix the problem. The improved error message explains potential causes and solutions.  ### How? - Updated the function to use Vc<FileSystemPath> for context_directory - Improved error handling with a detailed message that:   - Explains the issue clearly   - Shows the context directory path where resolution failed   - Suggests setting `turbopack.root` in the Next.js config   - Mentions potential issues with symlinks   - Provides a link to documentation for more information  ### How to Test  To test this   1. Modify `<projectRoot>/bench/basic-app/next.config.js` to      ```js     module.exports = {       experimental: {         serverMinification: true        }        turbopack: {         root: __dirname        }     }     ``` 2. Run `pnpm build && pnpm swc-build-native` to ensure that you have the updated code 3. Run `pnpm next dev --turbo bench/basic-app` and ensure the error shows up exactly once 4. Run `pnpm next build --turbo bench/basic-app` and ensure the same error shows up exactly once  ---------  Co-authored-by: Niklas Mischkulnig <4586894+mischnic@users.noreply.github.com> Co-authored-by: Luke Sandberg <lukeisandberg@gmail.com>",packages/next/errors.json,2,1,3,"""849"": ""Route %s with \\`dynamic = \""error\""\\` couldn't be rendered statically because it used \\`cookies()\\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering"" ""850"": ""metadataBase is not a valid URL: %s"" ""851"": ""Pass either `webpack` or `turbopack` not both."" - ""852"": ""Only custom servers can pass `webpack` `turbo` or `turbopack`."" + ""852"": ""Only custom servers can pass `webpack` `turbo` or `turbopack`."" + ""853"": ""Turbopack build failed"" }"
vercel/next.js,df6aed34f0726061bbac6971952df4d36a0a1f05,Joshua Hannaford,2025-10-06 19:43:58,"fix(Turbopack): Add better error messaging for when we can't determine Next.js root (#83918)  ## Improve error message when Next.js package can't be found  ### What? Enhances the `get_next_package` function to provide a more informative error message when the Next.js package cannot be found from the context directory.  ### Why? When users encounter issues with Next.js package resolution  the previous generic error message ""Next.js package not found"" didn't provide enough context or guidance on how to fix the problem. The improved error message explains potential causes and solutions.  ### How? - Updated the function to use Vc<FileSystemPath> for context_directory - Improved error handling with a detailed message that:   - Explains the issue clearly   - Shows the context directory path where resolution failed   - Suggests setting `turbopack.root` in the Next.js config   - Mentions potential issues with symlinks   - Provides a link to documentation for more information  ### How to Test  To test this   1. Modify `<projectRoot>/bench/basic-app/next.config.js` to      ```js     module.exports = {       experimental: {         serverMinification: true        }        turbopack: {         root: __dirname        }     }     ``` 2. Run `pnpm build && pnpm swc-build-native` to ensure that you have the updated code 3. Run `pnpm next dev --turbo bench/basic-app` and ensure the error shows up exactly once 4. Run `pnpm next build --turbo bench/basic-app` and ensure the same error shows up exactly once  ---------  Co-authored-by: Niklas Mischkulnig <4586894+mischnic@users.noreply.github.com> Co-authored-by: Luke Sandberg <lukeisandberg@gmail.com>",packages/next/src/build/swc/index.ts,27,8,35,function bindingToApi( async writeAllEntrypointsToDisk( appDirOnly: boolean - ): Promise<TurbopackResult<RawEntrypoints>> { + ): Promise<TurbopackResult<Partial<RawEntrypoints>>> { const napiEndpoints = (await binding.projectWriteAllEntrypointsToDisk( this._nativeProject appDirOnly - )) as TurbopackResult<NapiEntrypoints> + )) as TurbopackResult<Partial<NapiEntrypoints>> - return napiEntrypointsToRawEntrypoints(napiEndpoints) + if ('routes' in napiEndpoints) { + return napiEntrypointsToRawEntrypoints( + napiEndpoints as TurbopackResult<NapiEntrypoints> + ) + } else { + return { + issues: napiEndpoints.issues + diagnostics: napiEndpoints.diagnostics + } + } } entrypointsSubscribe() { - const subscription = subscribe<TurbopackResult<NapiEntrypoints>>( + const subscription = subscribe<TurbopackResult<NapiEntrypoints | {}>>( false async (callback) => binding.projectEntrypointsSubscribe(this._nativeProject callback) ) return (async function* () { for await (const entrypoints of subscription) { - yield napiEntrypointsToRawEntrypoints(entrypoints) + if ('routes' in (entrypoints as TurbopackResult<NapiEntrypoints>)) { + yield napiEntrypointsToRawEntrypoints( + entrypoints as TurbopackResult<NapiEntrypoints> + ) + } else { + yield { + issues: entrypoints.issues + diagnostics: entrypoints.diagnostics + } as TurbopackResult<{}> + } } })() } function bindingToApi( )) as TurbopackResult<WrittenEndpoint> } - async clientChanged(): Promise<AsyncIterableIterator<TurbopackResult<{}>>> { + async clientChanged(): Promise<AsyncIterableIterator<TurbopackResult>> { const clientSubscription = subscribe<TurbopackResult>( false async (callback) => function bindingToApi( async serverChanged( includeIssues: boolean - ): Promise<AsyncIterableIterator<TurbopackResult<{}>>> { + ): Promise<AsyncIterableIterator<TurbopackResult>> { const serverSubscription = subscribe<TurbopackResult>( false async (callback) => function bindingToApi( type: 'conflict' } break - default: + default: { const _exhaustiveCheck: never = routeType invariant( nativeRoute () => `Unknown route type: ${_exhaustiveCheck}` ) + } } routes.set(pathname route) }
vercel/next.js,df6aed34f0726061bbac6971952df4d36a0a1f05,Joshua Hannaford,2025-10-06 19:43:58,"fix(Turbopack): Add better error messaging for when we can't determine Next.js root (#83918)  ## Improve error message when Next.js package can't be found  ### What? Enhances the `get_next_package` function to provide a more informative error message when the Next.js package cannot be found from the context directory.  ### Why? When users encounter issues with Next.js package resolution  the previous generic error message ""Next.js package not found"" didn't provide enough context or guidance on how to fix the problem. The improved error message explains potential causes and solutions.  ### How? - Updated the function to use Vc<FileSystemPath> for context_directory - Improved error handling with a detailed message that:   - Explains the issue clearly   - Shows the context directory path where resolution failed   - Suggests setting `turbopack.root` in the Next.js config   - Mentions potential issues with symlinks   - Provides a link to documentation for more information  ### How to Test  To test this   1. Modify `<projectRoot>/bench/basic-app/next.config.js` to      ```js     module.exports = {       experimental: {         serverMinification: true        }        turbopack: {         root: __dirname        }     }     ``` 2. Run `pnpm build && pnpm swc-build-native` to ensure that you have the updated code 3. Run `pnpm next dev --turbo bench/basic-app` and ensure the error shows up exactly once 4. Run `pnpm next build --turbo bench/basic-app` and ensure the same error shows up exactly once  ---------  Co-authored-by: Niklas Mischkulnig <4586894+mischnic@users.noreply.github.com> Co-authored-by: Luke Sandberg <lukeisandberg@gmail.com>",packages/next/src/build/swc/types.ts,4,2,6,export interface Project { writeAllEntrypointsToDisk( appDirOnly: boolean - ): Promise<TurbopackResult<RawEntrypoints>> + ): Promise<TurbopackResult<Partial<RawEntrypoints>>> - entrypointsSubscribe(): AsyncIterableIterator<TurbopackResult<RawEntrypoints>> + entrypointsSubscribe(): AsyncIterableIterator< + TurbopackResult<RawEntrypoints | {}> + > hmrEvents(identifier: string): AsyncIterableIterator<TurbopackResult<Update>>
vercel/next.js,df6aed34f0726061bbac6971952df4d36a0a1f05,Joshua Hannaford,2025-10-06 19:43:58,"fix(Turbopack): Add better error messaging for when we can't determine Next.js root (#83918)  ## Improve error message when Next.js package can't be found  ### What? Enhances the `get_next_package` function to provide a more informative error message when the Next.js package cannot be found from the context directory.  ### Why? When users encounter issues with Next.js package resolution  the previous generic error message ""Next.js package not found"" didn't provide enough context or guidance on how to fix the problem. The improved error message explains potential causes and solutions.  ### How? - Updated the function to use Vc<FileSystemPath> for context_directory - Improved error handling with a detailed message that:   - Explains the issue clearly   - Shows the context directory path where resolution failed   - Suggests setting `turbopack.root` in the Next.js config   - Mentions potential issues with symlinks   - Provides a link to documentation for more information  ### How to Test  To test this   1. Modify `<projectRoot>/bench/basic-app/next.config.js` to      ```js     module.exports = {       experimental: {         serverMinification: true        }        turbopack: {         root: __dirname        }     }     ``` 2. Run `pnpm build && pnpm swc-build-native` to ensure that you have the updated code 3. Run `pnpm next dev --turbo bench/basic-app` and ensure the error shows up exactly once 4. Run `pnpm next build --turbo bench/basic-app` and ensure the same error shows up exactly once  ---------  Co-authored-by: Niklas Mischkulnig <4586894+mischnic@users.noreply.github.com> Co-authored-by: Luke Sandberg <lukeisandberg@gmail.com>",packages/next/src/server/dev/hot-reloader-turbopack.ts,17,8,25,import { devIndicatorServerState } from './dev-indicator-server-state' import { getDisableDevIndicatorMiddleware } from '../../next-devtools/server/dev-indicator-middleware' import { getRestartDevServerMiddleware } from '../../next-devtools/server/restart-dev-server-middleware' import { backgroundLogCompilationEvents } from '../../shared/lib/turbopack/compilation-events' -import { getSupportedBrowsers } from '../../build/utils' +import { getSupportedBrowsers printBuildErrors } from '../../build/utils' import { receiveBrowserLogsTurbopack handleClientFileLogs export async function createHotReloaderTurbopack( ) } + // Always process issues/diagnostics even if there are no entrypoints yet + processTopLevelIssues(currentTopLevelIssues entrypoints) + + // Certain crtical issues prevent any entrypoints from being constructed so return early + if (!('routes' in entrypoints)) { + printBuildErrors(entrypoints true) + + currentEntriesHandlingResolve!() + currentEntriesHandlingResolve = undefined + continue + } + + const routes = entrypoints.routes const existingRoutes = [ ...currentEntrypoints.app.keys() ...currentEntrypoints.page.keys() ] - const newRoutes = [...entrypoints.routes.keys()] + const newRoutes = [...routes.keys()] const addedRoutes = newRoutes.filter( (route) => !currentEntrypoints.app.has(route) && !currentEntrypoints.page.has(route) ) - const removedRoutes = existingRoutes.filter( - (route) => !entrypoints.routes.has(route) - ) - - processTopLevelIssues(currentTopLevelIssues entrypoints) + const removedRoutes = existingRoutes.filter((route) => !routes.has(route)) await handleEntrypoints({ - entrypoints + entrypoints: entrypoints as any currentEntrypoints
vercel/next.js,df6aed34f0726061bbac6971952df4d36a0a1f05,Joshua Hannaford,2025-10-06 19:43:58,"fix(Turbopack): Add better error messaging for when we can't determine Next.js root (#83918)  ## Improve error message when Next.js package can't be found  ### What? Enhances the `get_next_package` function to provide a more informative error message when the Next.js package cannot be found from the context directory.  ### Why? When users encounter issues with Next.js package resolution  the previous generic error message ""Next.js package not found"" didn't provide enough context or guidance on how to fix the problem. The improved error message explains potential causes and solutions.  ### How? - Updated the function to use Vc<FileSystemPath> for context_directory - Improved error handling with a detailed message that:   - Explains the issue clearly   - Shows the context directory path where resolution failed   - Suggests setting `turbopack.root` in the Next.js config   - Mentions potential issues with symlinks   - Provides a link to documentation for more information  ### How to Test  To test this   1. Modify `<projectRoot>/bench/basic-app/next.config.js` to      ```js     module.exports = {       experimental: {         serverMinification: true        }        turbopack: {         root: __dirname        }     }     ``` 2. Run `pnpm build && pnpm swc-build-native` to ensure that you have the updated code 3. Run `pnpm next dev --turbo bench/basic-app` and ensure the error shows up exactly once 4. Run `pnpm next build --turbo bench/basic-app` and ensure the same error shows up exactly once  ---------  Co-authored-by: Niklas Mischkulnig <4586894+mischnic@users.noreply.github.com> Co-authored-by: Luke Sandberg <lukeisandberg@gmail.com>",test/development/basic/next-rs-api.test.ts,19,4,23,describe('next.rs api' () => { const entrypointsSubscription = project.entrypointsSubscribe() const entrypoints = await entrypointsSubscription.next() expect(entrypoints.done).toBe(false) + if (!('routes' in entrypoints.value)) { + throw new Error('Entrypoints not available due to compilation errors') + } + expect(Array.from(entrypoints.value.routes.keys()).sort()).toEqual([ '/' '/_not-found' describe('next.rs api' () => { // eslint-disable-next-line no-loop-func it(`should allow to write ${name} to disk` async () => { const entrypointsSubscribtion = project.entrypointsSubscribe() - const entrypoints: TurbopackResult<RawEntrypoints> = ( + const entrypoints: TurbopackResult<RawEntrypoints | {}> = ( await entrypointsSubscribtion.next() ).value + if (!('routes' in entrypoints)) { + throw new Error('Entrypoints not available due to compilation errors') + } + const route = entrypoints.routes.get(path) entrypointsSubscribtion.return() describe('next.rs api' () => { } default: { throw new Error('unknown route type') - break } } }) describe('next.rs api' () => { console.log('start') await new Promise((r) => setTimeout(r 1000)) const entrypointsSubscribtion = project.entrypointsSubscribe() - const entrypoints: TurbopackResult<RawEntrypoints> = ( + const entrypoints: TurbopackResult<RawEntrypoints | {}> = ( await entrypointsSubscribtion.next() ).value + if (!('routes' in entrypoints)) { + throw new Error('Entrypoints not available due to compilation errors') + } + const route = entrypoints.routes.get(path) entrypointsSubscribtion.return() describe('next.rs api' () => { console.log('start') await new Promise((r) => setTimeout(r 1000)) const entrypointsSubscribtion = project.entrypointsSubscribe() - const entrypoints: TurbopackResult<RawEntrypoints> = ( + const entrypoints: TurbopackResult<RawEntrypoints | {}> = ( await entrypointsSubscribtion.next() ).value + if (!('routes' in entrypoints)) { + throw new Error('Entrypoints not available due to compilation errors') + } + const route = entrypoints.routes.get('/') entrypointsSubscribtion.return()
vercel/next.js,f9ca4b5ccd3b9c5ae08bbf14467cb7f85eb9f9af,Jiwon Choi,2025-10-06 19:41:18,CI: Enable `experimental.isolatedDevBuild` for `test-integration` (#84558)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-integration instead of test-experimental-integration because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev ([link](https://github.com/vercel/next.js/pull/84562)) 2. test-prod ([link](https://github.com/vercel/next.js/pull/84556)) 3. test-integration (here) 4. test-unit 5. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,.github/workflows/build_and_test.yml,1,0,1,"jobs: afterBuild: | export IS_WEBPACK_TEST=1 export NEXT_TEST_REACT_VERSION=""${{ matrix.react }}"" + export __NEXT_EXPERIMENTAL_ISOLATED_DEV_BUILD=true node run-tests.js \ --timings \"
vercel/next.js,f9ca4b5ccd3b9c5ae08bbf14467cb7f85eb9f9af,Jiwon Choi,2025-10-06 19:41:18,CI: Enable `experimental.isolatedDevBuild` for `test-integration` (#84558)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-integration instead of test-experimental-integration because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev ([link](https://github.com/vercel/next.js/pull/84562)) 2. test-prod ([link](https://github.com/vercel/next.js/pull/84556)) 3. test-integration (here) 4. test-unit 5. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/integration/api-support/test/index.test.js,9,0,9,import { import json from '../big.json' const appDir = join(__dirname '../') +const originalIsNextDev = global.isNextDev let appPort let stderr let mode let app function runTests(dev = false) { + beforeAll(() => { + // isNextDev is used for getDistDir where it is used for reading the build manifest files. + global.isNextDev = dev + }) + afterAll(() => { + global.isNextDev = originalIsNextDev + }) + it('should not strip .json from API route' async () => { const res = await fetchViaHTTP(appPort '/api/hello.json') expect(res.status).toBe(200)
vercel/next.js,f9ca4b5ccd3b9c5ae08bbf14467cb7f85eb9f9af,Jiwon Choi,2025-10-06 19:41:18,CI: Enable `experimental.isolatedDevBuild` for `test-integration` (#84558)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-integration instead of test-experimental-integration because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev ([link](https://github.com/vercel/next.js/pull/84562)) 2. test-prod ([link](https://github.com/vercel/next.js/pull/84556)) 3. test-integration (here) 4. test-unit 5. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/integration/dist-dir/test/index.test.js,18,6,24,import { killApp renderViaHTTP launchApp + getDistDir } from 'next-test-utils' const appDir = join(__dirname '../') describe('distDir' () => { ).toBeTruthy() }) it('should not build the app within the default `.next` directory' async () => { - expect(await fs.exists(join(__dirname '/../.next'))).toBeFalsy() + expect( + await fs.exists(join(__dirname `/../${getDistDir()}`)) + ).toBeFalsy() }) } ) describe('distDir' () => { 'development mode' () => { beforeAll(async () => { - await fs.remove(join(appDir '.next')) + await fs.remove(join(appDir getDistDir())) await fs.remove(join(appDir 'dist')) appPort = await findPort() app = await launchApp(appDir appPort) describe('distDir' () => { }) it('should build the app within the given `dist` directory' async () => { - expect( - await fs.exists(join(__dirname `/../dist/${BUILD_MANIFEST}`)) - ).toBeTruthy() + // In isolated dev build the distDir for development is `distDir/dev` + if (process.env.__NEXT_EXPERIMENTAL_ISOLATED_DEV_BUILD === 'true') { + expect( + await fs.exists(join(__dirname `/../dist/dev/${BUILD_MANIFEST}`)) + ).toBeTruthy() + } else { + expect( + await fs.exists(join(__dirname `/../dist/${BUILD_MANIFEST}`)) + ).toBeTruthy() + } }) it('should not build the app within the default `.next` directory' async () => { - expect(await fs.exists(join(__dirname '/../.next'))).toBeFalsy() + expect( + await fs.exists(join(__dirname `/../${getDistDir()}`)) + ).toBeFalsy() }) } )
vercel/next.js,f9ca4b5ccd3b9c5ae08bbf14467cb7f85eb9f9af,Jiwon Choi,2025-10-06 19:41:18,CI: Enable `experimental.isolatedDevBuild` for `test-integration` (#84558)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-integration instead of test-experimental-integration because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev ([link](https://github.com/vercel/next.js/pull/84562)) 2. test-prod ([link](https://github.com/vercel/next.js/pull/84556)) 3. test-integration (here) 4. test-unit 5. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/integration/externals-pages-bundle/test/externals.test.js,7,2,9,"import { findPort File renderViaHTTP + getDistDir } from 'next-test-utils' const appDir = join(__dirname '../') describe('default' () => { const port = await findPort() const config = new File(join(appDir 'next.config.js')) config.delete() + const originalIsNextDev = global.isNextDev try { + // launchApp is for dev mode and isNextDev is used in getDistDir + global.isNextDev = true const app = await launchApp(appDir port) await renderViaHTTP(port '/') if (process.env.IS_TURBOPACK_TEST) { - const ssrPath = join(appDir '.next/server/chunks/ssr') + const ssrPath = join(appDir `${getDistDir()}/server/chunks/ssr`) const pageBundleBasenames = (await fs.readdir(ssrPath)).filter((p) => p.match(/\.js$/) ) describe('default' () => { expect(allBundles).not.toContain('""external-package content""') } else { const output = await fs.readFile( - join(appDir '.next/server/pages/index.js') + join(appDir `${getDistDir()}/server/pages/index.js`) 'utf8' ) expect(output).toContain('require(""external-package"")') } await killApp(app) } finally { config.restore() + global.isNextDev = originalIsNextDev } }) })"
vercel/next.js,f9ca4b5ccd3b9c5ae08bbf14467cb7f85eb9f9af,Jiwon Choi,2025-10-06 19:41:18,CI: Enable `experimental.isolatedDevBuild` for `test-integration` (#84558)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-integration instead of test-experimental-integration because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev ([link](https://github.com/vercel/next.js/pull/84562)) 2. test-prod ([link](https://github.com/vercel/next.js/pull/84556)) 3. test-integration (here) 4. test-unit 5. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/integration/image-optimizer/test/content-disposition-type.test.ts,0,2,2,import { join } from 'path' import { setupTests } from './util' const appDir = join(__dirname '../app') -const imagesDir = join(appDir '.next' 'cache' 'images') describe('with contentDispositionType inline' () => { setupTests({ nextConfigImages: { contentDispositionType: 'inline' } appDir - imagesDir }) })
vercel/next.js,f9ca4b5ccd3b9c5ae08bbf14467cb7f85eb9f9af,Jiwon Choi,2025-10-06 19:41:18,CI: Enable `experimental.isolatedDevBuild` for `test-integration` (#84558)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-integration instead of test-experimental-integration because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev ([link](https://github.com/vercel/next.js/pull/84562)) 2. test-prod ([link](https://github.com/vercel/next.js/pull/84556)) 3. test-integration (here) 4. test-unit 5. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/integration/image-optimizer/test/dangerously-allow-svg.test.ts,0,2,2,import { join } from 'path' import { setupTests } from './util' const appDir = join(__dirname '../app') -const imagesDir = join(appDir '.next' 'cache' 'images') describe('with dangerouslyAllowSVG config' () => { setupTests({ nextConfigImages: { dangerouslyAllowSVG: true } appDir - imagesDir }) })
vercel/next.js,f9ca4b5ccd3b9c5ae08bbf14467cb7f85eb9f9af,Jiwon Choi,2025-10-06 19:41:18,CI: Enable `experimental.isolatedDevBuild` for `test-integration` (#84558)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-integration instead of test-experimental-integration because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev ([link](https://github.com/vercel/next.js/pull/84562)) 2. test-prod ([link](https://github.com/vercel/next.js/pull/84556)) 3. test-integration (here) 4. test-unit 5. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/integration/image-optimizer/test/disable-write-to-cache-dir.test.ts,0,2,2,import { join } from 'path' import { setupTests } from './util' const appDir = join(__dirname '../app') -const imagesDir = join(appDir '.next' 'cache' 'images') describe('with isrFlushToDisk false config' () => { setupTests({ appDir - imagesDir nextConfigExperimental: { isrFlushToDisk: false } }) })
vercel/next.js,f9ca4b5ccd3b9c5ae08bbf14467cb7f85eb9f9af,Jiwon Choi,2025-10-06 19:41:18,CI: Enable `experimental.isolatedDevBuild` for `test-integration` (#84558)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-integration instead of test-experimental-integration because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev ([link](https://github.com/vercel/next.js/pull/84562)) 2. test-prod ([link](https://github.com/vercel/next.js/pull/84556)) 3. test-integration (here) 4. test-unit 5. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/integration/image-optimizer/test/index.test.ts,9,8,17,import { nextStart retry waitFor + getDistDir } from 'next-test-utils' import { join } from 'path' import { cleanImagesDir expectWidth fsToJson } from './util' const appDir = join(__dirname '../app') -const imagesDir = join(appDir '.next' 'cache' 'images') +const imagesDir = join(appDir getDistDir() 'cache' 'images') const nextConfig = new File(join(appDir 'next.config.js')) const largeSize = 1080 // defaults defined in server/config.ts describe('Image Optimizer' () => { }` ) await nextBuild(appDir) - await cleanImagesDir({ imagesDir }) + await cleanImagesDir(imagesDir) appPort = await findPort() app = await nextStart(appDir appPort) }) describe('Image Optimizer' () => { } }) nextConfig.replace('{ /* replaceme */ }' json) - await cleanImagesDir({ imagesDir }) + await cleanImagesDir(imagesDir) appPort = await findPort() app = await launchApp(appDir appPort) }) describe('Image Optimizer' () => { } }) ) - await cleanImagesDir({ imagesDir }) + await cleanImagesDir(imagesDir) appPort = await findPort() app = await launchApp(appDir appPort) }) describe('Image Optimizer' () => { } }) ) - await cleanImagesDir({ imagesDir }) + await cleanImagesDir(imagesDir) appPort = await findPort() app = await launchApp(appDir appPort) }) describe('Image Optimizer' () => { }` nextConfig.replace('{ /* replaceme */ }' newConfig) await nextBuild(appDir) - await cleanImagesDir({ imagesDir }) + await cleanImagesDir(imagesDir) appPort = await findPort() app = await nextStart(appDir appPort) }) describe('Image Optimizer' () => { }) it('should return response when image is served from an external rewrite' async () => { - await cleanImagesDir({ imagesDir }) + await cleanImagesDir(imagesDir) const query = { url: '/next-js/next-js-bg.png' w: 64 q: 75 } const opts = { headers: { accept: 'image/webp' } } describe('Image Optimizer' () => { } }) nextConfig.replace('{ /* replaceme */ }' json) - await cleanImagesDir({ imagesDir }) + await cleanImagesDir(imagesDir) appPort = await findPort() app = await launchApp(appDir appPort) })
vercel/next.js,f9ca4b5ccd3b9c5ae08bbf14467cb7f85eb9f9af,Jiwon Choi,2025-10-06 19:41:18,CI: Enable `experimental.isolatedDevBuild` for `test-integration` (#84558)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-integration instead of test-experimental-integration because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev ([link](https://github.com/vercel/next.js/pull/84562)) 2. test-prod ([link](https://github.com/vercel/next.js/pull/84556)) 3. test-integration (here) 4. test-unit 5. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/integration/image-optimizer/test/minimum-cache-ttl.test.ts,0,2,2,import { join } from 'path' import { setupTests } from './util' const appDir = join(__dirname '../app') -const imagesDir = join(appDir '.next' 'cache' 'images') describe('with minimumCacheTTL of 5 sec' () => { setupTests({ describe('with minimumCacheTTL of 5 sec' () => { minimumCacheTTL: 5 } appDir - imagesDir }) })
vercel/next.js,f9ca4b5ccd3b9c5ae08bbf14467cb7f85eb9f9af,Jiwon Choi,2025-10-06 19:41:18,CI: Enable `experimental.isolatedDevBuild` for `test-integration` (#84558)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-integration instead of test-experimental-integration because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev ([link](https://github.com/vercel/next.js/pull/84562)) 2. test-prod ([link](https://github.com/vercel/next.js/pull/84556)) 3. test-integration (here) 4. test-unit 5. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/integration/image-optimizer/test/sharp.test.ts,1,2,3,import { join } from 'path' import { setupTests } from './util' const appDir = join(__dirname '../app') -const imagesDir = join(appDir '.next' 'cache' 'images') describe('with latest sharp' () => { - setupTests({ appDir imagesDir }) + setupTests({ appDir }) })
vercel/next.js,f9ca4b5ccd3b9c5ae08bbf14467cb7f85eb9f9af,Jiwon Choi,2025-10-06 19:41:18,CI: Enable `experimental.isolatedDevBuild` for `test-integration` (#84558)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-integration instead of test-experimental-integration because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev ([link](https://github.com/vercel/next.js/pull/84562)) 2. test-prod ([link](https://github.com/vercel/next.js/pull/84556)) 3. test-integration (here) 4. test-unit 5. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/integration/ondemand/test/index.test.js,5,0,5,"const startServer = async (optEnv = {} opts) => { 'On Demand Entries' () => { it('should pass' () => {}) + const originalIsNextDev = global.isNextDev beforeAll(async () => { + // The server.js sets ""dev"" via process.env.NODE_ENV. + // isNextDev is used for getDistDir where it is used for reading the build manifest files. + global.isNextDev = process.env.NODE_ENV !== 'production' await startServer() }) afterAll(async () => { + global.isNextDev = originalIsNextDev await killApp(context.server) })"
vercel/next.js,f9ca4b5ccd3b9c5ae08bbf14467cb7f85eb9f9af,Jiwon Choi,2025-10-06 19:41:18,CI: Enable `experimental.isolatedDevBuild` for `test-integration` (#84558)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-integration instead of test-experimental-integration because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev ([link](https://github.com/vercel/next.js/pull/84562)) 2. test-prod ([link](https://github.com/vercel/next.js/pull/84556)) 3. test-integration (here) 4. test-unit 5. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/integration/trailing-slash-dist/test/index.test.js,7,1,8,import { } from 'next-test-utils' const appDir = join(__dirname '../') - +const originalIsNextDev = global.isNextDev let appPort let app const runTest = (mode = 'server') => { + beforeAll(() => { + global.isNextDev = mode === 'dev' + }) + afterAll(() => { + global.isNextDev = originalIsNextDev + }) it('supports trailing slash' async () => { // Make sure the page is built before getting the file await renderViaHTTP(appPort '/')
vercel/next.js,f9ca4b5ccd3b9c5ae08bbf14467cb7f85eb9f9af,Jiwon Choi,2025-10-06 19:41:18,CI: Enable `experimental.isolatedDevBuild` for `test-integration` (#84558)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-integration instead of test-experimental-integration because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev ([link](https://github.com/vercel/next.js/pull/84562)) 2. test-prod ([link](https://github.com/vercel/next.js/pull/84556)) 3. test-integration (here) 4. test-unit 5. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/integration/typescript-app-type-declarations/test/index.test.js,12,0,12,"const appDir = join(__dirname '..') const appTypeDeclarations = join(appDir 'next-env.d.ts') describe('TypeScript App Type Declarations' () => { + if (process.env.__NEXT_EXPERIMENTAL_ISOLATED_DEV_BUILD === 'true') { + it.skip('should skip on isolated dev build' () => { + // We use static fixture ""next-env.d.ts"" but the content should differ + // based on the isolated dev build flag. We can't do something like + // ""next-env-dev.d.ts"" because Next.js Types Plugin emits a file + // ""next-env.d.ts"" and we have to change its behavior for this test case. + // Rather than that just skip the test as we're going to remove this flag soon. + // Then modify the content to be "".next/dev/types/routes.d.ts"" + }) + return + } + it('should write a new next-env.d.ts if none exist' async () => { const prevContent = await fs.readFile(appTypeDeclarations 'utf8') try {"
vercel/next.js,23ed41c6571ece1d8d59a73a4a2aec32754a7fe0,Jiwon Choi,2025-10-06 19:22:15,"Add `.next/dev/types` to CNA templates tsconfig include (#84566)  Since we're going to enable `experimental.isolatedDevBuild` by default  add `"".next/dev/types""` to CNA templates tsconfig include. This is required for CNA test `projectShouldHaveNoGitChanges()` as Next.js automatically adds this when the `isolatedDevBuild` is enabled.",packages/create-next-app/templates/app-api/ts/tsconfig.json,1,0,1,"""**/*.ts"" ""**/*.tsx"" "".next/types/**/*.ts"" + "".next/dev/types/**/*.ts"" ""**/*.mts"" ] ""exclude"": [""node_modules""]"
vercel/next.js,23ed41c6571ece1d8d59a73a4a2aec32754a7fe0,Jiwon Choi,2025-10-06 19:22:15,"Add `.next/dev/types` to CNA templates tsconfig include (#84566)  Since we're going to enable `experimental.isolatedDevBuild` by default  add `"".next/dev/types""` to CNA templates tsconfig include. This is required for CNA test `projectShouldHaveNoGitChanges()` as Next.js automatically adds this when the `isolatedDevBuild` is enabled.",packages/create-next-app/templates/app-empty/ts/tsconfig.json,1,0,1,"""**/*.ts"" ""**/*.tsx"" "".next/types/**/*.ts"" + "".next/dev/types/**/*.ts"" ""**/*.mts"" ] ""exclude"": [""node_modules""]"
vercel/next.js,23ed41c6571ece1d8d59a73a4a2aec32754a7fe0,Jiwon Choi,2025-10-06 19:22:15,"Add `.next/dev/types` to CNA templates tsconfig include (#84566)  Since we're going to enable `experimental.isolatedDevBuild` by default  add `"".next/dev/types""` to CNA templates tsconfig include. This is required for CNA test `projectShouldHaveNoGitChanges()` as Next.js automatically adds this when the `isolatedDevBuild` is enabled.",packages/create-next-app/templates/app-tw-empty/ts/tsconfig.json,1,0,1,"""**/*.ts"" ""**/*.tsx"" "".next/types/**/*.ts"" + "".next/dev/types/**/*.ts"" ""**/*.mts"" ] ""exclude"": [""node_modules""]"
vercel/next.js,23ed41c6571ece1d8d59a73a4a2aec32754a7fe0,Jiwon Choi,2025-10-06 19:22:15,"Add `.next/dev/types` to CNA templates tsconfig include (#84566)  Since we're going to enable `experimental.isolatedDevBuild` by default  add `"".next/dev/types""` to CNA templates tsconfig include. This is required for CNA test `projectShouldHaveNoGitChanges()` as Next.js automatically adds this when the `isolatedDevBuild` is enabled.",packages/create-next-app/templates/app-tw/ts/tsconfig.json,1,0,1,"""**/*.ts"" ""**/*.tsx"" "".next/types/**/*.ts"" + "".next/dev/types/**/*.ts"" ""**/*.mts"" ] ""exclude"": [""node_modules""]"
vercel/next.js,23ed41c6571ece1d8d59a73a4a2aec32754a7fe0,Jiwon Choi,2025-10-06 19:22:15,"Add `.next/dev/types` to CNA templates tsconfig include (#84566)  Since we're going to enable `experimental.isolatedDevBuild` by default  add `"".next/dev/types""` to CNA templates tsconfig include. This is required for CNA test `projectShouldHaveNoGitChanges()` as Next.js automatically adds this when the `isolatedDevBuild` is enabled.",packages/create-next-app/templates/app/ts/tsconfig.json,1,0,1,"""**/*.ts"" ""**/*.tsx"" "".next/types/**/*.ts"" + "".next/dev/types/**/*.ts"" ""**/*.mts"" ] ""exclude"": [""node_modules""]"
vercel/next.js,23ed41c6571ece1d8d59a73a4a2aec32754a7fe0,Jiwon Choi,2025-10-06 19:22:15,"Add `.next/dev/types` to CNA templates tsconfig include (#84566)  Since we're going to enable `experimental.isolatedDevBuild` by default  add `"".next/dev/types""` to CNA templates tsconfig include. This is required for CNA test `projectShouldHaveNoGitChanges()` as Next.js automatically adds this when the `isolatedDevBuild` is enabled.",packages/create-next-app/templates/default-empty/ts/tsconfig.json,1,0,1,"""**/*.ts"" ""**/*.tsx"" "".next/types/**/*.ts"" + "".next/dev/types/**/*.ts"" ""**/*.mts"" ] ""exclude"": [""node_modules""]"
vercel/next.js,23ed41c6571ece1d8d59a73a4a2aec32754a7fe0,Jiwon Choi,2025-10-06 19:22:15,"Add `.next/dev/types` to CNA templates tsconfig include (#84566)  Since we're going to enable `experimental.isolatedDevBuild` by default  add `"".next/dev/types""` to CNA templates tsconfig include. This is required for CNA test `projectShouldHaveNoGitChanges()` as Next.js automatically adds this when the `isolatedDevBuild` is enabled.",packages/create-next-app/templates/default-tw-empty/ts/tsconfig.json,1,0,1,"""**/*.ts"" ""**/*.tsx"" "".next/types/**/*.ts"" + "".next/dev/types/**/*.ts"" ""**/*.mts"" ] ""exclude"": [""node_modules""]"
vercel/next.js,23ed41c6571ece1d8d59a73a4a2aec32754a7fe0,Jiwon Choi,2025-10-06 19:22:15,"Add `.next/dev/types` to CNA templates tsconfig include (#84566)  Since we're going to enable `experimental.isolatedDevBuild` by default  add `"".next/dev/types""` to CNA templates tsconfig include. This is required for CNA test `projectShouldHaveNoGitChanges()` as Next.js automatically adds this when the `isolatedDevBuild` is enabled.",packages/create-next-app/templates/default-tw/ts/tsconfig.json,1,0,1,"""**/*.ts"" ""**/*.tsx"" "".next/types/**/*.ts"" + "".next/dev/types/**/*.ts"" ""**/*.mts"" ] ""exclude"": [""node_modules""]"
vercel/next.js,23ed41c6571ece1d8d59a73a4a2aec32754a7fe0,Jiwon Choi,2025-10-06 19:22:15,"Add `.next/dev/types` to CNA templates tsconfig include (#84566)  Since we're going to enable `experimental.isolatedDevBuild` by default  add `"".next/dev/types""` to CNA templates tsconfig include. This is required for CNA test `projectShouldHaveNoGitChanges()` as Next.js automatically adds this when the `isolatedDevBuild` is enabled.",packages/create-next-app/templates/default/ts/tsconfig.json,1,0,1,"""**/*.ts"" ""**/*.tsx"" "".next/types/**/*.ts"" + "".next/dev/types/**/*.ts"" ""**/*.mts"" ] ""exclude"": [""node_modules""]"
vercel/next.js,9f2db5fda8880b7628d076b37acba0534ded9d61,Jiwon Choi,2025-10-06 19:20:40,CI: Enable `experimental.isolatedDevBuild` for `test-prod` (#84556)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  Enabling on test-prod instead of test-experimental-prod because `-experimental` CIs are filtered via `experimental-tests-manifest.json` and they don't cover all tests. We want to enable this feature by default so we should ensure this incremental rollout is covered on all test cases.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev ([link](https://github.com/vercel/next.js/pull/84562)) 3. test-prod (here) 4. test-integration 5. test-unit 6. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,.github/workflows/build_and_test.yml,1,0,1,"jobs: export IS_WEBPACK_TEST=1 export NEXT_TEST_MODE=start export NEXT_TEST_REACT_VERSION=""${{ matrix.react }}"" + export __NEXT_EXPERIMENTAL_ISOLATED_DEV_BUILD=true node run-tests.js --timings -g ${{ matrix.group }} --type production stepName: 'test-prod-react-${{ matrix.react }}-${{ matrix.group }}'"
vercel/next.js,9c053332ccbc17220982f169b94c7cbdca0a648e,Zack Tanner,2025-10-06 19:12:11,"[test]: convert prefetching tests to be segmentCache compatible (#84521)  Refactors some older prefetching tests to be compatible with `clientSegmentCache`. The old tests were too tightly coupled to router implementation details. Some of the ones that don't make sense to convert were removed (for ex  asserting on prefetch cache seeding behavior  or fetch priority of ""high""  as fetch priority is managed differently with the new router).  This refactors the tests to leverage the `act` util from `segment-cache` test suites  and implemented the accordion behavior to more granularly control when prefetches are dispatched. I copied those implementations for now since we don't have a global util for it.",test/client-segment-cache-tests-manifest.json,0,20,20,"""app-dir action handling should reset the form state when the action redirects to itself"" ] } - ""test/e2e/app-dir/app-prefetch/prefetching.stale-times.test.ts"": { - ""failed"": [ - ""app dir - prefetching (custom staleTime) should fetch again when a static page was prefetched when navigating to it after the stale time has passed"" - ""app dir - prefetching (custom staleTime) should fetch again when the initially visited static page is visited after the stale time has passed"" - ""app dir - prefetching (custom staleTime) should not fetch again when a static page was prefetched when navigating to it twice"" - ""app dir - prefetching (custom staleTime) should renew the stale time after refetching expired RSC data"" - ] - } - ""test/e2e/app-dir/app-prefetch/prefetching.test.ts"": { - ""failed"": [ - ""app dir - prefetching fetch priority should have an auto priority for all other fetch operations"" - ""app dir - prefetching fetch priority should prefetch with high priority when navigating to a page without a prefetch entry"" - ""app dir - prefetching prefetch cache seeding should not re-fetch the initial dynamic page if the same page is prefetched with prefetch={true}"" - ""app dir - prefetching prefetch cache seeding should not re-fetch the initial static page if the same page is prefetched with prefetch={true}"" - ""app dir - prefetching should calculate `_rsc` query based on `Next-Url`"" - ""app dir - prefetching should immediately render the loading state for a dynamic segment when fetched from higher up in the tree"" - ""app dir - prefetching should not fetch again when a static page was prefetched"" - ""app dir - prefetching should not unintentionally modify the requested prefetch by escaping the uri encoded query params"" - ] - } ""test/e2e/app-dir/navigation/navigation.test.ts"": { ""failed"": [ ""app dir - navigation middleware redirect should change browser location when router.refresh() gets a redirect response"""
vercel/next.js,9c053332ccbc17220982f169b94c7cbdca0a648e,Zack Tanner,2025-10-06 19:12:11,"[test]: convert prefetching tests to be segmentCache compatible (#84521)  Refactors some older prefetching tests to be compatible with `clientSegmentCache`. The old tests were too tightly coupled to router implementation details. Some of the ones that don't make sense to convert were removed (for ex  asserting on prefetch cache seeding behavior  or fetch priority of ""high""  as fetch priority is managed differently with the new router).  This refactors the tests to leverage the `act` util from `segment-cache` test suites  and implemented the accordion behavior to more granularly control when prefetches are dispatched. I copied those implementations for now since we don't have a global util for it.",test/e2e/app-dir/app-prefetch/app/components/link-accordion.tsx,26,0,26,"+'use client' + +import Link from 'next/link' +import { useState } from 'react' + +export function LinkAccordion({ href children id }) { + const [isVisible setIsVisible] = useState(false) + return ( + <> + <input + type=""checkbox"" + checked={isVisible} + onChange={() => setIsVisible(!isVisible)} + data-link-accordion={href} + id={`accordion-${id}`} + /> + {isVisible ? ( + <Link href={href} id={id}> + {children} + </Link> + ) : ( + <>{children} (link is hidden)</> + )} + </> + ) +}"
vercel/next.js,9c053332ccbc17220982f169b94c7cbdca0a648e,Zack Tanner,2025-10-06 19:12:11,"[test]: convert prefetching tests to be segmentCache compatible (#84521)  Refactors some older prefetching tests to be compatible with `clientSegmentCache`. The old tests were too tightly coupled to router implementation details. Some of the ones that don't make sense to convert were removed (for ex  asserting on prefetch cache seeding behavior  or fetch priority of ""high""  as fetch priority is managed differently with the new router).  This refactors the tests to leverage the `act` util from `segment-cache` test suites  and implemented the accordion behavior to more granularly control when prefetches are dispatched. I copied those implementations for now since we don't have a global util for it.",test/e2e/app-dir/app-prefetch/app/dashboard/loading.js,1,1,2,export default function DashboardLoading() { - return <>Loading dashboard...</> + return <>Loading dashboard... [dashboard-prefetch-sentinel]</> }
vercel/next.js,9c053332ccbc17220982f169b94c7cbdca0a648e,Zack Tanner,2025-10-06 19:12:11,"[test]: convert prefetching tests to be segmentCache compatible (#84521)  Refactors some older prefetching tests to be compatible with `clientSegmentCache`. The old tests were too tightly coupled to router implementation details. Some of the ones that don't make sense to convert were removed (for ex  asserting on prefetch cache seeding behavior  or fetch priority of ""high""  as fetch priority is managed differently with the new router).  This refactors the tests to leverage the `act` util from `segment-cache` test suites  and implemented the accordion behavior to more granularly control when prefetches are dispatched. I copied those implementations for now since we don't have a global util for it.",test/e2e/app-dir/app-prefetch/app/dashboard/page.js,1,1,2,"export default async function DashboardPage(props) { return ( <> - <p id=""dashboard-page"">{message}</p> + <p id=""dashboard-page"">{message} [dashboard-prefetch-sentinel]</p> <Link href=""/static-page"" id=""to-static-page""> To Static Page </Link>"
vercel/next.js,9c053332ccbc17220982f169b94c7cbdca0a648e,Zack Tanner,2025-10-06 19:12:11,"[test]: convert prefetching tests to be segmentCache compatible (#84521)  Refactors some older prefetching tests to be compatible with `clientSegmentCache`. The old tests were too tightly coupled to router implementation details. Some of the ones that don't make sense to convert were removed (for ex  asserting on prefetch cache seeding behavior  or fetch priority of ""high""  as fetch priority is managed differently with the new router).  This refactors the tests to leverage the `act` util from `segment-cache` test suites  and implemented the accordion behavior to more granularly control when prefetches are dispatched. I copied those implementations for now since we don't have a global util for it.",test/e2e/app-dir/app-prefetch/app/page.js,16,11,27,"-import Link from 'next/link' +import { LinkAccordion } from './components/link-accordion' + export default function HomePage() { return ( <> - <Link href=""/dashboard"" id=""to-dashboard""> + <p id=""home-page"">Home Page [prefetch-sentinel]</p> + <LinkAccordion href=""/dashboard"" id=""to-dashboard""> To Dashboard - </Link> - <Link href=""/static-page"" id=""to-static-page""> + </LinkAccordion> + <LinkAccordion href=""/static-page"" id=""to-static-page""> To Static Page - </Link> - <Link href=""/static-page-no-prefetch"" id=""to-static-page-no-prefetch""> + </LinkAccordion> + <LinkAccordion + href=""/static-page-no-prefetch"" + id=""to-static-page-no-prefetch"" + > To Static Page No Prefetch - </Link> - <Link href=""/dynamic-page"" id=""to-dynamic-page-no-params""> + </LinkAccordion> + <LinkAccordion href=""/dynamic-page"" id=""to-dynamic-page-no-params""> To Dynamic Page - </Link> - <Link href=""/prefetch-auto/foobar"" id=""to-dynamic-page""> + </LinkAccordion> + <LinkAccordion href=""/prefetch-auto/foobar"" id=""to-dynamic-page""> To Dynamic Slug Page - </Link> + </LinkAccordion> <a href=""/static-page"" id=""to-static-page-hard""> Hard Nav to Static Page </a>"
vercel/next.js,9c053332ccbc17220982f169b94c7cbdca0a648e,Zack Tanner,2025-10-06 19:12:11,"[test]: convert prefetching tests to be segmentCache compatible (#84521)  Refactors some older prefetching tests to be compatible with `clientSegmentCache`. The old tests were too tightly coupled to router implementation details. Some of the ones that don't make sense to convert were removed (for ex  asserting on prefetch cache seeding behavior  or fetch priority of ""high""  as fetch priority is managed differently with the new router).  This refactors the tests to leverage the `act` util from `segment-cache` test suites  and implemented the accordion behavior to more granularly control when prefetches are dispatched. I copied those implementations for now since we don't have a global util for it.",test/e2e/app-dir/app-prefetch/app/static-page-no-prefetch/page.js,6,4,10,"-import Link from 'next/link' +import { LinkAccordion } from '../components/link-accordion' export default async function Page() { return ( <> - <p id=""static-page-no-prefetch"">Static Page No Prefetch</p> + <p id=""static-page-no-prefetch""> + Static Page No Prefetch [prefetch-sentinel] + </p> <p> - <Link href=""/"" id=""to-home""> + <LinkAccordion href=""/"" id=""to-home""> To home - </Link> + </LinkAccordion> </p> </> )"
vercel/next.js,9c053332ccbc17220982f169b94c7cbdca0a648e,Zack Tanner,2025-10-06 19:12:11,"[test]: convert prefetching tests to be segmentCache compatible (#84521)  Refactors some older prefetching tests to be compatible with `clientSegmentCache`. The old tests were too tightly coupled to router implementation details. Some of the ones that don't make sense to convert were removed (for ex  asserting on prefetch cache seeding behavior  or fetch priority of ""high""  as fetch priority is managed differently with the new router).  This refactors the tests to leverage the `act` util from `segment-cache` test suites  and implemented the accordion behavior to more granularly control when prefetches are dispatched. I copied those implementations for now since we don't have a global util for it.",test/e2e/app-dir/app-prefetch/app/static-page/page.js,7,7,14,"-import Link from 'next/link' +import { LinkAccordion } from '../components/link-accordion' import { BackButton } from './back-button' export default async function Page() { return ( <> - <p id=""static-page"">Static Page</p> + <p id=""static-page"">Static Page [prefetch-sentinel]</p> <p> - <Link href=""/"" id=""to-home""> + <LinkAccordion href=""/"" id=""to-home""> To home - </Link> + </LinkAccordion> </p> <p> - <Link href=""/static-page"" prefetch> - To Same Page - </Link> + <LinkAccordion href=""/static-page"" id=""to-same-page""> + To Static Page (self) + </LinkAccordion> </p> <p> <BackButton />"
vercel/next.js,9c053332ccbc17220982f169b94c7cbdca0a648e,Zack Tanner,2025-10-06 19:12:11,"[test]: convert prefetching tests to be segmentCache compatible (#84521)  Refactors some older prefetching tests to be compatible with `clientSegmentCache`. The old tests were too tightly coupled to router implementation details. Some of the ones that don't make sense to convert were removed (for ex  asserting on prefetch cache seeding behavior  or fetch priority of ""high""  as fetch priority is managed differently with the new router).  This refactors the tests to leverage the `act` util from `segment-cache` test suites  and implemented the accordion behavior to more granularly control when prefetches are dispatched. I copied those implementations for now since we don't have a global util for it.",test/e2e/app-dir/app-prefetch/test-utils.ts,108,0,108,+export function createTimeController() { + let fixedTime = Date.now() + + return { + install: (browser) => { + return browser.eval(` + (() => { + const OriginalDate = Date; + const originalSetTimeout = globalThis.setTimeout; + const originalSetInterval = globalThis.setInterval; + const originalClearTimeout = globalThis.clearTimeout; + const originalClearInterval = globalThis.clearInterval; + + let fixedTime = ${fixedTime}; + let timerIdCounter = 1; + const timers = new Map(); + + // Override the Date constructor + globalThis.Date = class extends OriginalDate { + constructor(...args) { + if (args.length === 0) { + super(fixedTime); + } else { + super(...args); + } + } + + static now() { + return fixedTime; + } + }; + + // Preserve static methods + Object.setPrototypeOf(globalThis.Date OriginalDate); + + // Override setTimeout + globalThis.setTimeout = function(callback delay ...args) { + const id = timerIdCounter++; + timers.set(id { + callback + args + fireTime: fixedTime + (delay || 0) + interval: false + }); + return id; + }; + + // Override setInterval + globalThis.setInterval = function(callback delay ...args) { + const id = timerIdCounter++; + timers.set(id { + callback + args + fireTime: fixedTime + (delay || 0) + interval: true + delay: delay || 0 + }); + return id; + }; + + // Override clearTimeout + globalThis.clearTimeout = function(id) { + timers.delete(id); + }; + + // Override clearInterval + globalThis.clearInterval = function(id) { + timers.delete(id); + }; + + // Add method to advance time + globalThis.__advanceTime = (ms) => { + fixedTime += ms; + + // Fire any timers that should have fired + const toFire = []; + for (const [id timer] of timers.entries()) { + if (timer.fireTime <= fixedTime) { + toFire.push({ id timer }); + } + } + + for (const { id timer } of toFire) { + try { + timer.callback(...timer.args); + } catch (e) { + console.error('Timer callback error:' e); + } + + if (timer.interval) { + // Reschedule interval timer + timer.fireTime = fixedTime + timer.delay; + } else { + // Remove one-time timer + timers.delete(id); + } + } + }; + })(); + `) + } + + advance: async (browser ms: number) => { + fixedTime += ms + await browser.eval(`globalThis.__advanceTime(${ms})`) + } + } +}
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-client.production.js,5,5,10,"ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (target) { }; var isomorphicReactPackageVersion$jscomp$inline_2217 = React.version; if ( - ""19.3.0-experimental-4fdf7cf2-20251003"" !== + ""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion$jscomp$inline_2217 ) throw Error( formatProdErrorMessage( 527 isomorphicReactPackageVersion$jscomp$inline_2217 - ""19.3.0-experimental-4fdf7cf2-20251003"" + ""19.3.0-experimental-c7862584-20251006"" ) ); ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { }; var internals$jscomp$inline_2914 = { bundleType: 0 - version: ""19.3.0-experimental-4fdf7cf2-20251003"" + version: ""19.3.0-experimental-c7862584-20251006"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-4fdf7cf2-20251003"" + reconcilerVersion: ""19.3.0-experimental-c7862584-20251006"" }; if (""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) { var hook$jscomp$inline_2915 = __REACT_DEVTOOLS_GLOBAL_HOOK__; exports.hydrateRoot = function (container initialChildren options) { listenToAllSupportedEvents(container); return new ReactDOMHydrationRoot(initialChildren); }; -exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; +exports.version = ""19.3.0-experimental-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-profiling.profiling.js,5,5,10,"ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (target) { }; var isomorphicReactPackageVersion$jscomp$inline_2513 = React.version; if ( - ""19.3.0-experimental-4fdf7cf2-20251003"" !== + ""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion$jscomp$inline_2513 ) throw Error( formatProdErrorMessage( 527 isomorphicReactPackageVersion$jscomp$inline_2513 - ""19.3.0-experimental-4fdf7cf2-20251003"" + ""19.3.0-experimental-c7862584-20251006"" ) ); ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { }; var internals$jscomp$inline_3223 = { bundleType: 0 - version: ""19.3.0-experimental-4fdf7cf2-20251003"" + version: ""19.3.0-experimental-c7862584-20251006"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-4fdf7cf2-20251003"" + reconcilerVersion: ""19.3.0-experimental-c7862584-20251006"" }; if (""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) { var hook$jscomp$inline_3224 = __REACT_DEVTOOLS_GLOBAL_HOOK__; exports.useFormState = function (action initialState permalink) { exports.useFormStatus = function () { return ReactSharedInternals.H.useHostTransitionStatus(); }; -exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; +exports.version = ""19.3.0-experimental-c7862584-20251006""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server-legacy.browser.development.js,1,1,2,"'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToReadableStream"" which supports Suspense on the server' ); }; - exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; + exports.version = ""19.3.0-experimental-c7862584-20251006""; })();"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server-legacy.browser.production.js,1,1,2,"exports.renderToString = function (children options) { 'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToReadableStream"" which supports Suspense on the server' ); }; -exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; +exports.version = ""19.3.0-experimental-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server-legacy.node.development.js,1,1,2,"'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToPipeableStream"" which supports Suspense on the server' ); }; - exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; + exports.version = ""19.3.0-experimental-c7862584-20251006""; })();"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server-legacy.node.production.js,1,1,2,"exports.renderToString = function (children options) { 'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToPipeableStream"" which supports Suspense on the server' ); }; -exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; +exports.version = ""19.3.0-experimental-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.browser.development.js,3,3,6,"} function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); } var React = require(""next/dist/compiled/react-experimental"") startWork(request); }); }; - exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; + exports.version = ""19.3.0-experimental-c7862584-20251006""; })();"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.browser.production.js,3,3,6,"function getPostponedState(request) { } function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion) throw Error( formatProdErrorMessage( 527 isomorphicReactPackageVersion - ""19.3.0-experimental-4fdf7cf2-20251003"" + ""19.3.0-experimental-c7862584-20251006"" ) ); } exports.resumeAndPrerender = function (children postponedState options) { startWork(request); }); }; -exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; +exports.version = ""19.3.0-experimental-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.bun.production.js,3,3,6,"function addToReplayParent(node parentKeyPath trackedPostpones) { } var isomorphicReactPackageVersion$jscomp$inline_871 = React.version; if ( - ""19.3.0-experimental-4fdf7cf2-20251003"" !== + ""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion$jscomp$inline_871 ) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion$jscomp$inline_871 + - ""\n - react-dom: 19.3.0-experimental-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); exports.renderToReadableStream = function (children options) { return new Promise(function (resolve reject) { exports.renderToReadableStream = function (children options) { startWork(request); }); }; -exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; +exports.version = ""19.3.0-experimental-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.edge.development.js,3,3,6,"} function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); } var React = require(""next/dist/compiled/react-experimental"") startWork(request); }); }; - exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; + exports.version = ""19.3.0-experimental-c7862584-20251006""; })();"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.edge.production.js,3,3,6,"function getPostponedState(request) { } function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); } ensureCorrectIsomorphicReactVersion(); exports.resumeAndPrerender = function (children postponedState options) { startWork(request); }); }; -exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; +exports.version = ""19.3.0-experimental-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.node.development.js,3,3,6,"} function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); } function createDrainHandler(destination request) { } }; }; - exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; + exports.version = ""19.3.0-experimental-c7862584-20251006""; })();"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.node.production.js,3,3,6,"function getPostponedState(request) { } function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); } ensureCorrectIsomorphicReactVersion(); exports.resumeToPipeableStream = function (children postponedState options) { } }; }; -exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; +exports.version = ""19.3.0-experimental-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-unstable_testing.production.js,5,5,10,"ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (target) { }; var isomorphicReactPackageVersion$jscomp$inline_2246 = React.version; if ( - ""19.3.0-experimental-4fdf7cf2-20251003"" !== + ""19.3.0-experimental-c7862584-20251006"" !== isomorphicReactPackageVersion$jscomp$inline_2246 ) throw Error( formatProdErrorMessage( 527 isomorphicReactPackageVersion$jscomp$inline_2246 - ""19.3.0-experimental-4fdf7cf2-20251003"" + ""19.3.0-experimental-c7862584-20251006"" ) ); ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { }; var internals$jscomp$inline_2948 = { bundleType: 0 - version: ""19.3.0-experimental-4fdf7cf2-20251003"" + version: ""19.3.0-experimental-c7862584-20251006"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-4fdf7cf2-20251003"" + reconcilerVersion: ""19.3.0-experimental-c7862584-20251006"" }; if (""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) { var hook$jscomp$inline_2949 = __REACT_DEVTOOLS_GLOBAL_HOOK__; exports.observeVisibleRects = function ( } }; }; -exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; +exports.version = ""19.3.0-experimental-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom.development.js,1,1,2,"exports.useFormStatus = function () { return resolveDispatcher().useHostTransitionStatus(); }; - exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; + exports.version = ""19.3.0-experimental-c7862584-20251006""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom.production.js,1,1,2,"exports.useFormState = function (action initialState permalink) { exports.useFormStatus = function () { return ReactSharedInternals.H.useHostTransitionStatus(); }; -exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; +exports.version = ""19.3.0-experimental-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom.react-server.development.js,1,1,2,"})) : Internals.d.m(href)); }; - exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; + exports.version = ""19.3.0-experimental-c7862584-20251006""; })();"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom.react-server.production.js,1,1,2,"exports.preloadModule = function (href options) { }); } else Internals.d.m(href); }; -exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; +exports.version = ""19.3.0-experimental-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/package.json,2,2,4,"""./package.json"": ""./package.json"" } ""dependencies"": { - ""scheduler"": ""0.0.0-experimental-4fdf7cf2-20251003"" + ""scheduler"": ""0.0.0-experimental-c7862584-20251006"" } ""peerDependencies"": { - ""react"": ""0.0.0-experimental-4fdf7cf2-20251003"" + ""react"": ""0.0.0-experimental-c7862584-20251006"" } ""browser"": { ""./server.js"": ""./server.browser.js"""
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-client.production.js,5,5,10,"ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (target) { }; var isomorphicReactPackageVersion$jscomp$inline_1840 = React.version; if ( - ""19.3.0-canary-4fdf7cf2-20251003"" !== + ""19.3.0-canary-c7862584-20251006"" !== isomorphicReactPackageVersion$jscomp$inline_1840 ) throw Error( formatProdErrorMessage( 527 isomorphicReactPackageVersion$jscomp$inline_1840 - ""19.3.0-canary-4fdf7cf2-20251003"" + ""19.3.0-canary-c7862584-20251006"" ) ); ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { }; var internals$jscomp$inline_2347 = { bundleType: 0 - version: ""19.3.0-canary-4fdf7cf2-20251003"" + version: ""19.3.0-canary-c7862584-20251006"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-canary-4fdf7cf2-20251003"" + reconcilerVersion: ""19.3.0-canary-c7862584-20251006"" }; if (""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) { var hook$jscomp$inline_2348 = __REACT_DEVTOOLS_GLOBAL_HOOK__; exports.hydrateRoot = function (container initialChildren options) { listenToAllSupportedEvents(container); return new ReactDOMHydrationRoot(initialChildren); }; -exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; +exports.version = ""19.3.0-canary-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-profiling.profiling.js,5,5,10,"ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (target) { }; var isomorphicReactPackageVersion$jscomp$inline_2138 = React.version; if ( - ""19.3.0-canary-4fdf7cf2-20251003"" !== + ""19.3.0-canary-c7862584-20251006"" !== isomorphicReactPackageVersion$jscomp$inline_2138 ) throw Error( formatProdErrorMessage( 527 isomorphicReactPackageVersion$jscomp$inline_2138 - ""19.3.0-canary-4fdf7cf2-20251003"" + ""19.3.0-canary-c7862584-20251006"" ) ); ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { }; var internals$jscomp$inline_2658 = { bundleType: 0 - version: ""19.3.0-canary-4fdf7cf2-20251003"" + version: ""19.3.0-canary-c7862584-20251006"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-canary-4fdf7cf2-20251003"" + reconcilerVersion: ""19.3.0-canary-c7862584-20251006"" }; if (""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) { var hook$jscomp$inline_2659 = __REACT_DEVTOOLS_GLOBAL_HOOK__; exports.useFormState = function (action initialState permalink) { exports.useFormStatus = function () { return ReactSharedInternals.H.useHostTransitionStatus(); }; -exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; +exports.version = ""19.3.0-canary-c7862584-20251006""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server-legacy.browser.development.js,1,1,2,"'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToReadableStream"" which supports Suspense on the server' ); }; - exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; + exports.version = ""19.3.0-canary-c7862584-20251006""; })();"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server-legacy.browser.production.js,1,1,2,"exports.renderToString = function (children options) { 'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToReadableStream"" which supports Suspense on the server' ); }; -exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; +exports.version = ""19.3.0-canary-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server-legacy.node.development.js,1,1,2,"'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToPipeableStream"" which supports Suspense on the server' ); }; - exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; + exports.version = ""19.3.0-canary-c7862584-20251006""; })();"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server-legacy.node.production.js,1,1,2,"exports.renderToString = function (children options) { 'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToPipeableStream"" which supports Suspense on the server' ); }; -exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; +exports.version = ""19.3.0-canary-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server.browser.development.js,3,3,6,"} function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-canary-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-canary-c7862584-20251006"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-canary-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-canary-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); } var React = require(""next/dist/compiled/react"") startWork(request); }); }; - exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; + exports.version = ""19.3.0-canary-c7862584-20251006""; })();"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server.browser.production.js,3,3,6,"function getPostponedState(request) { } function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-canary-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-canary-c7862584-20251006"" !== isomorphicReactPackageVersion) throw Error( formatProdErrorMessage( 527 isomorphicReactPackageVersion - ""19.3.0-canary-4fdf7cf2-20251003"" + ""19.3.0-canary-c7862584-20251006"" ) ); } exports.resumeAndPrerender = function (children postponedState options) { startWork(request); }); }; -exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; +exports.version = ""19.3.0-canary-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server.bun.production.js,3,3,6,"function addToReplayParent(node parentKeyPath trackedPostpones) { } var isomorphicReactPackageVersion$jscomp$inline_821 = React.version; if ( - ""19.3.0-canary-4fdf7cf2-20251003"" !== + ""19.3.0-canary-c7862584-20251006"" !== isomorphicReactPackageVersion$jscomp$inline_821 ) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion$jscomp$inline_821 + - ""\n - react-dom: 19.3.0-canary-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-canary-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); exports.renderToReadableStream = function (children options) { return new Promise(function (resolve reject) { exports.renderToReadableStream = function (children options) { startWork(request); }); }; -exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; +exports.version = ""19.3.0-canary-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server.edge.development.js,3,3,6,"} function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-canary-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-canary-c7862584-20251006"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-canary-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-canary-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); } var React = require(""next/dist/compiled/react"") startWork(request); }); }; - exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; + exports.version = ""19.3.0-canary-c7862584-20251006""; })();"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server.edge.production.js,3,3,6,"function getPostponedState(request) { } function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-canary-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-canary-c7862584-20251006"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-canary-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-canary-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); } ensureCorrectIsomorphicReactVersion(); exports.resumeAndPrerender = function (children postponedState options) { startWork(request); }); }; -exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; +exports.version = ""19.3.0-canary-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server.node.development.js,3,3,6,"} function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-canary-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-canary-c7862584-20251006"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-canary-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-canary-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); } function createDrainHandler(destination request) { } }; }; - exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; + exports.version = ""19.3.0-canary-c7862584-20251006""; })();"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server.node.production.js,3,3,6,"function getPostponedState(request) { } function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-canary-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-canary-c7862584-20251006"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-canary-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-canary-c7862584-20251006\nLearn more: https://react.dev/warnings/version-mismatch"") ); } ensureCorrectIsomorphicReactVersion(); exports.resumeToPipeableStream = function (children postponedState options) { } }; }; -exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; +exports.version = ""19.3.0-canary-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom.development.js,1,1,2,"exports.useFormStatus = function () { return resolveDispatcher().useHostTransitionStatus(); }; - exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; + exports.version = ""19.3.0-canary-c7862584-20251006""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom.production.js,1,1,2,"exports.useFormState = function (action initialState permalink) { exports.useFormStatus = function () { return ReactSharedInternals.H.useHostTransitionStatus(); }; -exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; +exports.version = ""19.3.0-canary-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom.react-server.development.js,1,1,2,"})) : Internals.d.m(href)); }; - exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; + exports.version = ""19.3.0-canary-c7862584-20251006""; })();"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom.react-server.production.js,1,1,2,"exports.preloadModule = function (href options) { }); } else Internals.d.m(href); }; -exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; +exports.version = ""19.3.0-canary-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/package.json,2,2,4,"""./package.json"": ""./package.json"" } ""dependencies"": { - ""scheduler"": ""0.28.0-canary-4fdf7cf2-20251003"" + ""scheduler"": ""0.28.0-canary-c7862584-20251006"" } ""peerDependencies"": { - ""react"": ""19.3.0-canary-4fdf7cf2-20251003"" + ""react"": ""19.3.0-canary-c7862584-20251006"" } ""browser"": { ""./server.js"": ""./server.browser.js"""
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-experimental/cjs/react.development.js,1,1,2,"exports.useTransition = function () { return resolveDispatcher().useTransition(); }; - exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; + exports.version = ""19.3.0-experimental-c7862584-20251006""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-experimental/cjs/react.production.js,1,1,2,"exports.useSyncExternalStore = function ( exports.useTransition = function () { return ReactSharedInternals.H.useTransition(); }; -exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; +exports.version = ""19.3.0-experimental-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-experimental/cjs/react.react-server.development.js,1,1,2,"exports.useMemo = function (create deps) { return resolveDispatcher().useMemo(create deps); }; - exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; + exports.version = ""19.3.0-experimental-c7862584-20251006""; })();"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-experimental/cjs/react.react-server.production.js,1,1,2,"exports.useId = function () { exports.useMemo = function (create deps) { return ReactSharedInternals.H.useMemo(create deps); }; -exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; +exports.version = ""19.3.0-experimental-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-is/package.json,1,1,2,"{ ""name"": ""react-is"" - ""version"": ""19.3.0-canary-4fdf7cf2-20251003"" + ""version"": ""19.3.0-canary-c7862584-20251006"" ""description"": ""Brand checking of React Elements."" ""main"": ""index.js"" ""sideEffects"": false"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-turbopack-experimental/package.json,2,2,4,"""neo-async"": ""^2.6.1"" } ""peerDependencies"": { - ""react"": ""0.0.0-experimental-4fdf7cf2-20251003"" - ""react-dom"": ""0.0.0-experimental-4fdf7cf2-20251003"" + ""react"": ""0.0.0-experimental-c7862584-20251006"" + ""react-dom"": ""0.0.0-experimental-c7862584-20251006"" } } \ No newline at end of file"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-turbopack/package.json,2,2,4,"""neo-async"": ""^2.6.1"" } ""peerDependencies"": { - ""react"": ""19.3.0-canary-4fdf7cf2-20251003"" - ""react-dom"": ""19.3.0-canary-4fdf7cf2-20251003"" + ""react"": ""19.3.0-canary-c7862584-20251006"" + ""react-dom"": ""19.3.0-canary-c7862584-20251006"" } } \ No newline at end of file"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack-experimental/package.json,2,2,4,"""webpack-sources"": ""^3.2.0"" } ""peerDependencies"": { - ""react"": ""0.0.0-experimental-4fdf7cf2-20251003"" - ""react-dom"": ""0.0.0-experimental-4fdf7cf2-20251003"" + ""react"": ""0.0.0-experimental-c7862584-20251006"" + ""react-dom"": ""0.0.0-experimental-c7862584-20251006"" ""webpack"": ""^5.59.0"" } } \ No newline at end of file"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack/package.json,2,2,4,"""webpack-sources"": ""^3.2.0"" } ""peerDependencies"": { - ""react"": ""19.3.0-canary-4fdf7cf2-20251003"" - ""react-dom"": ""19.3.0-canary-4fdf7cf2-20251003"" + ""react"": ""19.3.0-canary-c7862584-20251006"" + ""react-dom"": ""19.3.0-canary-c7862584-20251006"" ""webpack"": ""^5.59.0"" } } \ No newline at end of file"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react/cjs/react.development.js,1,1,2,"exports.useTransition = function () { return resolveDispatcher().useTransition(); }; - exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; + exports.version = ""19.3.0-canary-c7862584-20251006""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react/cjs/react.production.js,1,1,2,"exports.useSyncExternalStore = function ( exports.useTransition = function () { return ReactSharedInternals.H.useTransition(); }; -exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; +exports.version = ""19.3.0-canary-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react/cjs/react.react-server.development.js,1,1,2,"exports.useMemo = function (create deps) { return resolveDispatcher().useMemo(create deps); }; - exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; + exports.version = ""19.3.0-canary-c7862584-20251006""; })();"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react/cjs/react.react-server.production.js,1,1,2,"exports.useId = function () { exports.useMemo = function (create deps) { return ReactSharedInternals.H.useMemo(create deps); }; -exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; +exports.version = ""19.3.0-canary-c7862584-20251006"";"
vercel/next.js,b94e9be0f4e9463eef26032cb88abb0752973d4b,nextjs-bot,2025-10-06 19:11:27,Upgrade React from `4fdf7cf2-20251003` to `c7862584-20251006` (#84573)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/unistore/unistore.js,1,1,2,"-(()=>{var t={742:t=>{function n(t i){for(var _ in i)t[_]=i[_];return t}t.exports=function(t){var i=[];function u(t){for(var _=[] a=0;a<i.length;a++)i[a]===t?t=null:_.push(i[a]);i=_}function e(_ a f){t=a?_:n(n({} t) _);for(var o=i c=0;c<o.length;c++)o[c](t f)}return t=t||{} {action:function(i){function r(t){e(t !1 i)}return function(){for(var _=arguments a=[t] f=0;f<arguments.length;f++)a.push(_[f]);var o=i.apply(this a);if(null!=o)return o.then?o.then(r):r(o)}} setState:e subscribe:function(t){return i.push(t) function(){u(t)}} unsubscribe:u getState:function(){return t}}}}};var i={};function __nccwpck_require__(_){var a=i[_];if(a!==undefined){return a.exports}var f=i[_]={exports:{}};var o=true;try{t[_](f f.exports __nccwpck_require__);o=false}finally{if(o)delete i[_]}return f.exports}if(typeof __nccwpck_require__!==""undefined"")__nccwpck_require__.ab=__dirname+""/"";var _=__nccwpck_require__(742);module.exports=_})(); \ No newline at end of file +(()=>{var t={232:t=>{function n(t i){for(var _ in i)t[_]=i[_];return t}t.exports=function(t){var i=[];function u(t){for(var _=[] a=0;a<i.length;a++)i[a]===t?t=null:_.push(i[a]);i=_}function e(_ a f){t=a?_:n(n({} t) _);for(var o=i c=0;c<o.length;c++)o[c](t f)}return t=t||{} {action:function(i){function r(t){e(t !1 i)}return function(){for(var _=arguments a=[t] f=0;f<arguments.length;f++)a.push(_[f]);var o=i.apply(this a);if(null!=o)return o.then?o.then(r):r(o)}} setState:e subscribe:function(t){return i.push(t) function(){u(t)}} unsubscribe:u getState:function(){return t}}}}};var i={};function __nccwpck_require__(_){var a=i[_];if(a!==undefined){return a.exports}var f=i[_]={exports:{}};var o=true;try{t[_](f f.exports __nccwpck_require__);o=false}finally{if(o)delete i[_]}return f.exports}if(typeof __nccwpck_require__!==""undefined"")__nccwpck_require__.ab=__dirname+""/"";var _=__nccwpck_require__(232);module.exports=_})(); \ No newline at end of file"
vercel/next.js,84cdf573690171949895ba2d10231b239dcfb224,Jiwon Choi,2025-10-06 18:52:17,CI: Enable `experimental.isolatedDevBuild` for `test-unit` (#84559)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev ([link](https://github.com/vercel/next.js/pull/84562)) 2. test-prod ([link](https://github.com/vercel/next.js/pull/84556)) 3. test-integration ([link](https://github.com/vercel/next.js/pull/84558)) 4. test-unit (here) 5. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,.github/workflows/build_and_test.yml,3,1,4,jobs: uses: ./.github/workflows/build_reusable.yml with: nodeVersion: ${{ matrix.node }} - afterBuild: node run-tests.js --type unit + afterBuild: | + export __NEXT_EXPERIMENTAL_ISOLATED_DEV_BUILD=true + node run-tests.js --type unit stepName: 'test-unit-${{ matrix.node }}' secrets: inherit
vercel/next.js,84cdf573690171949895ba2d10231b239dcfb224,Jiwon Choi,2025-10-06 18:52:17,CI: Enable `experimental.isolatedDevBuild` for `test-unit` (#84559)  Enabling `experimental.isolatedDevBuild` required many changes to the current workflow  so we will incrementally roll out to the tests.  1. ~~test-experimental-dev ([link](https://github.com/vercel/next.js/pull/84099))~~ 2. test-dev ([link](https://github.com/vercel/next.js/pull/84562)) 2. test-prod ([link](https://github.com/vercel/next.js/pull/84556)) 3. test-integration ([link](https://github.com/vercel/next.js/pull/84558)) 4. test-unit (here) 5. Enable by default  remove the flag  and update the rest  x-ref: https://github.com/vercel/next.js/pull/84043,test/unit/isolated/config.test.ts,6,1,7,"describe('config' () => { it('Should assign object defaults deeply to user config' async () => { const config = await loadConfig(PHASE_DEVELOPMENT_SERVER pathToConfigFn) - expect(config.distDir).toEqual('.next') + // In isolatedDevBuild the default distDir is "".next/dev"" during PHASE_DEVELOPMENT_SERVER. + if (process.env.__NEXT_EXPERIMENTAL_ISOLATED_DEV_BUILD === 'true') { + expect(config.distDir).toEqual('.next/dev') + } else { + expect(config.distDir).toEqual('.next') + } expect(config.onDemandEntries.maxInactiveAge).toBeDefined() })"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-client.development.js,5,5,10,"}; (function () { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-85c427d8-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-85c427d8-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") ); })(); (""function"" === typeof Map && !(function () { var internals = { bundleType: 1 - version: ""19.3.0-experimental-85c427d8-20251003"" + version: ""19.3.0-experimental-4fdf7cf2-20251003"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-85c427d8-20251003"" + reconcilerVersion: ""19.3.0-experimental-4fdf7cf2-20251003"" }; internals.overrideHookState = overrideHookState; internals.overrideHookStateDeletePath = overrideHookStateDeletePath; listenToAllSupportedEvents(container); return new ReactDOMHydrationRoot(initialChildren); }; - exports.version = ""19.3.0-experimental-85c427d8-20251003""; + exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-client.production.js,5,5,10,"ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (target) { }; var isomorphicReactPackageVersion$jscomp$inline_2217 = React.version; if ( - ""19.3.0-experimental-85c427d8-20251003"" !== + ""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion$jscomp$inline_2217 ) throw Error( formatProdErrorMessage( 527 isomorphicReactPackageVersion$jscomp$inline_2217 - ""19.3.0-experimental-85c427d8-20251003"" + ""19.3.0-experimental-4fdf7cf2-20251003"" ) ); ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { }; var internals$jscomp$inline_2914 = { bundleType: 0 - version: ""19.3.0-experimental-85c427d8-20251003"" + version: ""19.3.0-experimental-4fdf7cf2-20251003"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-85c427d8-20251003"" + reconcilerVersion: ""19.3.0-experimental-4fdf7cf2-20251003"" }; if (""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) { var hook$jscomp$inline_2915 = __REACT_DEVTOOLS_GLOBAL_HOOK__; exports.hydrateRoot = function (container initialChildren options) { listenToAllSupportedEvents(container); return new ReactDOMHydrationRoot(initialChildren); }; -exports.version = ""19.3.0-experimental-85c427d8-20251003""; +exports.version = ""19.3.0-experimental-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-profiling.development.js,5,5,10,"}; (function () { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-85c427d8-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-85c427d8-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") ); })(); (""function"" === typeof Map && !(function () { var internals = { bundleType: 1 - version: ""19.3.0-experimental-85c427d8-20251003"" + version: ""19.3.0-experimental-4fdf7cf2-20251003"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-85c427d8-20251003"" + reconcilerVersion: ""19.3.0-experimental-4fdf7cf2-20251003"" }; internals.overrideHookState = overrideHookState; internals.overrideHookStateDeletePath = overrideHookStateDeletePath; exports.useFormStatus = function () { return resolveDispatcher().useHostTransitionStatus(); }; - exports.version = ""19.3.0-experimental-85c427d8-20251003""; + exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-profiling.profiling.js,5,5,10,"ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (target) { }; var isomorphicReactPackageVersion$jscomp$inline_2513 = React.version; if ( - ""19.3.0-experimental-85c427d8-20251003"" !== + ""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion$jscomp$inline_2513 ) throw Error( formatProdErrorMessage( 527 isomorphicReactPackageVersion$jscomp$inline_2513 - ""19.3.0-experimental-85c427d8-20251003"" + ""19.3.0-experimental-4fdf7cf2-20251003"" ) ); ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { }; var internals$jscomp$inline_3223 = { bundleType: 0 - version: ""19.3.0-experimental-85c427d8-20251003"" + version: ""19.3.0-experimental-4fdf7cf2-20251003"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-85c427d8-20251003"" + reconcilerVersion: ""19.3.0-experimental-4fdf7cf2-20251003"" }; if (""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) { var hook$jscomp$inline_3224 = __REACT_DEVTOOLS_GLOBAL_HOOK__; exports.useFormState = function (action initialState permalink) { exports.useFormStatus = function () { return ReactSharedInternals.H.useHostTransitionStatus(); }; -exports.version = ""19.3.0-experimental-85c427d8-20251003""; +exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server-legacy.browser.development.js,1,1,2,"'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToReadableStream"" which supports Suspense on the server' ); }; - exports.version = ""19.3.0-experimental-85c427d8-20251003""; + exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; })();"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server-legacy.browser.production.js,1,1,2,"exports.renderToString = function (children options) { 'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToReadableStream"" which supports Suspense on the server' ); }; -exports.version = ""19.3.0-experimental-85c427d8-20251003""; +exports.version = ""19.3.0-experimental-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server-legacy.node.development.js,1,1,2,"'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToPipeableStream"" which supports Suspense on the server' ); }; - exports.version = ""19.3.0-experimental-85c427d8-20251003""; + exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; })();"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server-legacy.node.production.js,1,1,2,"exports.renderToString = function (children options) { 'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToPipeableStream"" which supports Suspense on the server' ); }; -exports.version = ""19.3.0-experimental-85c427d8-20251003""; +exports.version = ""19.3.0-experimental-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.browser.development.js,3,3,6,"} function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-85c427d8-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-85c427d8-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") ); } var React = require(""next/dist/compiled/react-experimental"") startWork(request); }); }; - exports.version = ""19.3.0-experimental-85c427d8-20251003""; + exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; })();"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.browser.production.js,3,3,6,"function getPostponedState(request) { } function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-85c427d8-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) throw Error( formatProdErrorMessage( 527 isomorphicReactPackageVersion - ""19.3.0-experimental-85c427d8-20251003"" + ""19.3.0-experimental-4fdf7cf2-20251003"" ) ); } exports.resumeAndPrerender = function (children postponedState options) { startWork(request); }); }; -exports.version = ""19.3.0-experimental-85c427d8-20251003""; +exports.version = ""19.3.0-experimental-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.bun.production.js,3,3,6,"function addToReplayParent(node parentKeyPath trackedPostpones) { } var isomorphicReactPackageVersion$jscomp$inline_871 = React.version; if ( - ""19.3.0-experimental-85c427d8-20251003"" !== + ""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion$jscomp$inline_871 ) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion$jscomp$inline_871 + - ""\n - react-dom: 19.3.0-experimental-85c427d8-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") ); exports.renderToReadableStream = function (children options) { return new Promise(function (resolve reject) { exports.renderToReadableStream = function (children options) { startWork(request); }); }; -exports.version = ""19.3.0-experimental-85c427d8-20251003""; +exports.version = ""19.3.0-experimental-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.edge.development.js,3,3,6,"} function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-85c427d8-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-85c427d8-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") ); } var React = require(""next/dist/compiled/react-experimental"") startWork(request); }); }; - exports.version = ""19.3.0-experimental-85c427d8-20251003""; + exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; })();"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.edge.production.js,3,3,6,"function getPostponedState(request) { } function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-85c427d8-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-85c427d8-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") ); } ensureCorrectIsomorphicReactVersion(); exports.resumeAndPrerender = function (children postponedState options) { startWork(request); }); }; -exports.version = ""19.3.0-experimental-85c427d8-20251003""; +exports.version = ""19.3.0-experimental-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.node.development.js,3,3,6,"} function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-85c427d8-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-85c427d8-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") ); } function createDrainHandler(destination request) { } }; }; - exports.version = ""19.3.0-experimental-85c427d8-20251003""; + exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; })();"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-server.node.production.js,3,3,6,"function getPostponedState(request) { } function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-85c427d8-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-85c427d8-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") ); } ensureCorrectIsomorphicReactVersion(); exports.resumeToPipeableStream = function (children postponedState options) { } }; }; -exports.version = ""19.3.0-experimental-85c427d8-20251003""; +exports.version = ""19.3.0-experimental-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-unstable_testing.development.js,5,5,10,"}; (function () { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-experimental-85c427d8-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-experimental-85c427d8-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-experimental-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") ); })(); (""function"" === typeof Map && !(function () { var internals = { bundleType: 1 - version: ""19.3.0-experimental-85c427d8-20251003"" + version: ""19.3.0-experimental-4fdf7cf2-20251003"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-85c427d8-20251003"" + reconcilerVersion: ""19.3.0-experimental-4fdf7cf2-20251003"" }; internals.overrideHookState = overrideHookState; internals.overrideHookStateDeletePath = overrideHookStateDeletePath; } }; }; - exports.version = ""19.3.0-experimental-85c427d8-20251003""; + exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; })();"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom-unstable_testing.production.js,5,5,10,"ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (target) { }; var isomorphicReactPackageVersion$jscomp$inline_2246 = React.version; if ( - ""19.3.0-experimental-85c427d8-20251003"" !== + ""19.3.0-experimental-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion$jscomp$inline_2246 ) throw Error( formatProdErrorMessage( 527 isomorphicReactPackageVersion$jscomp$inline_2246 - ""19.3.0-experimental-85c427d8-20251003"" + ""19.3.0-experimental-4fdf7cf2-20251003"" ) ); ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { }; var internals$jscomp$inline_2948 = { bundleType: 0 - version: ""19.3.0-experimental-85c427d8-20251003"" + version: ""19.3.0-experimental-4fdf7cf2-20251003"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-85c427d8-20251003"" + reconcilerVersion: ""19.3.0-experimental-4fdf7cf2-20251003"" }; if (""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) { var hook$jscomp$inline_2949 = __REACT_DEVTOOLS_GLOBAL_HOOK__; exports.observeVisibleRects = function ( } }; }; -exports.version = ""19.3.0-experimental-85c427d8-20251003""; +exports.version = ""19.3.0-experimental-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom.development.js,1,1,2,"exports.useFormStatus = function () { return resolveDispatcher().useHostTransitionStatus(); }; - exports.version = ""19.3.0-experimental-85c427d8-20251003""; + exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom.production.js,1,1,2,"exports.useFormState = function (action initialState permalink) { exports.useFormStatus = function () { return ReactSharedInternals.H.useHostTransitionStatus(); }; -exports.version = ""19.3.0-experimental-85c427d8-20251003""; +exports.version = ""19.3.0-experimental-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom.react-server.development.js,1,1,2,"})) : Internals.d.m(href)); }; - exports.version = ""19.3.0-experimental-85c427d8-20251003""; + exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; })();"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/cjs/react-dom.react-server.production.js,1,1,2,"exports.preloadModule = function (href options) { }); } else Internals.d.m(href); }; -exports.version = ""19.3.0-experimental-85c427d8-20251003""; +exports.version = ""19.3.0-experimental-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom-experimental/package.json,2,2,4,"""./package.json"": ""./package.json"" } ""dependencies"": { - ""scheduler"": ""0.0.0-experimental-85c427d8-20251003"" + ""scheduler"": ""0.0.0-experimental-4fdf7cf2-20251003"" } ""peerDependencies"": { - ""react"": ""0.0.0-experimental-85c427d8-20251003"" + ""react"": ""0.0.0-experimental-4fdf7cf2-20251003"" } ""browser"": { ""./server.js"": ""./server.browser.js"""
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-client.development.js,5,5,10,"}; (function () { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-canary-85c427d8-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-canary-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-canary-85c427d8-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-canary-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") ); })(); (""function"" === typeof Map && !(function () { var internals = { bundleType: 1 - version: ""19.3.0-canary-85c427d8-20251003"" + version: ""19.3.0-canary-4fdf7cf2-20251003"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-canary-85c427d8-20251003"" + reconcilerVersion: ""19.3.0-canary-4fdf7cf2-20251003"" }; internals.overrideHookState = overrideHookState; internals.overrideHookStateDeletePath = overrideHookStateDeletePath; listenToAllSupportedEvents(container); return new ReactDOMHydrationRoot(initialChildren); }; - exports.version = ""19.3.0-canary-85c427d8-20251003""; + exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-client.production.js,5,5,10,"ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (target) { }; var isomorphicReactPackageVersion$jscomp$inline_1840 = React.version; if ( - ""19.3.0-canary-85c427d8-20251003"" !== + ""19.3.0-canary-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion$jscomp$inline_1840 ) throw Error( formatProdErrorMessage( 527 isomorphicReactPackageVersion$jscomp$inline_1840 - ""19.3.0-canary-85c427d8-20251003"" + ""19.3.0-canary-4fdf7cf2-20251003"" ) ); ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { }; var internals$jscomp$inline_2347 = { bundleType: 0 - version: ""19.3.0-canary-85c427d8-20251003"" + version: ""19.3.0-canary-4fdf7cf2-20251003"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-canary-85c427d8-20251003"" + reconcilerVersion: ""19.3.0-canary-4fdf7cf2-20251003"" }; if (""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) { var hook$jscomp$inline_2348 = __REACT_DEVTOOLS_GLOBAL_HOOK__; exports.hydrateRoot = function (container initialChildren options) { listenToAllSupportedEvents(container); return new ReactDOMHydrationRoot(initialChildren); }; -exports.version = ""19.3.0-canary-85c427d8-20251003""; +exports.version = ""19.3.0-canary-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-profiling.development.js,5,5,10,"}; (function () { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-canary-85c427d8-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-canary-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-canary-85c427d8-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-canary-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") ); })(); (""function"" === typeof Map && !(function () { var internals = { bundleType: 1 - version: ""19.3.0-canary-85c427d8-20251003"" + version: ""19.3.0-canary-4fdf7cf2-20251003"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-canary-85c427d8-20251003"" + reconcilerVersion: ""19.3.0-canary-4fdf7cf2-20251003"" }; internals.overrideHookState = overrideHookState; internals.overrideHookStateDeletePath = overrideHookStateDeletePath; exports.useFormStatus = function () { return resolveDispatcher().useHostTransitionStatus(); }; - exports.version = ""19.3.0-canary-85c427d8-20251003""; + exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-profiling.profiling.js,5,5,10,"ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (target) { }; var isomorphicReactPackageVersion$jscomp$inline_2138 = React.version; if ( - ""19.3.0-canary-85c427d8-20251003"" !== + ""19.3.0-canary-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion$jscomp$inline_2138 ) throw Error( formatProdErrorMessage( 527 isomorphicReactPackageVersion$jscomp$inline_2138 - ""19.3.0-canary-85c427d8-20251003"" + ""19.3.0-canary-4fdf7cf2-20251003"" ) ); ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { ReactDOMSharedInternals.findDOMNode = function (componentOrElement) { }; var internals$jscomp$inline_2658 = { bundleType: 0 - version: ""19.3.0-canary-85c427d8-20251003"" + version: ""19.3.0-canary-4fdf7cf2-20251003"" rendererPackageName: ""react-dom"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-canary-85c427d8-20251003"" + reconcilerVersion: ""19.3.0-canary-4fdf7cf2-20251003"" }; if (""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) { var hook$jscomp$inline_2659 = __REACT_DEVTOOLS_GLOBAL_HOOK__; exports.useFormState = function (action initialState permalink) { exports.useFormStatus = function () { return ReactSharedInternals.H.useHostTransitionStatus(); }; -exports.version = ""19.3.0-canary-85c427d8-20251003""; +exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server-legacy.browser.development.js,1,1,2,"'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToReadableStream"" which supports Suspense on the server' ); }; - exports.version = ""19.3.0-canary-85c427d8-20251003""; + exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; })();"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server-legacy.browser.production.js,1,1,2,"exports.renderToString = function (children options) { 'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToReadableStream"" which supports Suspense on the server' ); }; -exports.version = ""19.3.0-canary-85c427d8-20251003""; +exports.version = ""19.3.0-canary-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server-legacy.node.development.js,1,1,2,"'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToPipeableStream"" which supports Suspense on the server' ); }; - exports.version = ""19.3.0-canary-85c427d8-20251003""; + exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; })();"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server-legacy.node.production.js,1,1,2,"exports.renderToString = function (children options) { 'The server used ""renderToString"" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to ""renderToPipeableStream"" which supports Suspense on the server' ); }; -exports.version = ""19.3.0-canary-85c427d8-20251003""; +exports.version = ""19.3.0-canary-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server.browser.development.js,3,3,6,"} function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-canary-85c427d8-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-canary-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-canary-85c427d8-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-canary-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") ); } var React = require(""next/dist/compiled/react"") startWork(request); }); }; - exports.version = ""19.3.0-canary-85c427d8-20251003""; + exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; })();"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server.browser.production.js,3,3,6,"function getPostponedState(request) { } function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-canary-85c427d8-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-canary-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) throw Error( formatProdErrorMessage( 527 isomorphicReactPackageVersion - ""19.3.0-canary-85c427d8-20251003"" + ""19.3.0-canary-4fdf7cf2-20251003"" ) ); } exports.resumeAndPrerender = function (children postponedState options) { startWork(request); }); }; -exports.version = ""19.3.0-canary-85c427d8-20251003""; +exports.version = ""19.3.0-canary-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server.bun.production.js,3,3,6,"function addToReplayParent(node parentKeyPath trackedPostpones) { } var isomorphicReactPackageVersion$jscomp$inline_821 = React.version; if ( - ""19.3.0-canary-85c427d8-20251003"" !== + ""19.3.0-canary-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion$jscomp$inline_821 ) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion$jscomp$inline_821 + - ""\n - react-dom: 19.3.0-canary-85c427d8-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-canary-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") ); exports.renderToReadableStream = function (children options) { return new Promise(function (resolve reject) { exports.renderToReadableStream = function (children options) { startWork(request); }); }; -exports.version = ""19.3.0-canary-85c427d8-20251003""; +exports.version = ""19.3.0-canary-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server.edge.development.js,3,3,6,"} function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-canary-85c427d8-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-canary-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-canary-85c427d8-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-canary-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") ); } var React = require(""next/dist/compiled/react"") startWork(request); }); }; - exports.version = ""19.3.0-canary-85c427d8-20251003""; + exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; })();"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server.edge.production.js,3,3,6,"function getPostponedState(request) { } function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-canary-85c427d8-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-canary-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-canary-85c427d8-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-canary-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") ); } ensureCorrectIsomorphicReactVersion(); exports.resumeAndPrerender = function (children postponedState options) { startWork(request); }); }; -exports.version = ""19.3.0-canary-85c427d8-20251003""; +exports.version = ""19.3.0-canary-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server.node.development.js,3,3,6,"} function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-canary-85c427d8-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-canary-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-canary-85c427d8-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-canary-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") ); } function createDrainHandler(destination request) { } }; }; - exports.version = ""19.3.0-canary-85c427d8-20251003""; + exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; })();"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom-server.node.production.js,3,3,6,"function getPostponedState(request) { } function ensureCorrectIsomorphicReactVersion() { var isomorphicReactPackageVersion = React.version; - if (""19.3.0-canary-85c427d8-20251003"" !== isomorphicReactPackageVersion) + if (""19.3.0-canary-4fdf7cf2-20251003"" !== isomorphicReactPackageVersion) throw Error( 'Incompatible React versions: The ""react"" and ""react-dom"" packages must have the exact same version. Instead got:\n - react: ' + (isomorphicReactPackageVersion + - ""\n - react-dom: 19.3.0-canary-85c427d8-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") + ""\n - react-dom: 19.3.0-canary-4fdf7cf2-20251003\nLearn more: https://react.dev/warnings/version-mismatch"") ); } ensureCorrectIsomorphicReactVersion(); exports.resumeToPipeableStream = function (children postponedState options) { } }; }; -exports.version = ""19.3.0-canary-85c427d8-20251003""; +exports.version = ""19.3.0-canary-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom.development.js,1,1,2,"exports.useFormStatus = function () { return resolveDispatcher().useHostTransitionStatus(); }; - exports.version = ""19.3.0-canary-85c427d8-20251003""; + exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom.production.js,1,1,2,"exports.useFormState = function (action initialState permalink) { exports.useFormStatus = function () { return ReactSharedInternals.H.useHostTransitionStatus(); }; -exports.version = ""19.3.0-canary-85c427d8-20251003""; +exports.version = ""19.3.0-canary-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom.react-server.development.js,1,1,2,"})) : Internals.d.m(href)); }; - exports.version = ""19.3.0-canary-85c427d8-20251003""; + exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; })();"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/cjs/react-dom.react-server.production.js,1,1,2,"exports.preloadModule = function (href options) { }); } else Internals.d.m(href); }; -exports.version = ""19.3.0-canary-85c427d8-20251003""; +exports.version = ""19.3.0-canary-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-dom/package.json,2,2,4,"""./package.json"": ""./package.json"" } ""dependencies"": { - ""scheduler"": ""0.28.0-canary-85c427d8-20251003"" + ""scheduler"": ""0.28.0-canary-4fdf7cf2-20251003"" } ""peerDependencies"": { - ""react"": ""19.3.0-canary-85c427d8-20251003"" + ""react"": ""19.3.0-canary-4fdf7cf2-20251003"" } ""browser"": { ""./server.js"": ""./server.browser.js"""
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-experimental/cjs/react.development.js,1,1,2,"exports.useTransition = function () { return resolveDispatcher().useTransition(); }; - exports.version = ""19.3.0-experimental-85c427d8-20251003""; + exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-experimental/cjs/react.production.js,1,1,2,"exports.useSyncExternalStore = function ( exports.useTransition = function () { return ReactSharedInternals.H.useTransition(); }; -exports.version = ""19.3.0-experimental-85c427d8-20251003""; +exports.version = ""19.3.0-experimental-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-experimental/cjs/react.react-server.development.js,1,1,2,"exports.useMemo = function (create deps) { return resolveDispatcher().useMemo(create deps); }; - exports.version = ""19.3.0-experimental-85c427d8-20251003""; + exports.version = ""19.3.0-experimental-4fdf7cf2-20251003""; })();"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-experimental/cjs/react.react-server.production.js,1,1,2,"exports.useId = function () { exports.useMemo = function (create deps) { return ReactSharedInternals.H.useMemo(create deps); }; -exports.version = ""19.3.0-experimental-85c427d8-20251003""; +exports.version = ""19.3.0-experimental-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-is/package.json,1,1,2,"{ ""name"": ""react-is"" - ""version"": ""19.3.0-canary-85c427d8-20251003"" + ""version"": ""19.3.0-canary-4fdf7cf2-20251003"" ""description"": ""Brand checking of React Elements."" ""main"": ""index.js"" ""sideEffects"": false"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-turbopack-experimental/cjs/react-server-dom-turbopack-client.browser.development.js,2,2,4,"return hook.checkDCE ? !0 : !1; })({ bundleType: 1 - version: ""19.3.0-experimental-85c427d8-20251003"" + version: ""19.3.0-experimental-4fdf7cf2-20251003"" rendererPackageName: ""react-server-dom-turbopack"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-85c427d8-20251003"" + reconcilerVersion: ""19.3.0-experimental-4fdf7cf2-20251003"" getCurrentComponentInfo: function () { return currentOwnerInDEV; }"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-turbopack-experimental/package.json,2,2,4,"""neo-async"": ""^2.6.1"" } ""peerDependencies"": { - ""react"": ""0.0.0-experimental-85c427d8-20251003"" - ""react-dom"": ""0.0.0-experimental-85c427d8-20251003"" + ""react"": ""0.0.0-experimental-4fdf7cf2-20251003"" + ""react-dom"": ""0.0.0-experimental-4fdf7cf2-20251003"" } } \ No newline at end of file"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-turbopack/cjs/react-server-dom-turbopack-client.browser.development.js,2,2,4,"return hook.checkDCE ? !0 : !1; })({ bundleType: 1 - version: ""19.3.0-canary-85c427d8-20251003"" + version: ""19.3.0-canary-4fdf7cf2-20251003"" rendererPackageName: ""react-server-dom-turbopack"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-canary-85c427d8-20251003"" + reconcilerVersion: ""19.3.0-canary-4fdf7cf2-20251003"" getCurrentComponentInfo: function () { return currentOwnerInDEV; }"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-turbopack/package.json,2,2,4,"""neo-async"": ""^2.6.1"" } ""peerDependencies"": { - ""react"": ""19.3.0-canary-85c427d8-20251003"" - ""react-dom"": ""19.3.0-canary-85c427d8-20251003"" + ""react"": ""19.3.0-canary-4fdf7cf2-20251003"" + ""react-dom"": ""19.3.0-canary-4fdf7cf2-20251003"" } } \ No newline at end of file"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack-experimental/cjs/react-server-dom-webpack-client.browser.development.js,2,2,4,"return hook.checkDCE ? !0 : !1; })({ bundleType: 1 - version: ""19.3.0-experimental-85c427d8-20251003"" + version: ""19.3.0-experimental-4fdf7cf2-20251003"" rendererPackageName: ""react-server-dom-webpack"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-experimental-85c427d8-20251003"" + reconcilerVersion: ""19.3.0-experimental-4fdf7cf2-20251003"" getCurrentComponentInfo: function () { return currentOwnerInDEV; }"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack-experimental/package.json,2,2,4,"""webpack-sources"": ""^3.2.0"" } ""peerDependencies"": { - ""react"": ""0.0.0-experimental-85c427d8-20251003"" - ""react-dom"": ""0.0.0-experimental-85c427d8-20251003"" + ""react"": ""0.0.0-experimental-4fdf7cf2-20251003"" + ""react-dom"": ""0.0.0-experimental-4fdf7cf2-20251003"" ""webpack"": ""^5.59.0"" } } \ No newline at end of file"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js,2,2,4,"return hook.checkDCE ? !0 : !1; })({ bundleType: 1 - version: ""19.3.0-canary-85c427d8-20251003"" + version: ""19.3.0-canary-4fdf7cf2-20251003"" rendererPackageName: ""react-server-dom-webpack"" currentDispatcherRef: ReactSharedInternals - reconcilerVersion: ""19.3.0-canary-85c427d8-20251003"" + reconcilerVersion: ""19.3.0-canary-4fdf7cf2-20251003"" getCurrentComponentInfo: function () { return currentOwnerInDEV; }"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react-server-dom-webpack/package.json,2,2,4,"""webpack-sources"": ""^3.2.0"" } ""peerDependencies"": { - ""react"": ""19.3.0-canary-85c427d8-20251003"" - ""react-dom"": ""19.3.0-canary-85c427d8-20251003"" + ""react"": ""19.3.0-canary-4fdf7cf2-20251003"" + ""react-dom"": ""19.3.0-canary-4fdf7cf2-20251003"" ""webpack"": ""^5.59.0"" } } \ No newline at end of file"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react/cjs/react.development.js,1,1,2,"exports.useTransition = function () { return resolveDispatcher().useTransition(); }; - exports.version = ""19.3.0-canary-85c427d8-20251003""; + exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; ""undefined"" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && ""function"" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react/cjs/react.production.js,1,1,2,"exports.useSyncExternalStore = function ( exports.useTransition = function () { return ReactSharedInternals.H.useTransition(); }; -exports.version = ""19.3.0-canary-85c427d8-20251003""; +exports.version = ""19.3.0-canary-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react/cjs/react.react-server.development.js,1,1,2,"exports.useMemo = function (create deps) { return resolveDispatcher().useMemo(create deps); }; - exports.version = ""19.3.0-canary-85c427d8-20251003""; + exports.version = ""19.3.0-canary-4fdf7cf2-20251003""; })();"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/react/cjs/react.react-server.production.js,1,1,2,"exports.useId = function () { exports.useMemo = function (create deps) { return ReactSharedInternals.H.useMemo(create deps); }; -exports.version = ""19.3.0-canary-85c427d8-20251003""; +exports.version = ""19.3.0-canary-4fdf7cf2-20251003"";"
vercel/next.js,24a046f46677f84f542532540e8f593607d59cb8,nextjs-bot,2025-10-06 18:08:06,Upgrade React from `85c427d8-20251003` to `4fdf7cf2-20251003` (#84499)  Co-authored-by: Sebastian Sebbie Silbermann <sebastian.silbermann@vercel.com>,packages/next/src/compiled/unistore/unistore.js,1,1,2,"-(()=>{var t={329:t=>{function n(t i){for(var _ in i)t[_]=i[_];return t}t.exports=function(t){var i=[];function u(t){for(var _=[] a=0;a<i.length;a++)i[a]===t?t=null:_.push(i[a]);i=_}function e(_ a f){t=a?_:n(n({} t) _);for(var o=i c=0;c<o.length;c++)o[c](t f)}return t=t||{} {action:function(i){function r(t){e(t !1 i)}return function(){for(var _=arguments a=[t] f=0;f<arguments.length;f++)a.push(_[f]);var o=i.apply(this a);if(null!=o)return o.then?o.then(r):r(o)}} setState:e subscribe:function(t){return i.push(t) function(){u(t)}} unsubscribe:u getState:function(){return t}}}}};var i={};function __nccwpck_require__(_){var a=i[_];if(a!==undefined){return a.exports}var f=i[_]={exports:{}};var o=true;try{t[_](f f.exports __nccwpck_require__);o=false}finally{if(o)delete i[_]}return f.exports}if(typeof __nccwpck_require__!==""undefined"")__nccwpck_require__.ab=__dirname+""/"";var _=__nccwpck_require__(329);module.exports=_})(); \ No newline at end of file +(()=>{var t={742:t=>{function n(t i){for(var _ in i)t[_]=i[_];return t}t.exports=function(t){var i=[];function u(t){for(var _=[] a=0;a<i.length;a++)i[a]===t?t=null:_.push(i[a]);i=_}function e(_ a f){t=a?_:n(n({} t) _);for(var o=i c=0;c<o.length;c++)o[c](t f)}return t=t||{} {action:function(i){function r(t){e(t !1 i)}return function(){for(var _=arguments a=[t] f=0;f<arguments.length;f++)a.push(_[f]);var o=i.apply(this a);if(null!=o)return o.then?o.then(r):r(o)}} setState:e subscribe:function(t){return i.push(t) function(){u(t)}} unsubscribe:u getState:function(){return t}}}}};var i={};function __nccwpck_require__(_){var a=i[_];if(a!==undefined){return a.exports}var f=i[_]={exports:{}};var o=true;try{t[_](f f.exports __nccwpck_require__);o=false}finally{if(o)delete i[_]}return f.exports}if(typeof __nccwpck_require__!==""undefined"")__nccwpck_require__.ab=__dirname+""/"";var _=__nccwpck_require__(742);module.exports=_})(); \ No newline at end of file"
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,errors/invalid-prefetch-configuration.mdx,31,0,31,"+--- +title: Invalid Prefetch Configuration +--- + +## Why This Message Occurred + +You provided an invalid configuration for `export const unstable_prefetch` in a Layout or Page file. + +### Example of Correct Usage + +#### Static Prefetching + +```tsx filename=""app/.../layout.tsx"" +export const unstable_prefetch = { + mode: 'static' +} +``` + +#### Runtime Prefetching + +```tsx filename=""app/[slug]/page.tsx"" +export const unstable_prefetch = { + mode: 'runtime' + samples: [ + { + cookies: [{ name: 'experiment' value: 'A' }] + params: { slug: 'example' } + } + ] +} +```"
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,packages/next/src/build/webpack/plugins/next-types-plugin/index.ts,3,1,4,${ : `import type { ResolvingMetadata ResolvingViewport } from 'next/dist/lib/metadata/types/metadata-interface.js'` } +import type { PrefetchForTypeCheckInternal } from 'next/dist/build/segment-config/app/app-segment-config.js' + type TEntry = typeof import('${relativePath}.js') type SegmentParams<T extends Object = any> = T extends Record<string any> checkFields<Diff<{ } config?: {} generateStaticParams?: Function - unstable_prefetch?: 'unstable_static' | 'unstable_runtime' + unstable_prefetch?: PrefetchForTypeCheckInternal revalidate?: RevalidateRange<TEntry> | false dynamic?: 'auto' | 'force-dynamic' | 'error' | 'force-static' dynamicParams?: boolean
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,packages/next/src/server/app-render/create-component-tree.tsx,1,1,2,async function createComponentTreeInternal( ? (layoutOrPageMod as AppSegmentConfig).unstable_prefetch : undefined /** Whether this segment should use a runtime prefetch instead of a static prefetch. */ - const hasRuntimePrefetch = prefetchConfig === 'unstable_runtime' + const hasRuntimePrefetch = prefetchConfig?.mode === 'runtime' const [Forbidden forbiddenStyles] = authInterrupts && forbidden
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,packages/next/src/server/typescript/rules/config.ts,6,6,12,"const API_DOCS: Record< unstable_prefetch: { description: `Specifies the default prefetching behavior for this segment. This configuration is currently under development and will change.` link: '(docs coming soon)' - options: { - '""unstable_static""': - 'Only static and cached parts of the page will be prefetched. (default)' - '""unstable_runtime""': - 'Parts of the page that use route params search params or cookies will also be prefetched.' - } satisfies DocsOptionsObject<FullAppSegmentConfig['unstable_prefetch']> + type: 'object' + // TODO: ideally we'd validate the config object somehow but this is difficult to do + // with the way this plugin is currently structured. + // For now since we don't provide an `options` here we won't do any validation in + // `getSemanticDiagnosticsForExportVariableStatement` below and only provide hover a tooltip + autocomplete. + insertText: 'unstable_prefetch = { mode: ""static"" };' } }"
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-layout-sharing/app/segment-config/runtime-prefetchable/configured-as-runtime/page.tsx,4,1,5,import { cookies } from 'next/headers' import { Suspense } from 'react' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ cookies: [] }] +} export default function Page() { return (
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-layout-sharing/app/segment-config/runtime-prefetchable/configured-as-static/page.tsx,3,2,5,import { Suspense } from 'react' // Technically no `export const unstable_prefetch = ...` is needed because we default to static // this is just to make sure that we excercise the codepaths for it -export const unstable_prefetch = 'unstable_static' - +export const unstable_prefetch = { + mode: 'static' +} export default function Page() { return ( <main>
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-layout-sharing/app/segment-config/runtime-prefetchable/layout.tsx,4,2,6,import { cookies } from 'next/headers' import { Suspense } from 'react' import { DebugRenderKind } from '../../shared' -export const unstable_prefetch = 'unstable_runtime' - +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ cookies: [] }] +} export default async function Layout({ children }) { return ( <main>
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/(default)/fully-static/page.tsx,4,1,5,// but it's useful to exercise this codepath. // In the future this test can be used to check whether we correctly // *skip* a runtime prefetch if a page was prerendered as static. -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ cookies: [] }] +} export default async function Page() { return (
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/(default)/in-page/cookies-only/page.tsx,4,1,5,import { cookies } from 'next/headers' import { Suspense } from 'react' import { cachedDelay DebugRenderKind } from '../../../shared' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ cookies: [{ name: 'testCookie' value: 'testValue' }] }] +} export default async function Page() { return (
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/(default)/in-page/cookies/page.tsx,4,1,5,import { Suspense } from 'react' import { cachedDelay DebugRenderKind uncachedIO } from '../../../shared' import { connection } from 'next/server' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ cookies: [{ name: 'testCookie' value: 'testValue' }] }] +} export default async function Page() { return (
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/(default)/in-page/dynamic-params/[id]/page.tsx,4,1,5,import { Suspense } from 'react' import { cachedDelay DebugRenderKind uncachedIO } from '../../../../shared' import { connection } from 'next/server' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ params: { id: 'test' } }] +} type Params = { id: string }
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/(default)/in-page/headers/page.tsx,4,1,5,import { Suspense } from 'react' import { cachedDelay DebugRenderKind uncachedIO } from '../../../shared' import { connection } from 'next/server' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ headers: [['host' 'test-host']] }] +} export default async function Page() { return (
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/(default)/in-page/search-params/page.tsx,4,1,5,import { Suspense } from 'react' import { cachedDelay DebugRenderKind uncachedIO } from '../../../shared' import { connection } from 'next/server' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ searchParams: { key: 'value' } }] +} type AnySearchParams = { [key: string]: string | string[] | undefined }
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/(default)/in-private-cache/cookies-only/page.tsx,4,1,5,import { cookies } from 'next/headers' import { Suspense } from 'react' import { cachedDelay DebugRenderKind } from '../../../shared' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ cookies: [{ name: 'testCookie' value: 'testValue' }] }] +} export default async function Page() { return (
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/(default)/in-private-cache/cookies/page.tsx,4,1,5,import { Suspense } from 'react' import { cachedDelay DebugRenderKind uncachedIO } from '../../../shared' import { connection } from 'next/server' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ cookies: [{ name: 'testCookie' value: 'testValue' }] }] +} export default async function Page() { return (
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/(default)/in-private-cache/date-now/page.tsx,4,1,5,import { Suspense } from 'react' import { cachedDelay DebugRenderKind uncachedIO } from '../../../shared' import { connection } from 'next/server' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ cookies: [] }] +} export default async function Page() { return (
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/(default)/in-private-cache/dynamic-params/[id]/page.tsx,4,1,5,import { Suspense } from 'react' import { cachedDelay DebugRenderKind uncachedIO } from '../../../../shared' import { connection } from 'next/server' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ params: { id: 'test' } }] +} type Params = { id: string }
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/(default)/in-private-cache/headers/page.tsx,4,1,5,import { Suspense } from 'react' import { cachedDelay DebugRenderKind uncachedIO } from '../../../shared' import { connection } from 'next/server' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ headers: [['host' 'test-host']] }] +} export default async function Page() { return (
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/(default)/in-private-cache/search-params/page.tsx,4,1,5,import { Suspense } from 'react' import { cachedDelay DebugRenderKind uncachedIO } from '../../../shared' import { connection } from 'next/server' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ searchParams: { key: 'value' } }] +} type AnySearchParams = { [key: string]: string | string[] | undefined }
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/(default)/passed-to-public-cache/cookies-only/page.tsx,4,1,5,import { cookies } from 'next/headers' import { Suspense } from 'react' import { cachedDelay DebugRenderKind } from '../../../shared' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ cookies: [{ name: 'testCookie' value: 'testValue' }] }] +} export default async function Page() { return (
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/(default)/passed-to-public-cache/cookies/page.tsx,4,1,5,import { Suspense } from 'react' import { cachedDelay DebugRenderKind } from '../../../shared' import { connection } from 'next/server' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ cookies: [{ name: 'testCookie' value: 'testValue' }] }] +} export default async function Page() { return (
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/(default)/passed-to-public-cache/dynamic-params/[id]/page.tsx,4,1,5,import { cachedDelay DebugRenderKind } from '../../../../shared' import { connection } from 'next/server' import { cookies } from 'next/headers' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ params: { id: 'test' } }] +} type Params = { id: string }
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/(default)/passed-to-public-cache/headers/page.tsx,4,1,5,import { Suspense } from 'react' import { cachedDelay DebugRenderKind } from '../../../shared' import { connection } from 'next/server' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ headers: [['host' 'test-host']] }] +} export default async function Page() { return (
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/(default)/passed-to-public-cache/search-params/page.tsx,4,1,5,import { cachedDelay DebugRenderKind } from '../../../shared' import { connection } from 'next/server' import { cookies } from 'next/headers' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ searchParams: { key: 'value' } }] +} type AnySearchParams = { [key: string]: string | string[] | undefined }
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/with-root-param/[lang]/in-page/root-params/page.tsx,4,1,5,import { connection } from 'next/server' import { lang } from 'next/root-params' import { cookies } from 'next/headers' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ params: { lang: 'en' } }] +} export default async function Page() { return (
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/with-root-param/[lang]/in-private-cache/root-params/page.tsx,4,1,5,import { cachedDelay DebugRenderKind uncachedIO } from '../../../../shared' import { connection } from 'next/server' import { lang } from 'next/root-params' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ params: { lang: 'en' } }] +} export default async function Page() { return (
vercel/next.js,4c4a5bc83f690a7248068f05e4d285a4d42e07a0,Josh Story,2025-10-06 17:32:02,Implement the updated prerender API shape (#84254)  This does not add any validation but it makes the interface for prerender match out intended API shape when validation is landed  ---------  Co-authored-by: Janka Uryga <lolzatu2@gmail.com>,test/e2e/app-dir/segment-cache/prefetch-runtime/app/with-root-param/[lang]/passed-to-public-cache/root-params/page.tsx,4,1,5,import { cachedDelay DebugRenderKind uncachedIO } from '../../../../shared' import { connection } from 'next/server' import { lang } from 'next/root-params' -export const unstable_prefetch = 'unstable_runtime' +export const unstable_prefetch = { + mode: 'runtime' + samples: [{ params: { lang: 'en' } }] +} export default async function Page() { return (
vercel/next.js,86e006bd97269a64d6324ebd827ed33d4859e13b,Niklas Mischkulnig,2025-10-06 11:23:54,Turbopack: debug ids for server chunks (#84557)  Looks like #84319 forgot to enable them for the server chunks,crates/next-api/src/project.rs,1,0,1,impl Project { turbo_source_maps: self.next_config().server_source_maps() no_mangling: self.no_mangling() scope_hoisting: self.next_config().turbo_scope_hoisting(self.next_mode()) + debug_ids: self.next_config().turbopack_debug_ids() }; Ok(if client_assets { get_server_chunking_context_with_client_assets(
vercel/next.js,86e006bd97269a64d6324ebd827ed33d4859e13b,Niklas Mischkulnig,2025-10-06 11:23:54,Turbopack: debug ids for server chunks (#84557)  Looks like #84319 forgot to enable them for the server chunks,crates/next-core/src/next_server/context.rs,7,2,9,pub struct ServerChunkingContextOptions { pub turbo_source_maps: Vc<bool> pub no_mangling: Vc<bool> pub scope_hoisting: Vc<bool> + pub debug_ids: Vc<bool> } #[turbo_tasks::function] pub async fn get_server_chunking_context_with_client_assets( turbo_source_maps no_mangling scope_hoisting + debug_ids } = options; let next_mode = mode.await?; pub async fn get_server_chunking_context_with_client_assets( }) .module_id_strategy(module_id_strategy.to_resolved().await?) .export_usage(*export_usage.await?) - .file_tracing(next_mode.is_production()); + .file_tracing(next_mode.is_production()) + .debug_ids(*debug_ids.await?); if next_mode.is_development() { builder = builder.use_file_source_map_uris(); pub async fn get_server_chunking_context( turbo_source_maps no_mangling scope_hoisting + debug_ids } = options; let next_mode = mode.await?; // TODO(alexkirsz) This should return a trait that can be implemented by the pub async fn get_server_chunking_context( }) .module_id_strategy(module_id_strategy.to_resolved().await?) .export_usage(*export_usage.await?) - .file_tracing(next_mode.is_production()); + .file_tracing(next_mode.is_production()) + .debug_ids(*debug_ids.await?); if next_mode.is_development() { builder = builder.use_file_source_map_uris()
vercel/next.js,8d7dfab1a980b85da182b4a0441090a5990c1d70,Luke Sandberg,2025-10-06 10:33:13,[turbopack[ Use the configured hasher to implementh Hash for AutoMap and AutoSet (#84542)  Should be a small perf win.  Also  use `wrapping_add` instead of xor as our commutative operator.,turbopack/crates/turbo-tasks-auto-hash-map/src/map.rs,8,5,13,where { } -impl<K: Eq + Hash V: Eq + Hash MH: BuildHasher const I: usize> Hash for AutoMap<K V MH I> { +impl<K: Eq + Hash V: Eq + Hash MH: BuildHasher + Default const I: usize> Hash + for AutoMap<K V MH I> +{ fn hash<H: std::hash::Hasher>(&self state: &mut H) { // Hash the length first to distinguish maps of different sizes self.len().hash(state); impl<K: Eq + Hash V: Eq + Hash MH: BuildHasher const I: usize> Hash for AutoM // regardless of iteration order let mut combined_hash = 0u64; + let hash_builder = MH::default(); for (k v) in self.iter() { - use std::{collections::hash_map::DefaultHasher hash::Hasher}; + use std::hash::Hasher; // Hash each key-value pair independently - let mut entry_hasher = DefaultHasher::new(); + let mut entry_hasher = hash_builder.build_hasher(); k.hash(&mut entry_hasher); v.hash(&mut entry_hasher); let entry_hash = entry_hasher.finish(); - // Combine using XOR to make it order-independent - combined_hash ^= entry_hash; + // Combine using addition to make it order-independent (wrapping_add is commutative) + combined_hash = combined_hash.wrapping_add(entry_hash); } // Hash the combined result
vercel/next.js,8d7dfab1a980b85da182b4a0441090a5990c1d70,Luke Sandberg,2025-10-06 10:33:13,[turbopack[ Use the configured hasher to implementh Hash for AutoMap and AutoSet (#84542)  Should be a small perf win.  Also  use `wrapping_add` instead of xor as our commutative operator.,turbopack/crates/turbo-tasks-auto-hash-map/src/set.rs,1,1,2,impl<K: Eq + Hash H: BuildHasher const I: usize> PartialEq for AutoSet<K H I impl<K: Eq + Hash H: BuildHasher const I: usize> Eq for AutoSet<K H I> {} -impl<K: Eq + Hash SH: BuildHasher const I: usize> Hash for AutoSet<K SH I> { +impl<K: Eq + Hash SH: BuildHasher + Default const I: usize> Hash for AutoSet<K SH I> { fn hash<H: std::hash::Hasher>(&self state: &mut H) { self.map.hash(state); }
vercel/next.js,6b427544cfc2c3e1d853bb1038c057b0b20f2e30,Benjamin Woodruff,2025-10-06 09:43:01,test: Use nextTestSetup in scss tests (#84501)  This ensures the tests have some coverage for `next dev`  and ensures proper test isolation. Previously they were just using `__dirname`  which is wrong.,test/lib/e2e-utils/index.ts,11,6,17,export const isNextDeploy = testMode === 'deploy' */ export const isNextStart = !isNextDev && !isNextDeploy +export const isRspack = !!process.env.NEXT_RSPACK + if (!testMode) { throw new Error( `No 'NEXT_TEST_MODE' set in environment this is required for e2e-utils` export function nextTestSetup( isNextDeploy: boolean isNextStart: boolean isTurbopack: boolean + isRspack: boolean next: NextInstance skipped: boolean } { export function nextTestSetup( get isNextDev() { return isNextDev } - get isTurbopack(): boolean { - return Boolean( - !process.env.NEXT_TEST_WASM && (options.turbo ?? shouldUseTurbopack()) - ) - } - get isNextDeploy() { return isNextDeploy } get isNextStart() { return isNextStart } + get isTurbopack() { + return Boolean( + !process.env.NEXT_TEST_WASM && (options.turbo ?? shouldUseTurbopack()) + ) + } + get isRspack() { + return isRspack + } get next() { return nextProxy }
vercel/next.js,631dd719283af2ac6534f4f82d2b8b12b1d57d55,Jude Gao,2025-10-06 02:15:01,"Revert ""next mcp router""  This reverts commit 48d9966c54ab469fda90a8796bb0a902229c3587.",packages/next/src/bin/next.ts,0,9,9,program ) .usage('[directory] [options]') -program - .command('mcp') - .description( - 'Starts an MCP server using stdio transport. Manages sessions for all Next.js dev servers on this machine.' - ) - .action(() => { - import('../cli/next-mcp-stdio.js') - }) - const internal = program .command('internal') .description(
vercel/next.js,631dd719283af2ac6534f4f82d2b8b12b1d57d55,Jude Gao,2025-10-06 02:15:01,"Revert ""next mcp router""  This reverts commit 48d9966c54ab469fda90a8796bb0a902229c3587.",packages/next/src/server/lib/start-server.ts,0,5,5,export async function startServer( process.env.__NEXT_EXPERIMENTAL_HTTPS = '1' } - if (isDev) { - const { registerDevServer } = require('../mcp/standalone-mcp-server') - registerDevServer(dir port formattedHostname) - } - // Only load env and config in dev to for logging purposes let envInfo: string[] | undefined let experimentalFeatures: ConfiguredExperimentalFeature[] | undefined
vercel/next.js,48d9966c54ab469fda90a8796bb0a902229c3587,Jude Gao,2025-10-06 02:12:14,next mcp router,packages/next/src/bin/next.ts,9,0,9,program ) .usage('[directory] [options]') +program + .command('mcp') + .description( + 'Starts an MCP server using stdio transport. Manages sessions for all Next.js dev servers on this machine.' + ) + .action(() => { + import('../cli/next-mcp-stdio.js') + }) + const internal = program .command('internal') .description(
vercel/next.js,48d9966c54ab469fda90a8796bb0a902229c3587,Jude Gao,2025-10-06 02:12:14,next mcp router,packages/next/src/server/lib/start-server.ts,5,0,5,export async function startServer( process.env.__NEXT_EXPERIMENTAL_HTTPS = '1' } + if (isDev) { + const { registerDevServer } = require('../mcp/standalone-mcp-server') + registerDevServer(dir port formattedHostname) + } + // Only load env and config in dev to for logging purposes let envInfo: string[] | undefined let experimentalFeatures: ConfiguredExperimentalFeature[] | undefined
vercel/next.js,c1728ed2a6a1caf9be1802718410ab85795ee19f,Josh Story,2025-10-06 00:41:02,Simplify Metadata components (#84527)  Metadata and Viewport litter the component tree with a number of Next.js internal implementation details. We can't yet get rid of all of these but we can simplify by consolidating these components or eliminating them altogether.  One change is to render the metadata as a promise that resolves direclty to the client tags that must be in the head. Another is to render a promise that will directly reject with the error reason rather than reconstructing a digest manually.  In the process I removed a bunch of module indirection too,packages/next/src/client/components/metadata/async-metadata.tsx,0,33,33,-'use client' - -import { Suspense use } from 'react' -import type { StreamingMetadataResolvedState } from './types' - -function MetadataOutlet({ - promise -}: { - promise: Promise<StreamingMetadataResolvedState> -}) { - const { error digest } = use(promise) - if (error) { - if (digest) { - // The error will lose its original digest after passing from server layer to client layer； - // We recover the digest property here to override the React created one if original digest exists. - ;(error as any).digest = digest - } - throw error - } - return null -} - -export function AsyncMetadataOutlet({ - promise -}: { - promise: Promise<StreamingMetadataResolvedState> -}) { - return ( - <Suspense fallback={null}> - <MetadataOutlet promise={promise} /> - </Suspense> - ) -}
vercel/next.js,c1728ed2a6a1caf9be1802718410ab85795ee19f,Josh Story,2025-10-06 00:41:02,Simplify Metadata components (#84527)  Metadata and Viewport litter the component tree with a number of Next.js internal implementation details. We can't yet get rid of all of these but we can simplify by consolidating these components or eliminating them altogether.  One change is to render the metadata as a promise that resolves direclty to the client tags that must be in the head. Another is to render a promise that will directly reject with the error reason rather than reconstructing a digest manually.  In the process I removed a bunch of module indirection too,packages/next/src/client/components/metadata/types.ts,0,5,5,-export type StreamingMetadataResolvedState = { - metadata: React.ReactNode - error: unknown | null - digest: string | undefined -}
vercel/next.js,c1728ed2a6a1caf9be1802718410ab85795ee19f,Josh Story,2025-10-06 00:41:02,Simplify Metadata components (#84527)  Metadata and Viewport litter the component tree with a number of Next.js internal implementation details. We can't yet get rid of all of these but we can simplify by consolidating these components or eliminating them altogether.  One change is to render the metadata as a promise that resolves direclty to the client tags that must be in the head. Another is to render a promise that will directly reject with the error reason rather than reconstructing a digest manually.  In the process I removed a bunch of module indirection too,packages/next/src/server/app-render/entry-base.ts,1,6,7,export { export * as serverHooks from '../../client/components/hooks-server-context' export { HTTPAccessFallbackBoundary } from '../../client/components/http-access-fallback/error-boundary' export { createMetadataComponents } from '../../lib/metadata/metadata' -export { - MetadataBoundary - ViewportBoundary - OutletBoundary - RootLayoutBoundary -} from '../../lib/framework/boundary-components' +export { RootLayoutBoundary } from '../../lib/framework/boundary-components' export { preloadStyle preloadFont preconnect } from './rsc/preloads' export { Postpone } from './rsc/postpone'
vercel/next.js,c1728ed2a6a1caf9be1802718410ab85795ee19f,Josh Story,2025-10-06 00:41:02,Simplify Metadata components (#84527)  Metadata and Viewport litter the component tree with a number of Next.js internal implementation details. We can't yet get rid of all of these but we can simplify by consolidating these components or eliminating them altogether.  One change is to render the metadata as a promise that resolves direclty to the client tags that must be in the head. Another is to render a promise that will directly reject with the error reason rather than reconstructing a digest manually.  In the process I removed a bunch of module indirection too,packages/next/src/server/app-render/walk-tree-with-flight-router-state.tsx,4,12,16,"export async function walkTreeWithFlightRouterState({ injectedJS injectedFontPreloadTags rootLayoutIncluded - getViewportReady - getMetadataReady ctx preloadCallbacks - StreamingMetadataOutlet + MetadataOutlet }: { loaderTreeToFilter: LoaderTree parentParams: { [key: string]: string | string[] } export async function walkTreeWithFlightRouterState({ injectedJS: Set<string> injectedFontPreloadTags: Set<string> rootLayoutIncluded: boolean - getMetadataReady: () => Promise<void> - getViewportReady: () => Promise<void> ctx: AppRenderContext preloadCallbacks: PreloadCallbacks - StreamingMetadataOutlet: React.ComponentType | null + MetadataOutlet: React.ComponentType }): Promise<FlightDataPath[]> { const { renderOpts: { nextFontManifest experimental } export async function walkTreeWithFlightRouterState({ injectedFontPreloadTags // This is intentionally not ""rootLayoutIncludedAtThisLevelOrAbove"" as createComponentTree starts at the current level and does a check for ""rootLayoutAtThisLevel"" too. rootLayoutIncluded - getViewportReady - getMetadataReady preloadCallbacks authInterrupts: experimental.authInterrupts - StreamingMetadataOutlet + MetadataOutlet } ) export async function walkTreeWithFlightRouterState({ injectedJS: injectedJSWithCurrentLayout injectedFontPreloadTags: injectedFontPreloadTagsWithCurrentLayout rootLayoutIncluded: rootLayoutIncludedAtThisLevelOrAbove - getViewportReady - getMetadataReady preloadCallbacks - StreamingMetadataOutlet + MetadataOutlet }) for (const subPath of subPaths) {"
vercel/next.js,c1728ed2a6a1caf9be1802718410ab85795ee19f,Josh Story,2025-10-06 00:41:02,Simplify Metadata components (#84527)  Metadata and Viewport litter the component tree with a number of Next.js internal implementation details. We can't yet get rid of all of these but we can simplify by consolidating these components or eliminating them altogether.  One change is to render the metadata as a promise that resolves direclty to the client tags that must be in the head. Another is to render a promise that will directly reject with the error reason rather than reconstructing a digest manually.  In the process I removed a bunch of module indirection too,test/e2e/opentelemetry/instrumentation/opentelemetry.test.ts,3,2,5,describe('opentelemetry' () => { } { attributes: { - 'next.clientComponentLoadCount': isNextDev ? 8 : 7 + 'next.clientComponentLoadCount': isNextDev ? 7 : 6 'next.span_type': 'NextNodeServer.clientComponentLoading' } describe('opentelemetry' () => { } { attributes: { - 'next.clientComponentLoadCount': isNextDev ? 11 : 8 + 'next.clientComponentLoadCount': isNextDev ? 10 : 8 'next.span_type': 'NextNodeServer.clientComponentLoading' } describe('opentelemetry with disabled fetch tracing' () => { afterEach(async () => { await collector.shutdown() + await new Promise((r) => setTimeout(r 1000)) }) ;(process.env.__NEXT_EXPERIMENTAL_PPR ? describe.skip : describe)( 'root context'
vercel/next.js,e974ca937b2ca0e5cacaa118027765d5a23c605c,Hendrik Liebau,2025-10-05 23:48:09,[test] Enable `reactDebugChannel` for experimental test shards (#84533)  The experimental flag `reactDebugChannel` is currently off by default. To avoid regressions in the debug channel integration  we enable the flag for the experimental test shards.,.github/workflows/build_and_test.yml,4,0,4,"jobs: afterBuild: | export __NEXT_EXPERIMENTAL_PPR=true # for compatibility with the existing tests export __NEXT_EXPERIMENTAL_CACHE_COMPONENTS=true + export __NEXT_EXPERIMENTAL_DEBUG_CHANNEL=true export NEXT_EXTERNAL_TESTS_FILTERS=""test/experimental-tests-manifest.json"" export NEXT_E2E_TEST_TIMEOUT=240000 export GH_PR_NUMBER=${{ github.event.pull_request && github.event.pull_request.number || '' }} jobs: afterBuild: | export __NEXT_EXPERIMENTAL_PPR=true # for compatibility with the existing tests export __NEXT_EXPERIMENTAL_CACHE_COMPONENTS=true + export __NEXT_EXPERIMENTAL_DEBUG_CHANNEL=true export NEXT_EXTERNAL_TESTS_FILTERS=""test/experimental-tests-manifest.json"" export IS_WEBPACK_TEST=1 jobs: afterBuild: | export __NEXT_EXPERIMENTAL_PPR=true # for compatibility with the existing tests export __NEXT_EXPERIMENTAL_CACHE_COMPONENTS=true + export __NEXT_EXPERIMENTAL_DEBUG_CHANNEL=true export NEXT_EXTERNAL_TESTS_FILTERS=""test/experimental-tests-manifest.json"" export NEXT_TEST_MODE=dev export __NEXT_EXPERIMENTAL_ISOLATED_DEV_BUILD=true jobs: afterBuild: | export __NEXT_EXPERIMENTAL_PPR=true # for compatibility with the existing tests export __NEXT_EXPERIMENTAL_CACHE_COMPONENTS=true + export __NEXT_EXPERIMENTAL_DEBUG_CHANNEL=true export NEXT_EXTERNAL_TESTS_FILTERS=""test/experimental-tests-manifest.json"" export NEXT_TEST_MODE=start export IS_WEBPACK_TEST=1"
vercel/next.js,e974ca937b2ca0e5cacaa118027765d5a23c605c,Hendrik Liebau,2025-10-05 23:48:09,[test] Enable `reactDebugChannel` for experimental test shards (#84533)  The experimental flag `reactDebugChannel` is currently off by default. To avoid regressions in the debug channel integration  we enable the flag for the experimental test shards.,package.json,1,1,2,"""test-storybook"": ""turbo run test-storybook"" ""with-rspack"": ""cross-env NEXT_RSPACK=1 NEXT_TEST_USE_RSPACK=1"" ""with-webpack"": ""cross-env IS_WEBPACK_TEST=1"" - ""with-experimental"": ""cross-env __NEXT_EXPERIMENTAL_CACHE_COMPONENTS=true __NEXT_EXPERIMENTAL_PPR=true"" + ""with-experimental"": ""cross-env __NEXT_EXPERIMENTAL_CACHE_COMPONENTS=true __NEXT_EXPERIMENTAL_PPR=true __NEXT_EXPERIMENTAL_DEBUG_CHANNEL=true"" } ""devDependencies"": { ""@actions/core"": ""1.10.1"""
vercel/next.js,e974ca937b2ca0e5cacaa118027765d5a23c605c,Hendrik Liebau,2025-10-05 23:48:09,[test] Enable `reactDebugChannel` for experimental test shards (#84533)  The experimental flag `reactDebugChannel` is currently off by default. To avoid regressions in the debug channel integration  we enable the flag for the experimental test shards.,packages/next/src/server/config.ts,19,0,19,function enforceExperimentalFeatures( } } + // TODO: Remove this once using the debug channel is the default. + if ( + process.env.__NEXT_EXPERIMENTAL_DEBUG_CHANNEL === 'true' && + // We do respect an explicit value in the user config. + (config.experimental.reactDebugChannel === undefined || + (isDefaultConfig && !config.experimental.reactDebugChannel)) + ) { + config.experimental.reactDebugChannel = true + + if (configuredExperimentalFeatures) { + addConfiguredExperimentalFeature( + configuredExperimentalFeatures + 'reactDebugChannel' + true + 'enabled by `__NEXT_EXPERIMENTAL_DEBUG_CHANNEL`' + ) + } + } + // TODO: Remove this once we've made RDC for Navigations the default for PPR. if ( process.env.__NEXT_EXPERIMENTAL_PPR === 'true' &&
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,lerna.json,1,1,2,"""registry"": ""https://registry.npmjs.org/"" } } - ""version"": ""15.6.0-canary.44"" + ""version"": ""15.6.0-canary.45"" }"
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,packages/create-next-app/package.json,1,1,2,"{ ""name"": ""create-next-app"" - ""version"": ""15.6.0-canary.44"" + ""version"": ""15.6.0-canary.45"" ""keywords"": [ ""react"" ""next"""
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,packages/eslint-config-next/package.json,2,2,4,"{ ""name"": ""eslint-config-next"" - ""version"": ""15.6.0-canary.44"" + ""version"": ""15.6.0-canary.45"" ""description"": ""ESLint configuration used by Next.js."" ""main"": ""index.js"" ""license"": ""MIT"" } ""homepage"": ""https://nextjs.org/docs/app/api-reference/config/eslint"" ""dependencies"": { - ""@next/eslint-plugin-next"": ""15.6.0-canary.44"" + ""@next/eslint-plugin-next"": ""15.6.0-canary.45"" ""@rushstack/eslint-patch"": ""^1.10.3"" ""@typescript-eslint/eslint-plugin"": ""^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0"" ""@typescript-eslint/parser"": ""^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0"""
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,packages/eslint-plugin-internal/package.json,1,1,2,"{ ""name"": ""@next/eslint-plugin-internal"" ""private"": true - ""version"": ""15.6.0-canary.44"" + ""version"": ""15.6.0-canary.45"" ""description"": ""ESLint plugin for working on Next.js."" ""exports"": { ""."": ""./src/eslint-plugin-internal.js"""
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,packages/eslint-plugin-next/package.json,1,1,2,"{ ""name"": ""@next/eslint-plugin-next"" - ""version"": ""15.6.0-canary.44"" + ""version"": ""15.6.0-canary.45"" ""description"": ""ESLint plugin for Next.js."" ""main"": ""dist/index.js"" ""types"": ""dist/index.d.ts"""
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,packages/font/package.json,1,1,2,"{ ""name"": ""@next/font"" ""private"": true - ""version"": ""15.6.0-canary.44"" + ""version"": ""15.6.0-canary.45"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/font"""
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,packages/next-bundle-analyzer/package.json,1,1,2,"{ ""name"": ""@next/bundle-analyzer"" - ""version"": ""15.6.0-canary.44"" + ""version"": ""15.6.0-canary.45"" ""main"": ""index.js"" ""types"": ""index.d.ts"" ""license"": ""MIT"""
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,packages/next-codemod/package.json,1,1,2,"{ ""name"": ""@next/codemod"" - ""version"": ""15.6.0-canary.44"" + ""version"": ""15.6.0-canary.45"" ""license"": ""MIT"" ""repository"": { ""type"": ""git"""
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,packages/next-env/package.json,1,1,2,"{ ""name"": ""@next/env"" - ""version"": ""15.6.0-canary.44"" + ""version"": ""15.6.0-canary.45"" ""keywords"": [ ""react"" ""next"""
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,packages/next-mdx/package.json,1,1,2,"{ ""name"": ""@next/mdx"" - ""version"": ""15.6.0-canary.44"" + ""version"": ""15.6.0-canary.45"" ""main"": ""index.js"" ""license"": ""MIT"" ""repository"": {"
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,packages/next-plugin-storybook/package.json,1,1,2,"{ ""name"": ""@next/plugin-storybook"" - ""version"": ""15.6.0-canary.44"" + ""version"": ""15.6.0-canary.45"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/next-plugin-storybook"""
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,packages/next-polyfill-module/package.json,1,1,2,"{ ""name"": ""@next/polyfill-module"" - ""version"": ""15.6.0-canary.44"" + ""version"": ""15.6.0-canary.45"" ""description"": ""A standard library polyfill for ES Modules supporting browsers (Edge 16+ Firefox 60+ Chrome 61+ Safari 10.1+)"" ""main"": ""dist/polyfill-module.js"" ""license"": ""MIT"""
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,packages/next-polyfill-nomodule/package.json,1,1,2,"{ ""name"": ""@next/polyfill-nomodule"" - ""version"": ""15.6.0-canary.44"" + ""version"": ""15.6.0-canary.45"" ""description"": ""A polyfill for non-dead nomodule browsers."" ""main"": ""dist/polyfill-nomodule.js"" ""license"": ""MIT"""
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,packages/next-rspack/package.json,1,1,2,"{ ""name"": ""next-rspack"" - ""version"": ""15.6.0-canary.44"" + ""version"": ""15.6.0-canary.45"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/next-rspack"""
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,packages/next-swc/package.json,1,1,2,"{ ""name"": ""@next/swc"" - ""version"": ""15.6.0-canary.44"" + ""version"": ""15.6.0-canary.45"" ""private"": true ""files"": [ ""native/"""
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,packages/next/package.json,7,7,14,"{ ""name"": ""next"" - ""version"": ""15.6.0-canary.44"" + ""version"": ""15.6.0-canary.45"" ""description"": ""The React Framework"" ""main"": ""./dist/server/next.js"" ""license"": ""MIT"" ] } ""dependencies"": { - ""@next/env"": ""15.6.0-canary.44"" + ""@next/env"": ""15.6.0-canary.45"" ""@swc/helpers"": ""0.5.15"" ""caniuse-lite"": ""^1.0.30001579"" ""postcss"": ""8.4.31"" ""@modelcontextprotocol/sdk"": ""1.18.1"" ""@mswjs/interceptors"": ""0.23.0"" ""@napi-rs/triples"": ""1.2.0"" - ""@next/font"": ""15.6.0-canary.44"" - ""@next/polyfill-module"": ""15.6.0-canary.44"" - ""@next/polyfill-nomodule"": ""15.6.0-canary.44"" - ""@next/react-refresh-utils"": ""15.6.0-canary.44"" - ""@next/swc"": ""15.6.0-canary.44"" + ""@next/font"": ""15.6.0-canary.45"" + ""@next/polyfill-module"": ""15.6.0-canary.45"" + ""@next/polyfill-nomodule"": ""15.6.0-canary.45"" + ""@next/react-refresh-utils"": ""15.6.0-canary.45"" + ""@next/swc"": ""15.6.0-canary.45"" ""@opentelemetry/api"": ""1.6.0"" ""@playwright/test"": ""1.51.1"" ""@rspack/core"": ""1.5.0"""
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,packages/react-refresh-utils/package.json,1,1,2,"{ ""name"": ""@next/react-refresh-utils"" - ""version"": ""15.6.0-canary.44"" + ""version"": ""15.6.0-canary.45"" ""description"": ""An experimental package providing utilities for React Refresh."" ""repository"": { ""url"": ""vercel/next.js"""
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,packages/third-parties/package.json,2,2,4,"{ ""name"": ""@next/third-parties"" - ""version"": ""15.6.0-canary.44"" + ""version"": ""15.6.0-canary.45"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/third-parties"" ""third-party-capital"": ""1.0.20"" } ""devDependencies"": { - ""next"": ""15.6.0-canary.44"" + ""next"": ""15.6.0-canary.45"" ""outdent"": ""0.8.0"" ""prettier"": ""2.5.1"" ""typescript"": ""5.9.2"""
vercel/next.js,7c0c2c6b86fe3bd44f205a2677f3622ba3fb8700,nextjs-bot,2025-10-05 23:23:01,v15.6.0-canary.45,pnpm-lock.yaml,8,8,16,importers: packages/eslint-config-next: dependencies: '@next/eslint-plugin-next': - specifier: 15.6.0-canary.44 + specifier: 15.6.0-canary.45 version: link:../eslint-plugin-next '@rushstack/eslint-patch': specifier: ^1.10.3 importers: packages/next: dependencies: '@next/env': - specifier: 15.6.0-canary.44 + specifier: 15.6.0-canary.45 version: link:../next-env '@swc/helpers': specifier: 0.5.15 importers: specifier: 1.2.0 version: 1.2.0 '@next/font': - specifier: 15.6.0-canary.44 + specifier: 15.6.0-canary.45 version: link:../font '@next/polyfill-module': - specifier: 15.6.0-canary.44 + specifier: 15.6.0-canary.45 version: link:../next-polyfill-module '@next/polyfill-nomodule': - specifier: 15.6.0-canary.44 + specifier: 15.6.0-canary.45 version: link:../next-polyfill-nomodule '@next/react-refresh-utils': - specifier: 15.6.0-canary.44 + specifier: 15.6.0-canary.45 version: link:../react-refresh-utils '@next/swc': - specifier: 15.6.0-canary.44 + specifier: 15.6.0-canary.45 version: link:../next-swc '@opentelemetry/api': specifier: 1.6.0 importers: version: 1.0.20 devDependencies: next: - specifier: 15.6.0-canary.44 + specifier: 15.6.0-canary.45 version: link:../next outdent: specifier: 0.8.0
vercel/next.js,953b4c513990b4149faa27d687449ee72c68684f,Hendrik Liebau,2025-10-05 12:40:24,Fix potential race condition with request ID in dev mode (#84532)  In development mode  the request ID needs to be available before the bootstrap script executes and triggers hydration. Previously  the request ID was set inline with the flight data stream in a script tag that was inserted after the bootstrap script  which could lead to a race condition where `self.__next_r` was accessed before it was defined.  With this PR  we're moving the request ID initialization to `bootstrapScriptContent`  which is inserted as a script tag by React immediately before the bootstrap script. This ensures that the request ID is always defined when the bootstrap script runs.  I wasn't actually able to reproduce the issue  so I also couldn't add a test for it. But we did receive reports from users that this was happening  which is plausible given the previous script order.,packages/next/src/server/app-render/use-flight-response.tsx,3,15,18,export function useFlightStream<T>( export function createInlinedDataReadableStream( flightStream: ReadableStream<Uint8Array> nonce: string | undefined - formState: unknown | null - requestId: string + formState: unknown | null ): ReadableStream<Uint8Array> { const startScriptTag = nonce ? `<script nonce=${JSON.stringify(nonce)}>` export function createInlinedDataReadableStream( type: 'bytes' start(controller) { try { - writeInitialInstructions( - controller - startScriptTag - formState - requestId - ) + writeInitialInstructions(controller startScriptTag formState) } catch (error) { // during encoding or enqueueing forward the error downstream controller.error(error) export function createInlinedDataReadableStream( function writeInitialInstructions( controller: ReadableStreamDefaultController scriptStart: string - formState: unknown | null - requestId: string + formState: unknown | null ) { let scriptContents = `(self.__next_f=self.__next_f||[]).push(${htmlEscapeJsonString( JSON.stringify([INLINE_FLIGHT_PAYLOAD_BOOTSTRAP]) )})` - if (process.env.NODE_ENV !== 'production') { - // The request ID is only needed in development mode. - scriptContents = `self.__next_r=${JSON.stringify(requestId)};${scriptContents}` - } - if (formState != null) { scriptContents += `;self.__next_f.push(${htmlEscapeJsonString( JSON.stringify([INLINE_FLIGHT_PAYLOAD_FORM_STATE formState])
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,lerna.json,1,1,2,"""registry"": ""https://registry.npmjs.org/"" } } - ""version"": ""15.6.0-canary.43"" + ""version"": ""15.6.0-canary.44"" }"
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,packages/create-next-app/package.json,1,1,2,"{ ""name"": ""create-next-app"" - ""version"": ""15.6.0-canary.43"" + ""version"": ""15.6.0-canary.44"" ""keywords"": [ ""react"" ""next"""
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,packages/eslint-config-next/package.json,2,2,4,"{ ""name"": ""eslint-config-next"" - ""version"": ""15.6.0-canary.43"" + ""version"": ""15.6.0-canary.44"" ""description"": ""ESLint configuration used by Next.js."" ""main"": ""index.js"" ""license"": ""MIT"" } ""homepage"": ""https://nextjs.org/docs/app/api-reference/config/eslint"" ""dependencies"": { - ""@next/eslint-plugin-next"": ""15.6.0-canary.43"" + ""@next/eslint-plugin-next"": ""15.6.0-canary.44"" ""@rushstack/eslint-patch"": ""^1.10.3"" ""@typescript-eslint/eslint-plugin"": ""^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0"" ""@typescript-eslint/parser"": ""^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0"""
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,packages/eslint-plugin-internal/package.json,1,1,2,"{ ""name"": ""@next/eslint-plugin-internal"" ""private"": true - ""version"": ""15.6.0-canary.43"" + ""version"": ""15.6.0-canary.44"" ""description"": ""ESLint plugin for working on Next.js."" ""exports"": { ""."": ""./src/eslint-plugin-internal.js"""
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,packages/eslint-plugin-next/package.json,1,1,2,"{ ""name"": ""@next/eslint-plugin-next"" - ""version"": ""15.6.0-canary.43"" + ""version"": ""15.6.0-canary.44"" ""description"": ""ESLint plugin for Next.js."" ""main"": ""dist/index.js"" ""types"": ""dist/index.d.ts"""
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,packages/font/package.json,1,1,2,"{ ""name"": ""@next/font"" ""private"": true - ""version"": ""15.6.0-canary.43"" + ""version"": ""15.6.0-canary.44"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/font"""
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,packages/next-bundle-analyzer/package.json,1,1,2,"{ ""name"": ""@next/bundle-analyzer"" - ""version"": ""15.6.0-canary.43"" + ""version"": ""15.6.0-canary.44"" ""main"": ""index.js"" ""types"": ""index.d.ts"" ""license"": ""MIT"""
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,packages/next-codemod/package.json,1,1,2,"{ ""name"": ""@next/codemod"" - ""version"": ""15.6.0-canary.43"" + ""version"": ""15.6.0-canary.44"" ""license"": ""MIT"" ""repository"": { ""type"": ""git"""
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,packages/next-env/package.json,1,1,2,"{ ""name"": ""@next/env"" - ""version"": ""15.6.0-canary.43"" + ""version"": ""15.6.0-canary.44"" ""keywords"": [ ""react"" ""next"""
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,packages/next-mdx/package.json,1,1,2,"{ ""name"": ""@next/mdx"" - ""version"": ""15.6.0-canary.43"" + ""version"": ""15.6.0-canary.44"" ""main"": ""index.js"" ""license"": ""MIT"" ""repository"": {"
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,packages/next-plugin-storybook/package.json,1,1,2,"{ ""name"": ""@next/plugin-storybook"" - ""version"": ""15.6.0-canary.43"" + ""version"": ""15.6.0-canary.44"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/next-plugin-storybook"""
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,packages/next-polyfill-module/package.json,1,1,2,"{ ""name"": ""@next/polyfill-module"" - ""version"": ""15.6.0-canary.43"" + ""version"": ""15.6.0-canary.44"" ""description"": ""A standard library polyfill for ES Modules supporting browsers (Edge 16+ Firefox 60+ Chrome 61+ Safari 10.1+)"" ""main"": ""dist/polyfill-module.js"" ""license"": ""MIT"""
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,packages/next-polyfill-nomodule/package.json,1,1,2,"{ ""name"": ""@next/polyfill-nomodule"" - ""version"": ""15.6.0-canary.43"" + ""version"": ""15.6.0-canary.44"" ""description"": ""A polyfill for non-dead nomodule browsers."" ""main"": ""dist/polyfill-nomodule.js"" ""license"": ""MIT"""
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,packages/next-rspack/package.json,1,1,2,"{ ""name"": ""next-rspack"" - ""version"": ""15.6.0-canary.43"" + ""version"": ""15.6.0-canary.44"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/next-rspack"""
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,packages/next-swc/package.json,1,1,2,"{ ""name"": ""@next/swc"" - ""version"": ""15.6.0-canary.43"" + ""version"": ""15.6.0-canary.44"" ""private"": true ""files"": [ ""native/"""
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,packages/next/package.json,7,7,14,"{ ""name"": ""next"" - ""version"": ""15.6.0-canary.43"" + ""version"": ""15.6.0-canary.44"" ""description"": ""The React Framework"" ""main"": ""./dist/server/next.js"" ""license"": ""MIT"" ] } ""dependencies"": { - ""@next/env"": ""15.6.0-canary.43"" + ""@next/env"": ""15.6.0-canary.44"" ""@swc/helpers"": ""0.5.15"" ""caniuse-lite"": ""^1.0.30001579"" ""postcss"": ""8.4.31"" ""@modelcontextprotocol/sdk"": ""1.18.1"" ""@mswjs/interceptors"": ""0.23.0"" ""@napi-rs/triples"": ""1.2.0"" - ""@next/font"": ""15.6.0-canary.43"" - ""@next/polyfill-module"": ""15.6.0-canary.43"" - ""@next/polyfill-nomodule"": ""15.6.0-canary.43"" - ""@next/react-refresh-utils"": ""15.6.0-canary.43"" - ""@next/swc"": ""15.6.0-canary.43"" + ""@next/font"": ""15.6.0-canary.44"" + ""@next/polyfill-module"": ""15.6.0-canary.44"" + ""@next/polyfill-nomodule"": ""15.6.0-canary.44"" + ""@next/react-refresh-utils"": ""15.6.0-canary.44"" + ""@next/swc"": ""15.6.0-canary.44"" ""@opentelemetry/api"": ""1.6.0"" ""@playwright/test"": ""1.51.1"" ""@rspack/core"": ""1.5.0"""
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,packages/react-refresh-utils/package.json,1,1,2,"{ ""name"": ""@next/react-refresh-utils"" - ""version"": ""15.6.0-canary.43"" + ""version"": ""15.6.0-canary.44"" ""description"": ""An experimental package providing utilities for React Refresh."" ""repository"": { ""url"": ""vercel/next.js"""
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,packages/third-parties/package.json,2,2,4,"{ ""name"": ""@next/third-parties"" - ""version"": ""15.6.0-canary.43"" + ""version"": ""15.6.0-canary.44"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/third-parties"" ""third-party-capital"": ""1.0.20"" } ""devDependencies"": { - ""next"": ""15.6.0-canary.43"" + ""next"": ""15.6.0-canary.44"" ""outdent"": ""0.8.0"" ""prettier"": ""2.5.1"" ""typescript"": ""5.9.2"""
vercel/next.js,665977f2c7b124ba2f1f132d6ba4e3793a2aea49,nextjs-bot,2025-10-05 08:28:54,v15.6.0-canary.44,pnpm-lock.yaml,8,8,16,importers: packages/eslint-config-next: dependencies: '@next/eslint-plugin-next': - specifier: 15.6.0-canary.43 + specifier: 15.6.0-canary.44 version: link:../eslint-plugin-next '@rushstack/eslint-patch': specifier: ^1.10.3 importers: packages/next: dependencies: '@next/env': - specifier: 15.6.0-canary.43 + specifier: 15.6.0-canary.44 version: link:../next-env '@swc/helpers': specifier: 0.5.15 importers: specifier: 1.2.0 version: 1.2.0 '@next/font': - specifier: 15.6.0-canary.43 + specifier: 15.6.0-canary.44 version: link:../font '@next/polyfill-module': - specifier: 15.6.0-canary.43 + specifier: 15.6.0-canary.44 version: link:../next-polyfill-module '@next/polyfill-nomodule': - specifier: 15.6.0-canary.43 + specifier: 15.6.0-canary.44 version: link:../next-polyfill-nomodule '@next/react-refresh-utils': - specifier: 15.6.0-canary.43 + specifier: 15.6.0-canary.44 version: link:../react-refresh-utils '@next/swc': - specifier: 15.6.0-canary.43 + specifier: 15.6.0-canary.44 version: link:../next-swc '@opentelemetry/api': specifier: 1.6.0 importers: version: 1.0.20 devDependencies: next: - specifier: 15.6.0-canary.43 + specifier: 15.6.0-canary.44 version: link:../next outdent: specifier: 0.8.0
vercel/next.js,c38833d10934d9b151016adcac0d322dbf360690,Tobias Koppers,2025-10-05 08:25:14,"Revert ""Turbopack: skip invalidating a task on cell/output change when the dependency is outdated"" (#84526)  Reverts vercel/next.js#84376",test/e2e/app-dir/no-double-tailwind-execution/app/globals.css,0,1,1,-@import 'tailwindcss';
vercel/next.js,c38833d10934d9b151016adcac0d322dbf360690,Tobias Koppers,2025-10-05 08:25:14,"Revert ""Turbopack: skip invalidating a task on cell/output change when the dependency is outdated"" (#84526)  Reverts vercel/next.js#84376",test/e2e/app-dir/no-double-tailwind-execution/app/layout.tsx,0,10,10,-import './globals.css' - -import { ReactNode } from 'react' -export default function Root({ children }: { children: ReactNode }) { - return ( - <html> - <body>{children}</body> - </html> - ) -}
vercel/next.js,c38833d10934d9b151016adcac0d322dbf360690,Tobias Koppers,2025-10-05 08:25:14,"Revert ""Turbopack: skip invalidating a task on cell/output change when the dependency is outdated"" (#84526)  Reverts vercel/next.js#84376",test/e2e/app-dir/no-double-tailwind-execution/app/page.tsx,0,3,3,-export default function Page() { - return <p>hello world</p> -}
vercel/next.js,c38833d10934d9b151016adcac0d322dbf360690,Tobias Koppers,2025-10-05 08:25:14,"Revert ""Turbopack: skip invalidating a task on cell/output change when the dependency is outdated"" (#84526)  Reverts vercel/next.js#84376",test/e2e/app-dir/no-double-tailwind-execution/next.config.js,0,6,6,-/** - * @type {import('next').NextConfig} - */ -const nextConfig = {} - -module.exports = nextConfig
vercel/next.js,c38833d10934d9b151016adcac0d322dbf360690,Tobias Koppers,2025-10-05 08:25:14,"Revert ""Turbopack: skip invalidating a task on cell/output change when the dependency is outdated"" (#84526)  Reverts vercel/next.js#84376",test/e2e/app-dir/no-double-tailwind-execution/no-double-tailwind-execution.test.ts,0,55,55,-import { nextTestSetup } from 'e2e-utils' -import { retry } from 'next-test-utils' - -describe('no-double-tailwind-execution' () => { - const { next isNextDev skipped } = nextTestSetup({ - files: __dirname - skipDeployment: true - dependencies: { - '@tailwindcss/postcss': '^4' - tailwindcss: '^4' - } - env: { - DEBUG: 'tailwindcss' - ...process.env - } - }) - - if (skipped) { - return - } - - it('should run tailwind only once initially and per change' async () => { - const browser = await next.browser('/') - expect(await browser.elementByCss('p').text()).toBe('hello world') - - if (isNextDev) { - const filePath = 'app/page.tsx' - const origContent = await next.readFile(filePath) - let getOutput = next.getCliOutputFromHere() - await next.patchFile( - filePath - origContent.replace('hello world' 'hello hmr') - async () => { - await retry(async () => { - expect(await browser.elementByCss('p').text()).toBe('hello hmr') - let tailwindProcessingCount = [ - ...getOutput().matchAll( - /\[@tailwindcss\/postcss\] app\/globals.css/g - ) - ].length - expect(tailwindProcessingCount).toBe(1) - }) - } - ) - } - let tailwindProcessingCount = [ - ...next.cliOutput.matchAll(/\[@tailwindcss\/postcss\] app\/globals.css/g) - ].length - if (isNextDev) { - expect(tailwindProcessingCount).toBe(3) // dev: initial + hmr + hmr (revert) - } else { - expect(tailwindProcessingCount).toBe(1) // build - } - }) -})
vercel/next.js,c38833d10934d9b151016adcac0d322dbf360690,Tobias Koppers,2025-10-05 08:25:14,"Revert ""Turbopack: skip invalidating a task on cell/output change when the dependency is outdated"" (#84526)  Reverts vercel/next.js#84376",test/e2e/app-dir/no-double-tailwind-execution/package.json,0,1,1,-{}
vercel/next.js,c38833d10934d9b151016adcac0d322dbf360690,Tobias Koppers,2025-10-05 08:25:14,"Revert ""Turbopack: skip invalidating a task on cell/output change when the dependency is outdated"" (#84526)  Reverts vercel/next.js#84376",test/e2e/app-dir/no-double-tailwind-execution/postcss.config.mjs,0,5,5,-const config = { - plugins: ['@tailwindcss/postcss'] -} - -export default config
vercel/next.js,c38833d10934d9b151016adcac0d322dbf360690,Tobias Koppers,2025-10-05 08:25:14,"Revert ""Turbopack: skip invalidating a task on cell/output change when the dependency is outdated"" (#84526)  Reverts vercel/next.js#84376",turbopack/crates/turbo-tasks-backend/src/backend/operation/mod.rs,1,3,4,pub enum AnyOperation { ConnectChild(connect_child::ConnectChildOperation) Invalidate(invalidate::InvalidateOperation) UpdateOutput(update_output::UpdateOutputOperation) - UpdateCell(update_cell::UpdateCellOperation) CleanupOldEdges(cleanup_old_edges::CleanupOldEdgesOperation) AggregationUpdate(aggregation_update::AggregationUpdateQueue) Nested(Vec<AnyOperation>) impl AnyOperation { AnyOperation::ConnectChild(op) => op.execute(ctx) AnyOperation::Invalidate(op) => op.execute(ctx) AnyOperation::UpdateOutput(op) => op.execute(ctx) - AnyOperation::UpdateCell(op) => op.execute(ctx) AnyOperation::CleanupOldEdges(op) => op.execute(ctx) AnyOperation::AggregationUpdate(op) => op.execute(ctx) AnyOperation::Nested(ops) => { impl AnyOperation { impl_operation!(ConnectChild connect_child::ConnectChildOperation); impl_operation!(Invalidate invalidate::InvalidateOperation); impl_operation!(UpdateOutput update_output::UpdateOutputOperation); -impl_operation!(UpdateCell update_cell::UpdateCellOperation); impl_operation!(CleanupOldEdges cleanup_old_edges::CleanupOldEdgesOperation); impl_operation!(AggregationUpdate aggregation_update::AggregationUpdateQueue); pub use self::{ cleanup_old_edges::OutdatedEdge connect_children::connect_children prepare_new_children::prepare_new_children + update_cell::UpdateCellOperation update_collectible::UpdateCollectibleOperation };
vercel/next.js,c38833d10934d9b151016adcac0d322dbf360690,Tobias Koppers,2025-10-05 08:25:14,"Revert ""Turbopack: skip invalidating a task on cell/output change when the dependency is outdated"" (#84526)  Reverts vercel/next.js#84376",turbopack/crates/turbo-tasks-backend/src/backend/operation/update_output.rs,5,23,28,"use crate::{ TaskDataCategory operation::{ AggregationUpdateQueue ExecuteContext Operation TaskGuard - invalidate::make_task_dirty_internal + invalidate::{make_task_dirty make_task_dirty_internal} } storage::{get get_many} } use crate::{ #[derive(Serialize Deserialize Clone Default)] pub enum UpdateOutputOperation { MakeDependentTasksDirty { + #[cfg(feature = ""trace_task_dirty"")] task_id: TaskId dependent_tasks: SmallVec<[TaskId; 4]> children: SmallVec<[TaskId; 4]> impl UpdateOutputOperation { } UpdateOutputOperation::MakeDependentTasksDirty { + #[cfg(feature = ""trace_task_dirty"")] task_id dependent_tasks children impl Operation for UpdateOutputOperation { ctx.operation_suspend_point(&self); match self { UpdateOutputOperation::MakeDependentTasksDirty { + #[cfg(feature = ""trace_task_dirty"")] task_id ref mut dependent_tasks ref mut children ref mut queue } => { if let Some(dependent_task_id) = dependent_tasks.pop() { - if ctx.is_once_task(dependent_task_id) { - // once tasks are never invalidated - continue; - } - let dependent = ctx.task(dependent_task_id TaskDataCategory::All); - if dependent.has_key(&CachedDataItemKey::OutdatedOutputDependency { - target: task_id - }) { - // output dependency is outdated so it hasn't read the output yet - // and doesn't need to be invalidated - continue; - } - if !dependent - .has_key(&CachedDataItemKey::OutputDependency { target: task_id }) - { - // output dependency has been removed so the task doesn't depend on the - // output anymore and doesn't need to be invalidated - continue; - } - make_task_dirty_internal( - dependent + make_task_dirty( dependent_task_id - true #[cfg(feature = ""trace_task_dirty"")] TaskDirtyCause::OutputChange { task_id } queue"
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,lerna.json,1,1,2,"""registry"": ""https://registry.npmjs.org/"" } } - ""version"": ""15.6.0-canary.42"" + ""version"": ""15.6.0-canary.43"" }"
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,packages/create-next-app/package.json,1,1,2,"{ ""name"": ""create-next-app"" - ""version"": ""15.6.0-canary.42"" + ""version"": ""15.6.0-canary.43"" ""keywords"": [ ""react"" ""next"""
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,packages/eslint-config-next/package.json,2,2,4,"{ ""name"": ""eslint-config-next"" - ""version"": ""15.6.0-canary.42"" + ""version"": ""15.6.0-canary.43"" ""description"": ""ESLint configuration used by Next.js."" ""main"": ""index.js"" ""license"": ""MIT"" } ""homepage"": ""https://nextjs.org/docs/app/api-reference/config/eslint"" ""dependencies"": { - ""@next/eslint-plugin-next"": ""15.6.0-canary.42"" + ""@next/eslint-plugin-next"": ""15.6.0-canary.43"" ""@rushstack/eslint-patch"": ""^1.10.3"" ""@typescript-eslint/eslint-plugin"": ""^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0"" ""@typescript-eslint/parser"": ""^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0"""
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,packages/eslint-plugin-internal/package.json,1,1,2,"{ ""name"": ""@next/eslint-plugin-internal"" ""private"": true - ""version"": ""15.6.0-canary.42"" + ""version"": ""15.6.0-canary.43"" ""description"": ""ESLint plugin for working on Next.js."" ""exports"": { ""."": ""./src/eslint-plugin-internal.js"""
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,packages/eslint-plugin-next/package.json,1,1,2,"{ ""name"": ""@next/eslint-plugin-next"" - ""version"": ""15.6.0-canary.42"" + ""version"": ""15.6.0-canary.43"" ""description"": ""ESLint plugin for Next.js."" ""main"": ""dist/index.js"" ""types"": ""dist/index.d.ts"""
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,packages/font/package.json,1,1,2,"{ ""name"": ""@next/font"" ""private"": true - ""version"": ""15.6.0-canary.42"" + ""version"": ""15.6.0-canary.43"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/font"""
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,packages/next-bundle-analyzer/package.json,1,1,2,"{ ""name"": ""@next/bundle-analyzer"" - ""version"": ""15.6.0-canary.42"" + ""version"": ""15.6.0-canary.43"" ""main"": ""index.js"" ""types"": ""index.d.ts"" ""license"": ""MIT"""
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,packages/next-codemod/package.json,1,1,2,"{ ""name"": ""@next/codemod"" - ""version"": ""15.6.0-canary.42"" + ""version"": ""15.6.0-canary.43"" ""license"": ""MIT"" ""repository"": { ""type"": ""git"""
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,packages/next-env/package.json,1,1,2,"{ ""name"": ""@next/env"" - ""version"": ""15.6.0-canary.42"" + ""version"": ""15.6.0-canary.43"" ""keywords"": [ ""react"" ""next"""
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,packages/next-mdx/package.json,1,1,2,"{ ""name"": ""@next/mdx"" - ""version"": ""15.6.0-canary.42"" + ""version"": ""15.6.0-canary.43"" ""main"": ""index.js"" ""license"": ""MIT"" ""repository"": {"
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,packages/next-plugin-storybook/package.json,1,1,2,"{ ""name"": ""@next/plugin-storybook"" - ""version"": ""15.6.0-canary.42"" + ""version"": ""15.6.0-canary.43"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/next-plugin-storybook"""
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,packages/next-polyfill-module/package.json,1,1,2,"{ ""name"": ""@next/polyfill-module"" - ""version"": ""15.6.0-canary.42"" + ""version"": ""15.6.0-canary.43"" ""description"": ""A standard library polyfill for ES Modules supporting browsers (Edge 16+ Firefox 60+ Chrome 61+ Safari 10.1+)"" ""main"": ""dist/polyfill-module.js"" ""license"": ""MIT"""
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,packages/next-polyfill-nomodule/package.json,1,1,2,"{ ""name"": ""@next/polyfill-nomodule"" - ""version"": ""15.6.0-canary.42"" + ""version"": ""15.6.0-canary.43"" ""description"": ""A polyfill for non-dead nomodule browsers."" ""main"": ""dist/polyfill-nomodule.js"" ""license"": ""MIT"""
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,packages/next-rspack/package.json,1,1,2,"{ ""name"": ""next-rspack"" - ""version"": ""15.6.0-canary.42"" + ""version"": ""15.6.0-canary.43"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/next-rspack"""
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,packages/next-swc/package.json,1,1,2,"{ ""name"": ""@next/swc"" - ""version"": ""15.6.0-canary.42"" + ""version"": ""15.6.0-canary.43"" ""private"": true ""files"": [ ""native/"""
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,packages/next/package.json,7,7,14,"{ ""name"": ""next"" - ""version"": ""15.6.0-canary.42"" + ""version"": ""15.6.0-canary.43"" ""description"": ""The React Framework"" ""main"": ""./dist/server/next.js"" ""license"": ""MIT"" ] } ""dependencies"": { - ""@next/env"": ""15.6.0-canary.42"" + ""@next/env"": ""15.6.0-canary.43"" ""@swc/helpers"": ""0.5.15"" ""caniuse-lite"": ""^1.0.30001579"" ""postcss"": ""8.4.31"" ""@modelcontextprotocol/sdk"": ""1.18.1"" ""@mswjs/interceptors"": ""0.23.0"" ""@napi-rs/triples"": ""1.2.0"" - ""@next/font"": ""15.6.0-canary.42"" - ""@next/polyfill-module"": ""15.6.0-canary.42"" - ""@next/polyfill-nomodule"": ""15.6.0-canary.42"" - ""@next/react-refresh-utils"": ""15.6.0-canary.42"" - ""@next/swc"": ""15.6.0-canary.42"" + ""@next/font"": ""15.6.0-canary.43"" + ""@next/polyfill-module"": ""15.6.0-canary.43"" + ""@next/polyfill-nomodule"": ""15.6.0-canary.43"" + ""@next/react-refresh-utils"": ""15.6.0-canary.43"" + ""@next/swc"": ""15.6.0-canary.43"" ""@opentelemetry/api"": ""1.6.0"" ""@playwright/test"": ""1.51.1"" ""@rspack/core"": ""1.5.0"""
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,packages/react-refresh-utils/package.json,1,1,2,"{ ""name"": ""@next/react-refresh-utils"" - ""version"": ""15.6.0-canary.42"" + ""version"": ""15.6.0-canary.43"" ""description"": ""An experimental package providing utilities for React Refresh."" ""repository"": { ""url"": ""vercel/next.js"""
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,packages/third-parties/package.json,2,2,4,"{ ""name"": ""@next/third-parties"" - ""version"": ""15.6.0-canary.42"" + ""version"": ""15.6.0-canary.43"" ""repository"": { ""url"": ""vercel/next.js"" ""directory"": ""packages/third-parties"" ""third-party-capital"": ""1.0.20"" } ""devDependencies"": { - ""next"": ""15.6.0-canary.42"" + ""next"": ""15.6.0-canary.43"" ""outdent"": ""0.8.0"" ""prettier"": ""2.5.1"" ""typescript"": ""5.9.2"""
vercel/next.js,d4eb8915334320a39a376b409fb2e359a630d57c,nextjs-bot,2025-10-04 23:24:12,v15.6.0-canary.43,pnpm-lock.yaml,8,8,16,importers: packages/eslint-config-next: dependencies: '@next/eslint-plugin-next': - specifier: 15.6.0-canary.42 + specifier: 15.6.0-canary.43 version: link:../eslint-plugin-next '@rushstack/eslint-patch': specifier: ^1.10.3 importers: packages/next: dependencies: '@next/env': - specifier: 15.6.0-canary.42 + specifier: 15.6.0-canary.43 version: link:../next-env '@swc/helpers': specifier: 0.5.15 importers: specifier: 1.2.0 version: 1.2.0 '@next/font': - specifier: 15.6.0-canary.42 + specifier: 15.6.0-canary.43 version: link:../font '@next/polyfill-module': - specifier: 15.6.0-canary.42 + specifier: 15.6.0-canary.43 version: link:../next-polyfill-module '@next/polyfill-nomodule': - specifier: 15.6.0-canary.42 + specifier: 15.6.0-canary.43 version: link:../next-polyfill-nomodule '@next/react-refresh-utils': - specifier: 15.6.0-canary.42 + specifier: 15.6.0-canary.43 version: link:../react-refresh-utils '@next/swc': - specifier: 15.6.0-canary.42 + specifier: 15.6.0-canary.43 version: link:../next-swc '@opentelemetry/api': specifier: 1.6.0 importers: version: 1.0.20 devDependencies: next: - specifier: 15.6.0-canary.42 + specifier: 15.6.0-canary.43 version: link:../next outdent: specifier: 0.8.0
vercel/next.js,b16e10133edf7a9d34425404afbc342b7b84c9e3,Zack Tanner,2025-10-04 20:16:15,[segment cache]: collectSegmentData should respect experimental.staleTime config (#84520)  When we calculate the desired `staleTime` value we leverage the `selectStaleTime` util which has some logic to fallback to the `experimental.staleTimes` configuration if not otherwise overridden in the prerenderStore. Without this change  the static staleTime from the `/_tree` requests would always be the max (1 year)  regardless of user configuration.  This was caught by `prefetching.stale-times.test.ts` which I have re-enabled & refactored in the next PR in the stack.,packages/next/src/server/app-render/app-render.tsx,2,1,3,async function collectSegmentData( serverModuleMap: getServerModuleMap() } - const staleTime = prerenderStore.stale + const selectStaleTime = createSelectStaleTime(renderOpts.experimental) + const staleTime = selectStaleTime(prerenderStore.stale) return await ComponentMod.collectSegmentData( renderOpts.experimental.clientParamParsing fullPageDataBuffer
vercel/next.js,cc01bcd66c9fb93eb38a7bb4fe2007b7f99324d6,Zack Tanner,2025-10-04 18:19:12,[ci]: de-flake client cache test (#84517)  Waits for prefetches to complete before navigating. [x-ref](https://github.com/vercel/next.js/actions/runs/18237285313/attempts/3),test/e2e/app-dir/app-client-cache/client-cache.experimental.test.ts,6,0,6,"describe('app dir client cache semantics (experimental staleTimes)' () => { it('should re-use the cache for 5 minutes (default ""static"" time)' async () => { const browser = await next.browser('/' browserConfigWithFixedTime) + // Wait for the prefetch to complete before clicking + await browser.waitForIdleNetwork() + let initialRandomNumber = await browser .elementByCss('[href=""/0?timeout=0""]') .click() describe('app dir client cache semantics (experimental staleTimes)' () => { it('should use the custom static override time (3 minutes)' async () => { const browser = await next.browser('/' browserConfigWithFixedTime) + // Wait for the prefetch to complete before clicking + await browser.waitForIdleNetwork() + let initialRandomNumber = await browser .elementByCss('[href=""/0?timeout=0""]') .click()"
vercel/next.js,c6d03456fd455189c4678286f9fe5875c342cbff,Zack Tanner,2025-10-04 00:59:55,[ci]: remove test from segment cache manifest (#84507)  These are passing independently of any fixes,test/client-segment-cache-tests-manifest.json,0,7,7,"""suites"": { ""test/e2e/app-dir/actions/app-action-node-middleware.test.ts"": { ""failed"": [ - ""app-dir action handling fetch actions should handle redirects to routes that provide an invalid RSC response"" ""app-dir action handling should reset the form state when the action redirects to itself"" ] } ""test/e2e/app-dir/actions/app-action.test.ts"": { ""failed"": [ - ""app-dir action handling fetch actions should handle redirects to routes that provide an invalid RSC response"" ""app-dir action handling should reset the form state when the action redirects to itself"" ] } - ""test/e2e/app-dir/app-client-cache/client-cache.experimental.test.ts"": { - ""failed"": [ - ""app dir client cache semantics (experimental staleTimes) static: 180 prefetch={true} should use the custom static override time (3 minutes)"" - ] - } ""test/e2e/app-dir/app-prefetch/prefetching.stale-times.test.ts"": { ""failed"": [ ""app dir - prefetching (custom staleTime) should fetch again when a static page was prefetched when navigating to it after the stale time has passed"""
facebook/react,a4eb2dfa6fec3da5a947eb84c99b059890bb5241,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:24:24,"Release Fragment refs to Canary (#34720)  ## Overview  This PR adds the `ref` prop to `<Fragment>` in `react@canary`.  This means this API is ready for final feedback and prepared for a semver stable release.  ## What this means  Shipping Fragment refs to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like Fragment refs with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like Fragment refs.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like Fragment refs as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#fragment-refs) blog post  and [the new docs for Fragment refs`](https://react.dev/reference/react/Fragment#fragmentinstance) for more info.",fixtures/dom/src/components/fixtures/fragment-refs/ScrollIntoViewCase.js,2,2,4,export default function ScrollIntoViewCase() { const scrollContainerRef = useRef(null); const scrollVertical = () => { - fragmentRef.current.experimental_scrollIntoView(alignToTop); + fragmentRef.current.scrollIntoView(alignToTop); }; const scrollVerticalNoChildren = () => { - noChildRef.current.experimental_scrollIntoView(alignToTop); + noChildRef.current.scrollIntoView(alignToTop); }; useEffect(() => {
facebook/react,a4eb2dfa6fec3da5a947eb84c99b059890bb5241,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:24:24,"Release Fragment refs to Canary (#34720)  ## Overview  This PR adds the `ref` prop to `<Fragment>` in `react@canary`.  This means this API is ready for final feedback and prepared for a semver stable release.  ## What this means  Shipping Fragment refs to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like Fragment refs with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like Fragment refs.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like Fragment refs as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#fragment-refs) blog post  and [the new docs for Fragment refs`](https://react.dev/reference/react/Fragment#fragmentinstance) for more info.",packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js,2,2,4,function validateDocumentPositionWithFiberTree( if (enableFragmentRefsScrollIntoView) { // $FlowFixMe[prop-missing] - FragmentInstance.prototype.experimental_scrollIntoView = function ( + FragmentInstance.prototype.scrollIntoView = function ( this: FragmentInstanceType alignToTop?: boolean ): void { if (typeof alignToTop === 'object') { throw new Error( - 'FragmentInstance.experimental_scrollIntoView() does not support ' + + 'FragmentInstance.scrollIntoView() does not support ' + 'scrollIntoViewOptions. Use the alignToTop boolean instead.' ); }
facebook/react,a4eb2dfa6fec3da5a947eb84c99b059890bb5241,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:24:24,"Release Fragment refs to Canary (#34720)  ## Overview  This PR adds the `ref` prop to `<Fragment>` in `react@canary`.  This means this API is ready for final feedback and prepared for a semver stable release.  ## What this means  Shipping Fragment refs to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like Fragment refs with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like Fragment refs.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like Fragment refs as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#fragment-refs) blog post  and [the new docs for Fragment refs`](https://react.dev/reference/react/Fragment#fragmentinstance) for more info.",packages/shared/ReactFeatureFlags.js,2,2,4,export const transitionLaneExpirationMs = 5000; */ export const enableInfiniteRenderLoopDetection: boolean = false; -export const enableFragmentRefs = __EXPERIMENTAL__; -export const enableFragmentRefsScrollIntoView = __EXPERIMENTAL__; +export const enableFragmentRefs: boolean = true; +export const enableFragmentRefsScrollIntoView: boolean = true; // ----------------------------------------------------------------------------- // Ready for next major.
facebook/react,a4eb2dfa6fec3da5a947eb84c99b059890bb5241,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:24:24,"Release Fragment refs to Canary (#34720)  ## Overview  This PR adds the `ref` prop to `<Fragment>` in `react@canary`.  This means this API is ready for final feedback and prepared for a semver stable release.  ## What this means  Shipping Fragment refs to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like Fragment refs with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like Fragment refs.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like Fragment refs as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#fragment-refs) blog post  and [the new docs for Fragment refs`](https://react.dev/reference/react/Fragment#fragmentinstance) for more info.",packages/shared/forks/ReactFeatureFlags.native-oss.js,1,1,2,export const enableHydrationChangeEvent: boolean = false; export const enableDefaultTransitionIndicator: boolean = false; export const ownerStackLimit = 1e4; -export const enableFragmentRefs: boolean = false; +export const enableFragmentRefs: boolean = true; export const enableFragmentRefsScrollIntoView: boolean = false; // Profiling Only
facebook/react,a4eb2dfa6fec3da5a947eb84c99b059890bb5241,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:24:24,"Release Fragment refs to Canary (#34720)  ## Overview  This PR adds the `ref` prop to `<Fragment>` in `react@canary`.  This means this API is ready for final feedback and prepared for a semver stable release.  ## What this means  Shipping Fragment refs to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like Fragment refs with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like Fragment refs.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like Fragment refs as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#fragment-refs) blog post  and [the new docs for Fragment refs`](https://react.dev/reference/react/Fragment#fragmentinstance) for more info.",packages/shared/forks/ReactFeatureFlags.test-renderer.js,2,2,4,export const enableHydrationChangeEvent: boolean = false; export const enableDefaultTransitionIndicator: boolean = false; export const ownerStackLimit = 1e4; -export const enableFragmentRefs: boolean = false; -export const enableFragmentRefsScrollIntoView: boolean = false; +export const enableFragmentRefs: boolean = true; +export const enableFragmentRefsScrollIntoView: boolean = true; // TODO: This must be in sync with the main ReactFeatureFlags file because // the Test Renderer's value must be the same as the one used by the
facebook/react,a4eb2dfa6fec3da5a947eb84c99b059890bb5241,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:24:24,"Release Fragment refs to Canary (#34720)  ## Overview  This PR adds the `ref` prop to `<Fragment>` in `react@canary`.  This means this API is ready for final feedback and prepared for a semver stable release.  ## What this means  Shipping Fragment refs to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like Fragment refs with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like Fragment refs.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like Fragment refs as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#fragment-refs) blog post  and [the new docs for Fragment refs`](https://react.dev/reference/react/Fragment#fragmentinstance) for more info.",scripts/error-codes/codes.json,1,1,2,"""563"": ""This render completed successfully. All cacheSignals are now aborted to allow clean up of any unused resources."" ""564"": ""Unknown command. The debugChannel was not wired up properly."" ""565"": ""resolveDebugMessage/closeDebugChannel should not be called for a Request that wasn't kept alive. This is a bug in React."" - ""566"": ""FragmentInstance.experimental_scrollIntoView() does not support scrollIntoViewOptions. Use the alignToTop boolean instead."" + ""566"": ""FragmentInstance.scrollIntoView() does not support scrollIntoViewOptions. Use the alignToTop boolean instead."" }"
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",fixtures/view-transition/src/components/App.js,1,1,2,import React { useLayoutEffect useEffect useState - unstable_addTransitionType as addTransitionType + addTransitionType } from 'react'; import Chrome from './Chrome.js';
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",fixtures/view-transition/src/components/Page.js,2,2,4,import React { - unstable_addTransitionType as addTransitionType - unstable_ViewTransition as ViewTransition + addTransitionType + ViewTransition Activity useLayoutEffect useEffect
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/react-devtools-shared/src/__tests__/storeComponentFilters-test.js,2,1,3,describe('Store component filters' () => { }); it('should filter ViewTransition' async () => { - const ViewTransition = React.unstable_ViewTransition; + const ViewTransition = + React.ViewTransition || React.unstable_ViewTransition; if (ViewTransition != null) { await actAsync(async () =>
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/react-dom/src/__tests__/ReactDOMFizzViewTransition-test.js,1,1,2,describe('ReactDOMFizzViewTransition' () => { Stream = require('stream'); Suspense = React.Suspense; - ViewTransition = React.unstable_ViewTransition; + ViewTransition = React.ViewTransition; // Test Environment const jsdom = new JSDOM(
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/react-reconciler/src/__tests__/ReactErrorStacks-test.js,1,1,2,describe('ReactFragment' () => { React = require('react'); Suspense = React.Suspense; Activity = React.Activity; - ViewTransition = React.unstable_ViewTransition; + ViewTransition = React.ViewTransition; ReactNoop = require('react-noop-renderer'); const InternalTestUtils = require('internal-test-utils'); waitForAll = InternalTestUtils.waitForAll;
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js,2,2,4,"describe('ReactLazy' () => { // @gate enableViewTransition it('throws with a useful error when wrapping ViewTransition with lazy()' async () => { - const BadLazy = lazy(() => fakeImport(React.unstable_ViewTransition)); + const BadLazy = lazy(() => fakeImport(React.ViewTransition)); const root = ReactTestRenderer.create( <Suspense fallback={<Text text=""Loading..."" />}> describe('ReactLazy' () => { await waitForAll(['Loading...']); - await resolveFakeImport(React.unstable_ViewTransition); + await resolveFakeImport(React.ViewTransition); root.update( <Suspense fallback={<Text text=""Loading..."" />}> <BadLazy />"
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/react-reconciler/src/__tests__/ViewTransitionReactServer-test.js,1,1,2,describe('ViewTransitionReactServer' () => { jest.resetModules(); jest.mock('react' () => require('react/react.react-server')); ReactServer = require('react'); - ViewTransition = ReactServer.unstable_ViewTransition; + ViewTransition = ReactServer.ViewTransition; ReactNoopFlightServer = require('react-noop-renderer/flight-server'); jest.resetModules();
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/react/index.development.js,2,0,2,export { startTransition unstable_LegacyHidden Activity + ViewTransition + addTransitionType unstable_Scope unstable_SuspenseList unstable_TracingMarker
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/react/index.experimental.development.js,2,2,4,export { unstable_postpone unstable_getCacheForType unstable_SuspenseList - unstable_ViewTransition + ViewTransition unstable_startGestureTransition - unstable_addTransitionType + addTransitionType unstable_useCacheRefresh useId useCallback
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/react/index.experimental.js,2,2,4,export { unstable_postpone unstable_getCacheForType unstable_SuspenseList - unstable_ViewTransition + ViewTransition unstable_startGestureTransition - unstable_addTransitionType + addTransitionType unstable_useCacheRefresh useId useCallback
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/react/index.fb.js,4,2,6,export { unstable_LegacyHidden unstable_Scope unstable_SuspenseList - unstable_ViewTransition + ViewTransition + ViewTransition as unstable_ViewTransition unstable_TracingMarker - unstable_addTransitionType + addTransitionType + addTransitionType as unstable_addTransitionType unstable_useCacheRefresh use useActionState
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/react/index.js,2,2,4,export { unstable_Scope unstable_SuspenseList unstable_TracingMarker - unstable_ViewTransition - unstable_addTransitionType + ViewTransition + addTransitionType unstable_getCacheForType unstable_useCacheRefresh useId
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/react/index.stable.development.js,2,0,2,export { PureComponent StrictMode Suspense + ViewTransition + addTransitionType cloneElement createContext createElement
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/react/index.stable.js,2,0,2,export { PureComponent StrictMode Suspense + ViewTransition + addTransitionType cloneElement createContext createElement
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/react/src/ReactClient.js,2,2,4,export { // enableTransitionTracing REACT_TRACING_MARKER_TYPE as unstable_TracingMarker // enableViewTransition - REACT_VIEW_TRANSITION_TYPE as unstable_ViewTransition - addTransitionType as unstable_addTransitionType + REACT_VIEW_TRANSITION_TYPE as ViewTransition + addTransitionType as addTransitionType // enableGestureTransition startGestureTransition as unstable_startGestureTransition // DEV-only
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/react/src/ReactServer.experimental.development.js,1,1,2,export { REACT_PROFILER_TYPE as Profiler REACT_STRICT_MODE_TYPE as StrictMode REACT_SUSPENSE_TYPE as Suspense + REACT_VIEW_TRANSITION_TYPE as ViewTransition cloneElement createElement createRef export { version // Experimental REACT_SUSPENSE_LIST_TYPE as unstable_SuspenseList - REACT_VIEW_TRANSITION_TYPE as unstable_ViewTransition captureOwnerStack // DEV-only };
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/react/src/ReactServer.experimental.js,1,1,2,export { REACT_PROFILER_TYPE as Profiler REACT_STRICT_MODE_TYPE as StrictMode REACT_SUSPENSE_TYPE as Suspense + REACT_VIEW_TRANSITION_TYPE as ViewTransition cloneElement createElement createRef export { version // Experimental REACT_SUSPENSE_LIST_TYPE as unstable_SuspenseList - REACT_VIEW_TRANSITION_TYPE as unstable_ViewTransition };
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/react/src/ReactServer.fb.js,2,1,3,export { REACT_PROFILER_TYPE as Profiler REACT_STRICT_MODE_TYPE as StrictMode REACT_SUSPENSE_TYPE as Suspense + REACT_VIEW_TRANSITION_TYPE as ViewTransition + REACT_VIEW_TRANSITION_TYPE as unstable_ViewTransition cloneElement createElement createRef export { captureOwnerStack // DEV-only // Experimental REACT_SUSPENSE_LIST_TYPE as unstable_SuspenseList - REACT_VIEW_TRANSITION_TYPE as unstable_ViewTransition };
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/react/src/ReactServer.js,2,0,2,import { REACT_PROFILER_TYPE REACT_STRICT_MODE_TYPE REACT_SUSPENSE_TYPE + REACT_VIEW_TRANSITION_TYPE } from 'shared/ReactSymbols'; import { cloneElement export { REACT_PROFILER_TYPE as Profiler REACT_STRICT_MODE_TYPE as StrictMode REACT_SUSPENSE_TYPE as Suspense + REACT_VIEW_TRANSITION_TYPE as ViewTransition cloneElement createElement createRef
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/shared/ReactFeatureFlags.js,1,1,2,export const enablePostpone = __EXPERIMENTAL__; export const enableHalt: boolean = true; -export const enableViewTransition = __EXPERIMENTAL__; +export const enableViewTransition: boolean = true; export const enableGestureTransition = __EXPERIMENTAL__;
facebook/react,6a8c7fb6f1108577c97eeb5703018ece915dcdeb,"Sebastian ""Sebbie"" Silbermann",2025-10-07 04:23:34,"Release `<ViewTransition />` to Canary (#34712)  ## Overview  This PR ships the View Transition APIs to `react@canary`: - [`<ViewTransition />`](https://react.dev/reference/react/ViewTransition) - [`addTransitionType`](https://react.dev/reference/react/addTransitionType)  This means these APIs are ready for final feedback and prepare for semver stable release.  ## What this means  Shipping `<ViewTransition />` and `addTransitionType` to canary means they have gone through extensive testing in production  we are confident in the stability of the APIs  and we are preparing to release it in a future semver stable version.  Libraries and frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) should begin implementing and testing these features.  ## Why we follow the Canary Workflow  To prepare for semver stable  libraries should test canary features like `<ViewTransition />` with `react@canary` to confirm compatibility and prepare for the next semver release in a myriad of environments and configurations used throughout the React ecosystem. This provides libraries with ample time to catch any issues we missed before slamming them with problems in the wider semver release.  Since these features have already gone through extensive production testing  and we are confident they are stable  frameworks following the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries) can also begin adopting canary features like `<ViewTransition />`.  This adoption is similar to how different Browsers implement new proposed browser features before they are added to the standard. If a frameworks adopts a canary feature  they are committing to stability for their users by ensuring any API changes before a semver stable release are opaque and non-breaking to their users.  Apps not using a framework are also free to adopt canary features like `<ViewTransition>` as long as they follow the [Canary Workflow](https://react.dev/blog/2023/05/03/react-canaries)  but we generally recommend waiting for a semver stable release unless you have the capacity to commit to following along with the canary changes and debugging library compatibility issues.  Waiting for semver stable means you're able to benefit from libraries testing and confirming support  and use semver as signal for which version of a library you can use with support of the feature.  ## Docs   Check out the [""React Labs: View Transitions  Activity  and more""](https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#view-transitions) blog post  and [the new docs for `<ViewTransition />`](https://react.dev/reference/react/ViewTransition) and [`addTransitionType`](https://react.dev/reference/react/addTransitionType) for more info.",packages/shared/forks/ReactFeatureFlags.native-oss.js,1,1,2,export const enableHydrationLaneScheduling: boolean = true; export const enableYieldingBeforePassive: boolean = false; export const enableThrottledScheduling: boolean = false; -export const enableViewTransition: boolean = false; +export const enableViewTransition: boolean = true; export const enableGestureTransition: boolean = false; export const enableScrollEndPolyfill: boolean = true; export const enableSuspenseyImages: boolean = false;
facebook/react,b65e6fc58b8c9a35e2c2ea7d1952fc1499cef09b,lauren,2025-10-06 16:43:39,Revert [eprh] Remove hermes-parser (#34747)  Adds back HermesParser to eslint-plugin-react-hooks. There are still [external users of Flow](https://github.com/facebook/react/pull/34719#issuecomment-3368137743) using the plugin  so we shouldn't break the plugin for them. However  we still have the problem of double parsing: once from eslint (which we discard) and then another via babel/hermes parser.  In the long run we should investigate a translation layer from estree to babel (or alternatively  update the compiler to take estree as input). But for now  I am reverting the PR.  This does mean that [Sandpack in react.dev](https://github.com/reactjs/react.dev/blob/11cb6b591571caf5fa2a192117b6a6445c3f2027/src/components/MDX/Sandpack/runESLint.tsx#L31) cannot update to the latest eprh as HermesParser does not appear to be able to be run in a browser. I discovered this while trying to update eprh on react.dev last week  but didn't investigate deeply. I'll need to double check that again to find out more.,packages/eslint-plugin-react-hooks/package.json,1,0,1,"""dependencies"": { ""@babel/core"": ""^7.24.4"" ""@babel/parser"": ""^7.24.4"" + ""hermes-parser"": ""^0.25.1"" ""zod"": ""^3.22.4 || ^4.0.0"" ""zod-validation-error"": ""^3.0.3 || ^4.0.0"" }"
facebook/react,b65e6fc58b8c9a35e2c2ea7d1952fc1499cef09b,lauren,2025-10-06 16:43:39,Revert [eprh] Remove hermes-parser (#34747)  Adds back HermesParser to eslint-plugin-react-hooks. There are still [external users of Flow](https://github.com/facebook/react/pull/34719#issuecomment-3368137743) using the plugin  so we shouldn't break the plugin for them. However  we still have the problem of double parsing: once from eslint (which we discard) and then another via babel/hermes parser.  In the long run we should investigate a translation layer from estree to babel (or alternatively  update the compiler to take estree as input). But for now  I am reverting the PR.  This does mean that [Sandpack in react.dev](https://github.com/reactjs/react.dev/blob/11cb6b591571caf5fa2a192117b6a6445c3f2027/src/components/MDX/Sandpack/runESLint.tsx#L31) cannot update to the latest eprh as HermesParser does not appear to be able to be run in a browser. I discovered this while trying to update eprh on react.dev last week  but didn't investigate deeply. I'll need to double check that again to find out more.,packages/eslint-plugin-react-hooks/src/shared/RunReactCompiler.ts,23,8,31,import BabelPluginReactCompiler { LoggerEvent } from 'babel-plugin-react-compiler'; import type {SourceCode} from 'eslint'; +import * as HermesParser from 'hermes-parser'; import {isDeepStrictEqual} from 'util'; import type {ParseResult} from '@babel/parser'; function runReactCompilerImpl({ } let babelAST: ParseResult<File> | null = null; - try { - babelAST = babelParse(sourceCode.text { - sourceFilename: filename - sourceType: 'unambiguous' - plugins: ['typescript' 'jsx'] - }); - } catch (err: unknown) { - /* empty */ + + if (filename.endsWith('.tsx') || filename.endsWith('.ts')) { + try { + babelAST = babelParse(sourceCode.text { + sourceFilename: filename + sourceType: 'unambiguous' + plugins: ['typescript' 'jsx'] + }); + } catch { + /* empty */ + } + } else { + try { + babelAST = HermesParser.parse(sourceCode.text { + babel: true + enableExperimentalComponentSyntax: true + sourceFilename: filename + sourceType: 'module' + }); + } catch { + /* empty */ + } } if (babelAST != null) {
facebook/react,c78625842239f29ff130136fff2729fd4c7c2e91,lauren,2025-10-06 04:53:21,[eprh] Fix config type not being exported correctly (#34746)  Another attempt to fix #34745. I updated our fixture for eslint-v9 to include running tsc. I believe there were 2 issues:  1. `export * from './cjs/eslint-plugin-react-hooks'` in npm/index.d.ts was no longer correct as we updated index.ts to export default instead of named exports 2. After fixing ^ there was a typescript error which I fixed by making some small tweaks,fixtures/eslint-v9/eslint.config.ts,1,4,5,export default defineConfig([ } } } - plugins: { - 'react-hooks': reactHooks - } - extends: ['react-hooks/recommended-latest'] + extends: [reactHooks.configs['recommended-latest']] rules: { 'react-hooks/exhaustive-deps': 'error' }
facebook/react,c78625842239f29ff130136fff2729fd4c7c2e91,lauren,2025-10-06 04:53:21,[eprh] Fix config type not being exported correctly (#34746)  Another attempt to fix #34745. I updated our fixture for eslint-v9 to include running tsc. I believe there were 2 issues:  1. `export * from './cjs/eslint-plugin-react-hooks'` in npm/index.d.ts was no longer correct as we updated index.ts to export default instead of named exports 2. After fixing ^ there was a typescript error which I fixed by making some small tweaks,fixtures/eslint-v9/package.json,4,1,5,"} ""scripts"": { ""build"": ""node build.mjs && yarn"" - ""lint"": ""eslint index.js --report-unused-disable-directives"" + ""lint"": ""tsc --noEmit && eslint index.js --report-unused-disable-directives"" + } + ""devDependencies"": { + ""typescript"": ""^5.4.3"" } }"
facebook/react,c78625842239f29ff130136fff2729fd4c7c2e91,lauren,2025-10-06 04:53:21,[eprh] Fix config type not being exported correctly (#34746)  Another attempt to fix #34745. I updated our fixture for eslint-v9 to include running tsc. I believe there were 2 issues:  1. `export * from './cjs/eslint-plugin-react-hooks'` in npm/index.d.ts was no longer correct as we updated index.ts to export default instead of named exports 2. After fixing ^ there was a typescript error which I fixed by making some small tweaks,fixtures/eslint-v9/tsconfig.json,18,0,18,"{ + ""compilerOptions"": { + ""lib"": [ + ""es2022"" + ] + ""module"": ""nodenext"" + ""moduleResolution"": ""nodenext"" + ""target"": ""es2022"" + ""typeRoots"": [ + ""./node_modules/@types"" + ] + ""skipLibCheck"": true + } + ""exclude"": [ + ""node_modules"" + ""**/node_modules"" + ""../node_modules"" + ""../../node_modules"" + ] }"
facebook/react,c78625842239f29ff130136fff2729fd4c7c2e91,lauren,2025-10-06 04:53:21,[eprh] Fix config type not being exported correctly (#34746)  Another attempt to fix #34745. I updated our fixture for eslint-v9 to include running tsc. I believe there were 2 issues:  1. `export * from './cjs/eslint-plugin-react-hooks'` in npm/index.d.ts was no longer correct as we updated index.ts to export default instead of named exports 2. After fixing ^ there was a typescript error which I fixed by making some small tweaks,packages/eslint-plugin-react-hooks/npm/index.d.ts,1,1,2,* LICENSE file in the root directory of this source tree. */ -export * from './cjs/eslint-plugin-react-hooks'; +export {default} from './cjs/eslint-plugin-react-hooks';
facebook/react,c78625842239f29ff130136fff2729fd4c7c2e91,lauren,2025-10-06 04:53:21,[eprh] Fix config type not being exported correctly (#34746)  Another attempt to fix #34745. I updated our fixture for eslint-v9 to include running tsc. I believe there were 2 issues:  1. `export * from './cjs/eslint-plugin-react-hooks'` in npm/index.d.ts was no longer correct as we updated index.ts to export default instead of named exports 2. After fixing ^ there was a typescript error which I fixed by making some small tweaks,packages/eslint-plugin-react-hooks/src/index.ts,8,3,11,const allRuleConfigs: Linter.RulesRecord = { ...compilerRuleConfigs }; +type FlatConfig = { + plugins: Record<string any>; + rules: Linter.RulesRecord; +}; + const plugin = { meta: { name: 'eslint-plugin-react-hooks' const plugin = { plugins: Array<string>; rules: Linter.RulesRecord; }; - 'flat/recommended': Array<Linter.Config>; - 'recommended-latest': Array<Linter.Config>; - recommended: Array<Linter.Config>; + 'flat/recommended': Array<FlatConfig>; + 'recommended-latest': Array<FlatConfig>; + recommended: Array<FlatConfig>; } };
facebook/react,3b2a3981068e0438ca75ae34b2a98616fdaf62ac,Ruslan Lesiutin,2025-10-05 12:45:41,[DevTools] Bump version of react-devtools-core for react-devtools (#34740)  This one was overlooked and yarn.lock was not synced.  Related: - https://github.com/facebook/react/pull/34692 - https://github.com/facebook/react/pull/34723,packages/react-devtools/package.json,1,1,2,"""electron"": ""^23.1.2"" ""internal-ip"": ""^6.2.0"" ""minimist"": ""^1.2.3"" - ""react-devtools-core"": ""6.1.5"" + ""react-devtools-core"": ""7.0.0"" ""update-notifier"": ""^2.1.0"" } }"
facebook/react,3b2a3981068e0438ca75ae34b2a98616fdaf62ac,Ruslan Lesiutin,2025-10-05 12:45:41,[DevTools] Bump version of react-devtools-core for react-devtools (#34740)  This one was overlooked and yarn.lock was not synced.  Related: - https://github.com/facebook/react/pull/34692 - https://github.com/facebook/react/pull/34723,yarn.lock,8,8,16,"zip-stream@^2.1.2: compress-commons ""^2.1.1"" readable-stream ""^3.4.0"" -zod-validation-error@^3.0.3: - version ""3.4.0"" - resolved ""https://registry.yarnpkg.com/zod-validation-error/-/zod-validation-error-3.4.0.tgz#3a8a1f55c65579822d7faa190b51336c61bee2a6"" - integrity sha512-ZOPR9SVY6Pb2qqO5XHt+MkkTRxGXb4EVtnjc9JpXUOtUB1T9Ru7mZOT361AN3MsetVe7R0a1KZshJDZdgp9miQ== +""zod-validation-error@^3.0.3 || ^4.0.0"": + version ""4.0.2"" + resolved ""https://registry.yarnpkg.com/zod-validation-error/-/zod-validation-error-4.0.2.tgz#bc605eba49ce0fcd598c127fee1c236be3f22918"" + integrity sha512-Q6/nZLe6jxuU80qb/4uJ4t5v2VEZ44lzQjPDhYJNztRQ4wyWc6VF3D3Kb/fAuPetZQnhS3hnajCf9CsWesghLQ== -zod@^3.22.4: - version ""3.24.2"" - resolved ""https://registry.yarnpkg.com/zod/-/zod-3.24.2.tgz#8efa74126287c675e92f46871cfc8d15c34372b3"" - integrity sha512-lY7CDW43ECgW9u1TcT3IoXHflywfVqDYze4waEz812jR/bZ8FHDsl7pFQoSZTz5N+2NqRXs8GBwnAwo3ZNxqhQ== +""zod@^3.22.4 || ^4.0.0"": + version ""4.1.11"" + resolved ""https://registry.yarnpkg.com/zod/-/zod-4.1.11.tgz#4aab62f76cfd45e6c6166519ba31b2ea019f75f5"" + integrity sha512-WPsqwxITS2tzx1bzhIKsEs19ABD5vmCVa4xBo2tq/SrV4RNZtfws1EnCWQXM6yh8bD08a1idvkB5MZSBiZsjwg=="
facebook/react,62ff1e61fce3eca9346716715679e7604477d84d,Ruslan Lesiutin,2025-10-05 12:35:07,"Revert ""[DevTools] Always include the root in the timeline and select it by default"" (#34739)  Reverts facebook/react#34654",packages/react-devtools-shared/src/devtools/views/SuspenseTab/SuspenseTab.js,0,16,16,import { SuspenseTreeStateContext } from './SuspenseTreeContext'; import {StoreContext OptionsContext} from '../context'; -import { - TreeDispatcherContext - TreeStateContext -} from '../Components/TreeContext'; import Button from '../Button'; import Toggle from '../Toggle'; import typeof {SyntheticPointerEvent} from 'react-dom-bindings/src/events/SyntheticEvent'; function SuspenseTab(_: {}) { treeListHorizontalFraction } = state; - const {inspectedElementID} = useContext(TreeStateContext); - const {timeline} = useContext(SuspenseTreeStateContext); - const treeDispatch = useContext(TreeDispatcherContext); - useLayoutEffect(() => { - // If the inspected element is still null and we've loaded a timeline we can set the initial selection. - // TODO: This tab should use its own source of truth instead so we only show suspense boundaries. - if (inspectedElementID === null && timeline.length > 0) { - const milestone = timeline[timeline.length - 1]; - treeDispatch({type: 'SELECT_ELEMENT_BY_ID' payload: milestone}); - } - } [timeline inspectedElementID]); - useLayoutEffect(() => { const wrapperElement = wrapperTreeRef.current;
facebook/react,0e79784702927f1d1c6c212475e7c5141fa13a8a,Sebastian Markbåge,2025-10-05 12:13:22,[DevTools] Use documentElement to override cmd+F (#34734)  We override Cmd+F to jump to our search input instead of searching through the HTML. This is ofc critical since our view virtualized.  However  Chrome DevTools installs its own listener on the document as well (in the bubble phase) so if we prevent it at the document level it's too late and it ends up stealing the focus instead. If we instead listen at the documentElement it works as intended.,packages/react-devtools-shared/src/devtools/views/SearchInput.js,10,5,15,export default function SearchInput({ const handleKeyDown = (event: KeyboardEvent) => { const {key metaKey} = event; if (key === 'f' && metaKey) { - if (inputRef.current !== null) { - inputRef.current.focus(); + const inputElement = inputRef.current; + if (inputElement !== null) { + inputElement.focus(); event.preventDefault(); event.stopPropagation(); } export default function SearchInput({ // It's important to listen to the ownerDocument to support the browser extension. // Here we use portals to render individual tabs (e.g. Profiler) // and the root document might belong to a different window. - const ownerDocument = inputRef.current.ownerDocument; - ownerDocument.addEventListener('keydown' handleKeyDown); + const ownerDocumentElement = inputRef.current.ownerDocument.documentElement; + if (ownerDocumentElement === null) { + return; + } + ownerDocumentElement.addEventListener('keydown' handleKeyDown); - return () => ownerDocument.removeEventListener('keydown' handleKeyDown); + return () => + ownerDocumentElement.removeEventListener('keydown' handleKeyDown); } []); return (
facebook/react,a2329c10ffc153303ad5a65b99d91d8500ceabdd,lauren,2025-10-03 21:58:06,[eprh] 6.1.1 changelog (#34726)  Update changelog for 6.1.1,packages/eslint-plugin-react-hooks/CHANGELOG.md,12,1,13,+## 6.1.1 + +**Note:** 6.1.0 accidentally allowed use of `recommended` without flat config causing errors when used with ESLint v9's `defineConfig()` helper. This has been fixed in 6.1.1. + +- Fix `recommended` config for flat config compatibility. The `recommended` config has been converted to flat config format. Non-flat config users should use `recommended-legacy` instead. ([@poteto](https://github.com/poteto) in [#34700](https://github.com/facebook/react/pull/34700)) +- Add `recommended-latest` and `recommended-latest-legacy` configs that include React Compiler rules. ([@poteto](https://github.com/poteto) in [#34675](https://github.com/facebook/react/pull/34675)) +- Remove unused `NoUnusedOptOutDirectives` rule. ([@poteto](https://github.com/poteto) in [#34703](https://github.com/facebook/react/pull/34703)) +- Remove `hermes-parser` and dependency. ([@poteto](https://github.com/poteto) in [#34719](https://github.com/facebook/react/pull/34719)) +- Remove `@babel/plugin-proposal-private-methods` dependency. ([@ArnaudBarre](https://github.com/ArnaudBarre) and [@josephsavona](https://github.com/josephsavona) in [#34715](https://github.com/facebook/react/pull/34715)) +- Update for Zod v3/v4 compatibility. ([@kolian](https://github.com/kolvian) and [@josephsavona](https://github.com/josephsavona) in [#34717](https://github.com/facebook/react/pull/34717)) + ## 6.1.0 -**Note:** Version 6.0.0 was mistakenly released and immediately deprecated and untagged on npm. This is the first official 6.x major release and includes breaking changes. +**Note:** Version 6.0.0 was mistakenly released and immediately deprecated and untagged on npm. This is the first official 6.x major release and includes breaking changes. - **Breaking:** Require Node.js 18 or newer. ([@michaelfaith](https://github.com/michaelfaith) in [#32458](https://github.com/facebook/react/pull/32458)) - **Breaking:** Flat config is now the default `recommended` preset. Legacy config moved to `recommended-legacy`. ([@michaelfaith](https://github.com/michaelfaith) in [#32457](https://github.com/facebook/react/pull/32457))
facebook/react,d3f84a433a57562be1fc2b3331ddc54bdb946582,Ruslan Lesiutin,2025-10-03 21:03:48,[DevTools] Bump version for extensions (#34723)  `./scripts/devtools/prepare-release.js` actually does automate the version bump  but only path / minor ones.,packages/react-devtools-extensions/chrome/manifest.json,2,2,4,"""manifest_version"": 3 ""name"": ""React Developer Tools"" ""description"": ""Adds React debugging tools to the Chrome Developer Tools."" - ""version"": ""6.1.5"" - ""version_name"": ""6.1.5"" + ""version"": ""7.0.0"" + ""version_name"": ""7.0.0"" ""minimum_chrome_version"": ""114"" ""icons"": { ""16"": ""icons/16-production.png"""
facebook/react,d3f84a433a57562be1fc2b3331ddc54bdb946582,Ruslan Lesiutin,2025-10-03 21:03:48,[DevTools] Bump version for extensions (#34723)  `./scripts/devtools/prepare-release.js` actually does automate the version bump  but only path / minor ones.,packages/react-devtools-extensions/edge/manifest.json,2,2,4,"""manifest_version"": 3 ""name"": ""React Developer Tools"" ""description"": ""Adds React debugging tools to the Microsoft Edge Developer Tools."" - ""version"": ""6.1.5"" - ""version_name"": ""6.1.5"" + ""version"": ""7.0.0"" + ""version_name"": ""7.0.0"" ""minimum_chrome_version"": ""114"" ""icons"": { ""16"": ""icons/16-production.png"""
facebook/react,d3f84a433a57562be1fc2b3331ddc54bdb946582,Ruslan Lesiutin,2025-10-03 21:03:48,[DevTools] Bump version for extensions (#34723)  `./scripts/devtools/prepare-release.js` actually does automate the version bump  but only path / minor ones.,packages/react-devtools-extensions/firefox/manifest.json,1,1,2,"""manifest_version"": 3 ""name"": ""React Developer Tools"" ""description"": ""Adds React debugging tools to the Firefox Developer Tools."" - ""version"": ""6.1.5"" + ""version"": ""7.0.0"" ""browser_specific_settings"": { ""gecko"": { ""id"": ""@react-devtools"""
facebook/react,bc2356176bca3e42e84ce8d196fdc525677cc36b,lauren,2025-10-03 20:37:55,[ci] Fix incorrect filtering logic for prereleases (#34725)  The workflow was correctly publishing the package(s) specified in `only`  but due to incorrect logic it would also run the 'Publish all packages' step.,.github/workflows/runtime_prereleases.yml,1,1,2,jobs: --tags=${{ inputs.dist_tag }} \ --skipPackages=${{ inputs.skip_packages }} ${{ (inputs.dry && '') || '\'}} ${{ inputs.dry && '--dry' || '' }} - - if: '${{ !(inputs.skip_packages && inputs.only_packages) }}' + - if: '${{ !inputs.skip_packages && !inputs.only_packages }}' name: 'Publish all packages' run: | scripts/release/publish.js \
facebook/react,4fdf7cf249ecb205d20b65b5208d113ea664cb9a,lauren,2025-10-03 18:41:34,"[ci] Fix runtime_prereleases (#34722)  When using the ""only"" or ""skip"" option in the workflow  we were adding the `--skipTests` param  but that isn't an actual option: https://github.com/facebook/react/blob/1de32a5e75fe96ac3c1b728a117010e11673f6ed/scripts/release/publish-commands/parse-params.js",.github/workflows/runtime_prereleases.yml,0,2,2,jobs: run: | scripts/release/publish.js \ --ci \ - --skipTests \ --tags=${{ inputs.dist_tag }} \ --onlyPackages=${{ inputs.only_packages }} ${{ (inputs.dry && '') || '\'}} ${{ inputs.dry && '--dry' || '' }} jobs: run: | scripts/release/publish.js \ --ci \ - --skipTests \ --tags=${{ inputs.dist_tag }} \ --skipPackages=${{ inputs.skip_packages }} ${{ (inputs.dry && '') || '\'}} ${{ inputs.dry && '--dry' || '' }}
facebook/react,614a945d9d1031fadcf211a632cb2d7fda495a4f,"Sebastian ""Sebbie"" Silbermann",2025-10-03 17:48:28,React DevTools 7.0.0 (#34692)  [Preview](https://github.com/eps1lon/react/blob/sebbie/09-28-react_devtools_7.0.0/packages/react-devtools/CHANGELOG.md#700)  Suspense tab is omitted since that's gated on Canary or 19.3.  Will draft a separate blog post for suspended by and open-in-editor instructions while the extension is in review.,packages/react-devtools-core/package.json,1,1,2,"{ ""name"": ""react-devtools-core"" - ""version"": ""6.1.5"" + ""version"": ""7.0.0"" ""description"": ""Use react-devtools outside of the browser"" ""license"": ""MIT"" ""main"": ""./dist/backend.js"""
facebook/react,614a945d9d1031fadcf211a632cb2d7fda495a4f,"Sebastian ""Sebbie"" Silbermann",2025-10-03 17:48:28,React DevTools 7.0.0 (#34692)  [Preview](https://github.com/eps1lon/react/blob/sebbie/09-28-react_devtools_7.0.0/packages/react-devtools/CHANGELOG.md#700)  Suspense tab is omitted since that's gated on Canary or 19.3.  Will draft a separate blog post for suspended by and open-in-editor instructions while the extension is in review.,packages/react-devtools-inline/package.json,1,1,2,"{ ""name"": ""react-devtools-inline"" - ""version"": ""6.1.5"" + ""version"": ""7.0.0"" ""description"": ""Embed react-devtools within a website"" ""license"": ""MIT"" ""main"": ""./dist/backend.js"""
facebook/react,614a945d9d1031fadcf211a632cb2d7fda495a4f,"Sebastian ""Sebbie"" Silbermann",2025-10-03 17:48:28,React DevTools 7.0.0 (#34692)  [Preview](https://github.com/eps1lon/react/blob/sebbie/09-28-react_devtools_7.0.0/packages/react-devtools/CHANGELOG.md#700)  Suspense tab is omitted since that's gated on Canary or 19.3.  Will draft a separate blog post for suspended by and open-in-editor instructions while the extension is in review.,packages/react-devtools-timeline/package.json,1,1,2,"{ ""private"": true ""name"": ""react-devtools-timeline"" - ""version"": ""6.1.5"" + ""version"": ""7.0.0"" ""license"": ""MIT"" ""dependencies"": { ""@elg/speedscope"": ""1.9.0-a6f84db"""
facebook/react,614a945d9d1031fadcf211a632cb2d7fda495a4f,"Sebastian ""Sebbie"" Silbermann",2025-10-03 17:48:28,React DevTools 7.0.0 (#34692)  [Preview](https://github.com/eps1lon/react/blob/sebbie/09-28-react_devtools_7.0.0/packages/react-devtools/CHANGELOG.md#700)  Suspense tab is omitted since that's gated on Canary or 19.3.  Will draft a separate blog post for suspended by and open-in-editor instructions while the extension is in review.,packages/react-devtools/package.json,1,1,2,"{ ""name"": ""react-devtools"" - ""version"": ""6.1.5"" + ""version"": ""7.0.0"" ""description"": ""Use react-devtools outside of the browser"" ""license"": ""MIT"" ""repository"": {"
facebook/react,d6eb735938bc67b41ad723206ea395ba4d761139,Joseph Savona,2025-10-03 17:08:20,[compiler] Update for Zod v3/v4 compatibility (#34717)  Partial redo of #34710. The changes there tried to use `z.function(args  return)` to be compatible across Zod v3 and v4  but Zod 4's function API has completely changed. Instead  I've updated to just use `z.any()` where we expect a function  and manually validate that it's a function before we call the value. We already have validation of the return type (also using Zod).  Co-authored-by: kolvian <eliot@pontarelli.com>,compiler/packages/babel-plugin-react-compiler/package.json,2,2,4,"""react-dom"": ""0.0.0-experimental-4beb1fd8-20241118"" ""ts-jest"": ""^29.1.1"" ""ts-node"": ""^10.9.2"" - ""zod"": ""^3.22.4"" - ""zod-validation-error"": ""^2.1.0"" + ""zod"": ""^3.22.4 || ^4.0.0"" + ""zod-validation-error"": ""^3.0.3 || ^4.0.0"" } ""resolutions"": { ""./**/@babel/parser"": ""7.7.4"""
facebook/react,d6eb735938bc67b41ad723206ea395ba4d761139,Joseph Savona,2025-10-03 17:08:20,[compiler] Update for Zod v3/v4 compatibility (#34717)  Partial redo of #34710. The changes there tried to use `z.function(args  return)` to be compatible across Zod v3 and v4  but Zod 4's function API has completely changed. Instead  I've updated to just use `z.any()` where we expect a function  and manually validate that it's a function before we call the value. We already have validation of the return type (also using Zod).  Co-authored-by: kolvian <eliot@pontarelli.com>,compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts,8,2,10,export const EnvironmentConfigSchema = z.object({ * A function that given the name of a module can optionally return a description * of that module's type signature. */ - moduleTypeProvider: z.nullable(z.function().args(z.string())).default(null) + moduleTypeProvider: z.nullable(z.any()).default(null) /** * A list of functions which the application compiles as macros where export const EnvironmentConfigSchema = z.object({ * Allows specifying a function that can populate HIR with type information from * Flow */ - flowTypeProvider: z.nullable(z.function().args(z.string())).default(null) + flowTypeProvider: z.nullable(z.any()).default(null) /** * Enables inference of optional dependency chains. Without this flag export class Environment { if (moduleTypeProvider == null) { return null; } + if (typeof moduleTypeProvider !== 'function') { + CompilerError.throwInvalidConfig({ + reason: `Expected a function for \`moduleTypeProvider\`` + loc + }); + } const unparsedModuleConfig = moduleTypeProvider(moduleName); if (unparsedModuleConfig != null) { const parsedModuleConfig = TypeSchema.safeParse(unparsedModuleConfig);
facebook/react,d6eb735938bc67b41ad723206ea395ba4d761139,Joseph Savona,2025-10-03 17:08:20,[compiler] Update for Zod v3/v4 compatibility (#34717)  Partial redo of #34710. The changes there tried to use `z.function(args  return)` to be compatible across Zod v3 and v4  but Zod 4's function API has completely changed. Instead  I've updated to just use `z.any()` where we expect a function  and manually validate that it's a function before we call the value. We already have validation of the return type (also using Zod).  Co-authored-by: kolvian <eliot@pontarelli.com>,compiler/packages/babel-plugin-react-compiler/src/__tests__/envConfig-test.ts,2,2,4,"describe('parseConfigPragma()' () => { validateHooksUsage: 1 } as any); }).toThrowErrorMatchingInlineSnapshot( - `""Error: Could not validate environment config. Update React Compiler config to fix the error. Validation error: Expected boolean received number at ""validateHooksUsage"".""` + `""Error: Could not validate environment config. Update React Compiler config to fix the error. Validation error: Invalid input: expected boolean received number at ""validateHooksUsage"".""` ); }); describe('parseConfigPragma()' () => { ] } as any); }).toThrowErrorMatchingInlineSnapshot( - `""Error: Could not validate environment config. Update React Compiler config to fix the error. Validation error: autodepsIndex must be > 0 at ""inferEffectDependencies[0].autodepsIndex"".""` + `""Error: Could not validate environment config. Update React Compiler config to fix the error. Validation error: AutodepsIndex must be > 0 at ""inferEffectDependencies[0].autodepsIndex"".""` ); });"
facebook/react,d6eb735938bc67b41ad723206ea395ba4d761139,Joseph Savona,2025-10-03 17:08:20,[compiler] Update for Zod v3/v4 compatibility (#34717)  Partial redo of #34710. The changes there tried to use `z.function(args  return)` to be compatible across Zod v3 and v4  but Zod 4's function API has completely changed. Instead  I've updated to just use `z.any()` where we expect a function  and manually validate that it's a function before we call the value. We already have validation of the return type (also using Zod).  Co-authored-by: kolvian <eliot@pontarelli.com>,compiler/packages/eslint-plugin-react-compiler/package.json,2,2,4,"""@babel/core"": ""^7.24.4"" ""@babel/parser"": ""^7.24.4"" ""hermes-parser"": ""^0.25.1"" - ""zod"": ""^3.22.4"" - ""zod-validation-error"": ""^3.0.3"" + ""zod"": ""^3.22.4 || ^4.0.0"" + ""zod-validation-error"": ""^3.0.3 || ^4.0.0"" } ""devDependencies"": { ""@babel/preset-env"": ""^7.22.4"""
facebook/react,d6eb735938bc67b41ad723206ea395ba4d761139,Joseph Savona,2025-10-03 17:08:20,[compiler] Update for Zod v3/v4 compatibility (#34717)  Partial redo of #34710. The changes there tried to use `z.function(args  return)` to be compatible across Zod v3 and v4  but Zod 4's function API has completely changed. Instead  I've updated to just use `z.any()` where we expect a function  and manually validate that it's a function before we call the value. We already have validation of the return type (also using Zod).  Co-authored-by: kolvian <eliot@pontarelli.com>,compiler/packages/react-compiler-healthcheck/package.json,2,2,4,"""fast-glob"": ""^3.3.2"" ""ora"": ""5.4.1"" ""yargs"": ""^17.7.2"" - ""zod"": ""^3.22.4"" - ""zod-validation-error"": ""^3.0.3"" + ""zod"": ""^3.22.4 || ^4.0.0"" + ""zod-validation-error"": ""^3.0.3 || ^4.0.0"" } ""devDependencies"": {} ""engines"": {"
facebook/react,d6eb735938bc67b41ad723206ea395ba4d761139,Joseph Savona,2025-10-03 17:08:20,[compiler] Update for Zod v3/v4 compatibility (#34717)  Partial redo of #34710. The changes there tried to use `z.function(args  return)` to be compatible across Zod v3 and v4  but Zod 4's function API has completely changed. Instead  I've updated to just use `z.any()` where we expect a function  and manually validate that it's a function before we call the value. We already have validation of the return type (also using Zod).  Co-authored-by: kolvian <eliot@pontarelli.com>,compiler/packages/react-mcp-server/package.json,1,1,2,"""html-to-text"": ""^9.0.5"" ""prettier"": ""^3.3.3"" ""puppeteer"": ""^24.7.2"" - ""zod"": ""^3.23.8"" + ""zod"": ""^3.22.4 || ^4.0.0"" } ""devDependencies"": { ""@types/html-to-text"": ""^9.0.4"""
facebook/react,d6eb735938bc67b41ad723206ea395ba4d761139,Joseph Savona,2025-10-03 17:08:20,[compiler] Update for Zod v3/v4 compatibility (#34717)  Partial redo of #34710. The changes there tried to use `z.function(args  return)` to be compatible across Zod v3 and v4  but Zod 4's function API has completely changed. Instead  I've updated to just use `z.any()` where we expect a function  and manually validate that it's a function before we call the value. We already have validation of the return type (also using Zod).  Co-authored-by: kolvian <eliot@pontarelli.com>,packages/eslint-plugin-react-hooks/package.json,2,2,4,"""dependencies"": { ""@babel/core"": ""^7.24.4"" ""@babel/parser"": ""^7.24.4"" - ""zod"": ""^3.22.4"" - ""zod-validation-error"": ""^3.0.3"" + ""zod"": ""^3.22.4 || ^4.0.0"" + ""zod-validation-error"": ""^3.0.3 || ^4.0.0"" } ""devDependencies"": { ""@babel/eslint-parser"": ""^7.11.4"""
facebook/react,71753ac90a009ddefe2f7653165902d55edd1898,lauren,2025-10-03 16:58:00,[eprh] Remove hermes-parser (#34719)  We will be focusing eslint-plugin-react-hooks as the primary OSS-only package for our lint plugin. eslint-plugin-react-compiler will remain as a Meta only package as some limitations of our internal infra require us to use packages that aren't widely adopted by the rest of the industry.  This PR removes `hermes-parser`  which was meant to support parsing Flow syntax.,packages/eslint-plugin-react-hooks/package.json,4,5,9,"""dependencies"": { ""@babel/core"": ""^7.24.4"" ""@babel/parser"": ""^7.24.4"" - ""hermes-parser"": ""^0.25.1"" ""zod"": ""^3.22.4"" ""zod-validation-error"": ""^3.0.3"" } ""@babel/preset-typescript"": ""^7.26.0"" ""@babel/types"": ""^7.19.0"" ""@tsconfig/strictest"": ""^2.0.5"" - ""@typescript-eslint/parser-v2"": ""npm:@typescript-eslint/parser@^2.26.0"" - ""@typescript-eslint/parser-v3"": ""npm:@typescript-eslint/parser@^3.10.0"" - ""@typescript-eslint/parser-v4"": ""npm:@typescript-eslint/parser@^4.1.0"" - ""@typescript-eslint/parser-v5"": ""npm:@typescript-eslint/parser@^5.62.0"" ""@types/eslint"": ""^8.56.12"" ""@types/estree"": ""^1.0.6"" ""@types/estree-jsx"": ""^1.0.5"" ""@types/node"": ""^20.2.5"" + ""@typescript-eslint/parser-v2"": ""npm:@typescript-eslint/parser@^2.26.0"" + ""@typescript-eslint/parser-v3"": ""npm:@typescript-eslint/parser@^3.10.0"" + ""@typescript-eslint/parser-v4"": ""npm:@typescript-eslint/parser@^4.1.0"" + ""@typescript-eslint/parser-v5"": ""npm:@typescript-eslint/parser@^5.62.0"" ""babel-eslint"": ""^10.0.3"" ""eslint-v7"": ""npm:eslint@^7.7.0"" ""eslint-v8"": ""npm:eslint@^8.57.1"""
facebook/react,71753ac90a009ddefe2f7653165902d55edd1898,lauren,2025-10-03 16:58:00,[eprh] Remove hermes-parser (#34719)  We will be focusing eslint-plugin-react-hooks as the primary OSS-only package for our lint plugin. eslint-plugin-react-compiler will remain as a Meta only package as some limitations of our internal infra require us to use packages that aren't widely adopted by the rest of the industry.  This PR removes `hermes-parser`  which was meant to support parsing Flow syntax.,packages/eslint-plugin-react-hooks/src/shared/RunReactCompiler.ts,8,23,31,import BabelPluginReactCompiler { LoggerEvent } from 'babel-plugin-react-compiler'; import type {SourceCode} from 'eslint'; -import * as HermesParser from 'hermes-parser'; import {isDeepStrictEqual} from 'util'; import type {ParseResult} from '@babel/parser'; function getFlowSuppressions( return results; } - function runReactCompilerImpl({ sourceCode filename function runReactCompilerImpl({ } let babelAST: ParseResult<File> | null = null; - if (filename.endsWith('.tsx') || filename.endsWith('.ts')) { - try { - babelAST = babelParse(sourceCode.text { - sourceFilename: filename - sourceType: 'unambiguous' - plugins: ['typescript' 'jsx'] - }); - } catch { - /* empty */ - } - } else { - try { - babelAST = HermesParser.parse(sourceCode.text { - babel: true - enableExperimentalComponentSyntax: true - sourceFilename: filename - sourceType: 'module' - }); - } catch { - /* empty */ - } + try { + babelAST = babelParse(sourceCode.text { + sourceFilename: filename + sourceType: 'unambiguous' + plugins: ['typescript' 'jsx'] + }); + } catch (err: unknown) { + /* empty */ } if (babelAST != null) {
facebook/react,71753ac90a009ddefe2f7653165902d55edd1898,lauren,2025-10-03 16:58:00,[eprh] Remove hermes-parser (#34719)  We will be focusing eslint-plugin-react-hooks as the primary OSS-only package for our lint plugin. eslint-plugin-react-compiler will remain as a Meta only package as some limitations of our internal infra require us to use packages that aren't widely adopted by the rest of the industry.  This PR removes `hermes-parser`  which was meant to support parsing Flow syntax.,yarn.lock,0,12,12,"hermes-eslint@^0.32.0: hermes-estree ""0.32.0"" hermes-parser ""0.32.0"" -hermes-estree@0.25.1: - version ""0.25.1"" - resolved ""https://registry.yarnpkg.com/hermes-estree/-/hermes-estree-0.25.1.tgz#6aeec17d1983b4eabf69721f3aa3eb705b17f480"" - integrity sha512-0wUoCcLp+5Ev5pDW2OriHC2MJCbwLwuRx+gAqMTOkGKJJiBCLjtrvy4PWUGn6MIVefecRpzoOZ/UV6iGdOr+Cw== - hermes-estree@0.29.1: version ""0.29.1"" resolved ""https://registry.yarnpkg.com/hermes-estree/-/hermes-estree-0.29.1.tgz#043c7db076e0e8ef8c5f6ed23828d1ba463ebcc5"" hermes-parser@0.32.0 hermes-parser@^0.32.0: dependencies: hermes-estree ""0.32.0"" -hermes-parser@^0.25.1: - version ""0.25.1"" - resolved ""https://registry.yarnpkg.com/hermes-parser/-/hermes-parser-0.25.1.tgz#5be0e487b2090886c62bd8a11724cd766d5f54d1"" - integrity sha512-6pEjquH3rqaI6cYAXYPcz9MS4rY6R4ngRgrgfDshRptUZIc3lw0MCIJIGDj9++mfySOuPTHB4nrSW99BCvOPIA== - dependencies: - hermes-estree ""0.25.1"" - homedir-polyfill@^1.0.0 homedir-polyfill@^1.0.1: version ""1.0.3"" resolved ""https://registry.yarnpkg.com/homedir-polyfill/-/homedir-polyfill-1.0.3.tgz#743298cef4e5af3e194161fbadcc2151d3a058e8"""
facebook/react,f24d3bbc70ae6544b5aafd250f22f0a68b4a3107,Joseph Savona,2025-10-03 16:47:34,Update readme for eprh (#34714),packages/eslint-plugin-react-hooks/README.md,2,4,6,# `eslint-plugin-react-hooks` -This ESLint plugin enforces the [Rules of Hooks](https://react.dev/reference/rules/rules-of-hooks). - -It is a part of the [Hooks API](https://react.dev/reference/react/hooks) for React. +The official ESLint plugin for [React](https://react.dev) which enforces the [Rules of React](https://react.dev/reference/eslint-plugin-react-hooks) and other best practices. ## Installation If you're using a version earlier than 5.2.0 the legacy config was simply `reco ### Custom Configuration -If you want more fine-grained configuration you can instead add a snippet like this to your ESLint configuration file: +If you want more fine-grained configuration you can instead choose to enable specific rules. However we strongly encourage using the recommended presets — see above — so that you will automatically receive new recommended rules as we add them in future versions of the plugin. #### Flat Config (eslint.config.js|ts)
facebook/react,85c427d822baad6e654256b707b7d8755da7db26,Joseph Savona,2025-10-03 16:13:55,[compiler] Remove @babel/plugin-proposal-private-methods (#34715)  redo of #34458 but fixing up prettier  Co-authored-by: Arnaud Barré <arnaud.barre@carbometrix.com>,compiler/packages/eslint-plugin-react-compiler/babel.config.js,0,1,1,module.exports = { plugins: [ ['@babel/plugin-transform-private-property-in-object' {loose: true}] ['@babel/plugin-transform-class-properties' {loose: true}] - ['@babel/plugin-transform-private-methods' {loose: true}] ] };
facebook/react,85c427d822baad6e654256b707b7d8755da7db26,Joseph Savona,2025-10-03 16:13:55,[compiler] Remove @babel/plugin-proposal-private-methods (#34715)  redo of #34458 but fixing up prettier  Co-authored-by: Arnaud Barré <arnaud.barre@carbometrix.com>,compiler/packages/eslint-plugin-react-compiler/package.json,0,1,1,"""dependencies"": { ""@babel/core"": ""^7.24.4"" ""@babel/parser"": ""^7.24.4"" - ""@babel/plugin-proposal-private-methods"": ""^7.18.6"" ""hermes-parser"": ""^0.25.1"" ""zod"": ""^3.22.4"" ""zod-validation-error"": ""^3.0.3"""
facebook/react,85c427d822baad6e654256b707b7d8755da7db26,Joseph Savona,2025-10-03 16:13:55,[compiler] Remove @babel/plugin-proposal-private-methods (#34715)  redo of #34458 but fixing up prettier  Co-authored-by: Arnaud Barré <arnaud.barre@carbometrix.com>,compiler/packages/eslint-plugin-react-compiler/src/shared/RunReactCompiler.ts,1,6,7,import {transformFromAstSync} from '@babel/core'; import {parse as babelParse} from '@babel/parser'; import {File} from '@babel/types'; -// @ts-expect-error: no types available -import PluginProposalPrivateMethods from '@babel/plugin-proposal-private-methods'; import BabelPluginReactCompiler { parsePluginOptions validateEnvironmentConfig function runReactCompilerImpl({ filename highlightCode: false retainLines: true - plugins: [ - [PluginProposalPrivateMethods {loose: true}] - [BabelPluginReactCompiler options] - ] + plugins: [[BabelPluginReactCompiler options]] sourceType: 'module' configFile: false babelrc: false
facebook/react,85c427d822baad6e654256b707b7d8755da7db26,Joseph Savona,2025-10-03 16:13:55,[compiler] Remove @babel/plugin-proposal-private-methods (#34715)  redo of #34458 but fixing up prettier  Co-authored-by: Arnaud Barré <arnaud.barre@carbometrix.com>,compiler/packages/eslint-plugin-react-compiler/tsup.config.ts,1,7,8,import {defineConfig} from 'tsup'; export default defineConfig({ entry: ['./src/index.ts'] outDir: './dist' - external: [ - '@babel/core' - '@babel/plugin-proposal-private-methods' - 'hermes-parser' - 'zod' - 'zod-validation-error' - ] + external: ['@babel/core' 'hermes-parser' 'zod' 'zod-validation-error'] splitting: false sourcemap: false dts: false
facebook/react,85c427d822baad6e654256b707b7d8755da7db26,Joseph Savona,2025-10-03 16:13:55,[compiler] Remove @babel/plugin-proposal-private-methods (#34715)  redo of #34458 but fixing up prettier  Co-authored-by: Arnaud Barré <arnaud.barre@carbometrix.com>,compiler/yarn.lock,1,9,10,"lru-cache ""^5.1.1"" semver ""^6.3.1"" -""@babel/helper-create-class-features-plugin@^7.18.6"" ""@babel/helper-create-class-features-plugin@^7.25.9"" ""@babel/helper-create-class-features-plugin@^7.27.0"": +""@babel/helper-create-class-features-plugin@^7.25.9"" ""@babel/helper-create-class-features-plugin@^7.27.0"": version ""7.27.0"" resolved ""https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.27.0.tgz"" integrity sha512-vSGCvMecvFCd/BdpGlhpXYNhhC4ccxyvQWpbGL4CWbvfEoLFWUZuSuf7s9Aw70flgQF+6vptvgK2IfOnKlRmBg== ""@babel/helper-plugin-utils"" ""^7.25.9"" ""@babel/traverse"" ""^7.25.9"" -""@babel/plugin-proposal-private-methods@^7.18.6"": - version ""7.18.6"" - resolved ""https://registry.npmjs.org/@babel/plugin-proposal-private-methods/-/plugin-proposal-private-methods-7.18.6.tgz"" - integrity sha512-nutsvktDItsNn4rpGItSNV2sz1XwS+nfU0Rg8aCx3W3NOKVzdMjJRu0O5OkgDp3ZGICSTbgRpxZoWsxoKRvbeA== - dependencies: - ""@babel/helper-create-class-features-plugin"" ""^7.18.6"" - ""@babel/helper-plugin-utils"" ""^7.18.6"" - ""@babel/plugin-proposal-private-property-in-object@7.21.0-placeholder-for-preset-env.2"": version ""7.21.0-placeholder-for-preset-env.2"" resolved ""https://registry.npmjs.org/@babel/plugin-proposal-private-property-in-object/-/plugin-proposal-private-property-in-object-7.21.0-placeholder-for-preset-env.2.tgz"""
facebook/react,85c427d822baad6e654256b707b7d8755da7db26,Joseph Savona,2025-10-03 16:13:55,[compiler] Remove @babel/plugin-proposal-private-methods (#34715)  redo of #34458 but fixing up prettier  Co-authored-by: Arnaud Barré <arnaud.barre@carbometrix.com>,packages/eslint-plugin-react-hooks/package.json,0,1,1,"""dependencies"": { ""@babel/core"": ""^7.24.4"" ""@babel/parser"": ""^7.24.4"" - ""@babel/plugin-proposal-private-methods"": ""^7.18.6"" ""hermes-parser"": ""^0.25.1"" ""zod"": ""^3.22.4"" ""zod-validation-error"": ""^3.0.3"""
facebook/react,85c427d822baad6e654256b707b7d8755da7db26,Joseph Savona,2025-10-03 16:13:55,[compiler] Remove @babel/plugin-proposal-private-methods (#34715)  redo of #34458 but fixing up prettier  Co-authored-by: Arnaud Barré <arnaud.barre@carbometrix.com>,packages/eslint-plugin-react-hooks/src/shared/RunReactCompiler.ts,1,6,7,import {transformFromAstSync} from '@babel/core'; import {parse as babelParse} from '@babel/parser'; import {File} from '@babel/types'; -// @ts-expect-error: no types available -import PluginProposalPrivateMethods from '@babel/plugin-proposal-private-methods'; import BabelPluginReactCompiler { parsePluginOptions validateEnvironmentConfig function runReactCompilerImpl({ filename highlightCode: false retainLines: true - plugins: [ - [PluginProposalPrivateMethods {loose: true}] - [BabelPluginReactCompiler options] - ] + plugins: [[BabelPluginReactCompiler options]] sourceType: 'module' configFile: false babelrc: false
facebook/react,85c427d822baad6e654256b707b7d8755da7db26,Joseph Savona,2025-10-03 16:13:55,[compiler] Remove @babel/plugin-proposal-private-methods (#34715)  redo of #34458 but fixing up prettier  Co-authored-by: Arnaud Barré <arnaud.barre@carbometrix.com>,scripts/rollup/bundles.js,0,1,1,const bundles = [ preferBuiltins: true externals: [ '@babel/core' - '@babel/plugin-proposal-private-methods' 'hermes-parser' 'zod' 'zod-validation-error'
facebook/react,85c427d822baad6e654256b707b7d8755da7db26,Joseph Savona,2025-10-03 16:13:55,[compiler] Remove @babel/plugin-proposal-private-methods (#34715)  redo of #34458 but fixing up prettier  Co-authored-by: Arnaud Barré <arnaud.barre@carbometrix.com>,yarn.lock,0,8,8,"""@babel/helper-create-class-features-plugin"" ""^7.10.4"" ""@babel/helper-plugin-utils"" ""^7.10.4"" -""@babel/plugin-proposal-private-methods@^7.18.6"": - version ""7.18.6"" - resolved ""https://registry.yarnpkg.com/@babel/plugin-proposal-private-methods/-/plugin-proposal-private-methods-7.18.6.tgz#5209de7d213457548a98436fa2882f52f4be6bea"" - integrity sha512-nutsvktDItsNn4rpGItSNV2sz1XwS+nfU0Rg8aCx3W3NOKVzdMjJRu0O5OkgDp3ZGICSTbgRpxZoWsxoKRvbeA== - dependencies: - ""@babel/helper-create-class-features-plugin"" ""^7.18.6"" - ""@babel/helper-plugin-utils"" ""^7.18.6"" - ""@babel/plugin-proposal-private-property-in-object@7.21.0-placeholder-for-preset-env.2"": version ""7.21.0-placeholder-for-preset-env.2"" resolved ""https://registry.yarnpkg.com/@babel/plugin-proposal-private-property-in-object/-/plugin-proposal-private-property-in-object-7.21.0-placeholder-for-preset-env.2.tgz#7844f9289546efa9febac2de4cfe358a050bd703"""
facebook/react,02bd4458f77e60b5631ff2f0e30b05b8b3a56d6d,Sebastian Markbåge,2025-10-03 15:52:44,[DevTools] Double clicking the root should jump to the beginning of the timeline (#34704)  Unlike the rects  this never toggles. It just jumps.,packages/react-devtools-shared/src/devtools/views/SuspenseTab/SuspenseRects.js,13,0,13,function SuspenseRectsContainer(): React$Node { }); } + function handleDoubleClick(event: SyntheticMouseEvent) { + if (event.defaultPrevented) { + // Already clicked on an inner rect + return; + } + event.preventDefault(); + suspenseTreeDispatch({ + type: 'SUSPENSE_SET_TIMELINE_INDEX' + payload: 0 + }); + } + const isRootSelected = roots.includes(inspectedElementID); return ( <div className={styles.SuspenseRectsContainer} onClick={handleClick} + onDoubleClick={handleDoubleClick} data-highlighted={isRootSelected}> <ViewBox.Provider value={boundingBox}> <div
facebook/react,0eebd37041a5712f841edd5fad558e0516e5af61,Eugene Choi,2025-10-03 14:52:36,"[playground] Config panel quality fixes (#34611)  Fixed two small issues with the config panel in the compiler playground: 1. Object descriptions were being confined in the config box and most of it would not be visible upon hover 2. Changed it so that ""Applied Configs"" would only display a valid set of configs  rather than switching between ""Invalid Configs"" and the set of options. This would be less visually jarring for users as the Output panel already displays errors. Additionally  if users want to see the list of config options but have a currently broken config  they would previously not know how to fix it.  Object hover before:  <img width=""702"" height=""481"" alt=""Screenshot 2025-09-26 at 10 41 03 AM"" src=""https://github.com/user-attachments/assets/b2ddec2f-16ba-41a1-be1f-96211f46764c"" /> Hover after: <img width=""702"" height=""481"" alt=""Screenshot 2025-09-26 at 10 40 37 AM"" src=""https://github.com/user-attachments/assets/dc713a22-4710-46a8-a5d7-485060cc9074"" />  Applied Configs always displays the last valid set of configs:   https://github.com/user-attachments/assets/2fb9232f-7388-4488-9b7a-bb48bf09e4ca",compiler/apps/playground/components/Editor/monacoOptions.ts,11,0,11,export const monacoOptions: Partial<EditorProps['options']> = { tabSize: 2 }; + +export const monacoConfigOptions: Partial<EditorProps['options']> = { + ...monacoOptions + lineNumbers: 'off' + renderLineHighlight: 'none' + overviewRulerBorder: false + overviewRulerLanes: 0 + fontSize: 12 + scrollBeyondLastLine: false + glyphMargin: false +};
facebook/react,74dee8ef641c7a0a67db192f83c11ac0d9f279ff,Jack Pope,2025-10-03 13:54:33,Add getClientRects to fabric fragment instance (#34545)  Stacked on #34544   We only have getBoundingClientRect available from RN currently. This should work as a substitute for this case because the equivalent of multi-rect elements in RN is a nested Text component. We only include the rects of top-level host components here so we can assume that calling getBoundingClientRect on each child is the same result.  Tested in react-native with Fantom.,packages/react-native-renderer/src/ReactFiberConfigFabric.js,22,0,22,export type FragmentInstanceType = { getRootNode(getRootNodeOptions?: { composed: boolean }): Node | FragmentInstanceType + getClientRects: () => Array<DOMRect> }; function FragmentInstance(this: FragmentInstanceType fragmentFiber: Fiber) { FragmentInstance.prototype.getRootNode = function ( return rootNode; }; +// $FlowFixMe[prop-missing] +FragmentInstance.prototype.getClientRects = function ( + this: FragmentInstanceType +): Array<DOMRect> { + const rects: Array<DOMRect> = []; + traverseFragmentInstance(this._fragmentFiber collectClientRects rects); + return rects; +}; +function collectClientRects(child: Fiber rects: Array<DOMRect>): boolean { + const instance = getPublicInstanceFromHostFiber(child); + + // getBoundingClientRect is available on Fabric instances while getClientRects is not. + // This should work as a substitute in this case because the only equivalent of a multi-rect + // element in RN would be a nested Text component. + // Since we only use top-level nodes here we can assume that getBoundingClientRect is sufficient. + // $FlowFixMe[method-unbinding] + // $FlowFixMe[incompatible-use] Fabric PublicInstance is opaque + rects.push(instance.getBoundingClientRect()); + return false; +} + export function createFragmentInstance( fragmentFiber: Fiber ): FragmentInstanceType {
facebook/react,e866b1d1e9b8a1dc7a43f1be0c510784566b9bb1,Jack Pope,2025-10-03 13:48:37,Add getRootNode to fabric fragment instance (#34544)  Stacked on #34533 for root fragment handling  This is the same approach as DOM  where we call getRootNode on the parent.      Tests are in react-native using Fantom.,packages/react-native-renderer/src/ReactFiberConfigFabric.js,18,0,18,export type FragmentInstanceType = { observeUsing: (observer: IntersectionObserver) => void unobserveUsing: (observer: IntersectionObserver) => void compareDocumentPosition: (otherNode: PublicInstance) => number + getRootNode(getRootNodeOptions?: { + composed: boolean + }): Node | FragmentInstanceType }; function FragmentInstance(this: FragmentInstanceType fragmentFiber: Fiber) { function collectChildren(child: Fiber collection: Array<Fiber>): boolean { return false; } +// $FlowFixMe[prop-missing] +FragmentInstance.prototype.getRootNode = function ( + this: FragmentInstanceType + getRootNodeOptions?: {composed: boolean} +): Node | FragmentInstanceType { + const parentHostFiber = getFragmentParentHostFiber(this._fragmentFiber); + if (parentHostFiber === null) { + return this; + } + const parentHostInstance = getPublicInstanceFromHostFiber(parentHostFiber); + // $FlowFixMe[incompatible-use] Fabric PublicInstance is opaque + const rootNode = (parentHostInstance.getRootNode(getRootNodeOptions): Node); + return rootNode; +}; + export function createFragmentInstance( fragmentFiber: Fiber ): FragmentInstanceType {
facebook/react,19f65ff179d377ff0c9284704dff2fce370745be,lauren,2025-10-02 23:19:01,[eprh] Remove NoUnusedOptOutDirectives (#34703)  This rule was a leftover from a while ago and doesn't actually lint anything useful. Specifically  you get a lint error if you try to opt out a component that isn't already bailing out. If there's a bailout the compiler already safely skips over it  so adding `'use no memo'` there is unnecessary.  Fixes #31407  --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/34703). * __->__ #34703 * #34700,compiler/packages/eslint-plugin-react-compiler/__tests__/NoUnusedDirectivesRule-test.ts,0,58,58,"-/** - * Copyright (c) Meta Platforms Inc. and affiliates. - * - * This source code is licensed under the MIT license found in the - * LICENSE file in the root directory of this source tree. - */ - -import {NoUnusedDirectivesRule} from '../src/rules/ReactCompilerRule'; -import {normalizeIndent testRule} from './shared-utils'; - -testRule('no unused directives rule' NoUnusedDirectivesRule { - valid: [] - invalid: [ - { - name: ""Unused 'use no forget' directive is reported when no errors are present on components"" - code: normalizeIndent` - function Component() { - 'use no forget'; - return <div>Hello world</div> - } - ` - errors: [ - { - message: ""Unused 'use no forget' directive"" - suggestions: [ - { - output: - // yuck - '\nfunction Component() {\n \n return <div>Hello world</div>\n}\n' - } - ] - } - ] - } - - { - name: ""Unused 'use no forget' directive is reported when no errors are present on non-components or hooks"" - code: normalizeIndent` - function notacomponent() { - 'use no forget'; - return 1 + 1; - } - ` - errors: [ - { - message: ""Unused 'use no forget' directive"" - suggestions: [ - { - output: - // yuck - '\nfunction notacomponent() {\n \n return 1 + 1;\n}\n' - } - ] - } - ] - } - ] -});"
facebook/react,19f65ff179d377ff0c9284704dff2fce370745be,lauren,2025-10-02 23:19:01,[eprh] Remove NoUnusedOptOutDirectives (#34703)  This rule was a leftover from a while ago and doesn't actually lint anything useful. Specifically  you get a lint error if you try to opt out a component that isn't already bailing out. If there's a bailout the compiler already safely skips over it  so adding `'use no memo'` there is unnecessary.  Fixes #31407  --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/34703). * __->__ #34703 * #34700,compiler/packages/eslint-plugin-react-compiler/src/rules/ReactCompilerRule.ts,8,56,64,function makeRule(rule: LintRule): Rule.RuleModule { }; } -export const NoUnusedDirectivesRule: Rule.RuleModule = { - meta: { - type: 'suggestion' - docs: { - recommended: true - } - fixable: 'code' - hasSuggestions: true - // validation is done at runtime with zod - schema: [{type: 'object' additionalProperties: true}] - } - create(context: Rule.RuleContext): Rule.RuleListener { - const results = getReactCompilerResult(context); - - for (const directive of results.unusedOptOutDirectives) { - context.report({ - message: `Unused '${directive.directive}' directive` - loc: directive.loc - suggest: [ - { - desc: 'Remove the directive' - fix(fixer): Rule.Fix { - return fixer.removeRange(directive.range); - } - } - ] - }); - } - return {}; - } -}; - type RulesConfig = { [name: string]: {rule: Rule.RuleModule; severity: ErrorSeverity}; }; -export const allRules: RulesConfig = LintRules.reduce( - (acc rule) => { - acc[rule.name] = {rule: makeRule(rule) severity: rule.severity}; - return acc; - } - { - 'no-unused-directives': { - rule: NoUnusedDirectivesRule - severity: ErrorSeverity.Error - } - } as RulesConfig -); +export const allRules: RulesConfig = LintRules.reduce((acc rule) => { + acc[rule.name] = {rule: makeRule(rule) severity: rule.severity}; + return acc; +} {} as RulesConfig); export const recommendedRules: RulesConfig = LintRules.filter( rule => rule.recommended -).reduce( - (acc rule) => { - acc[rule.name] = {rule: makeRule(rule) severity: rule.severity}; - return acc; - } - { - 'no-unused-directives': { - rule: NoUnusedDirectivesRule - severity: ErrorSeverity.Error - } - } as RulesConfig -); +).reduce((acc rule) => { + acc[rule.name] = {rule: makeRule(rule) severity: rule.severity}; + return acc; +} {} as RulesConfig); export function mapErrorSeverityToESlint( severity: ErrorSeverity
facebook/react,19f65ff179d377ff0c9284704dff2fce370745be,lauren,2025-10-02 23:19:01,[eprh] Remove NoUnusedOptOutDirectives (#34703)  This rule was a leftover from a while ago and doesn't actually lint anything useful. Specifically  you get a lint error if you try to opt out a component that isn't already bailing out. If there's a bailout the compiler already safely skips over it  so adding `'use no memo'` there is unnecessary.  Fixes #31407  --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/34703). * __->__ #34703 * #34700,packages/eslint-plugin-react-hooks/src/shared/ReactCompiler.ts,2,44,46,function makeRule(rule: LintRule): Rule.RuleModule { }; } -export const NoUnusedDirectivesRule: Rule.RuleModule = { - meta: { - type: 'suggestion' - docs: { - recommended: true - } - fixable: 'code' - hasSuggestions: true - // validation is done at runtime with zod - schema: [{type: 'object' additionalProperties: true}] - } - create(context: Rule.RuleContext): Rule.RuleListener { - const results = getReactCompilerResult(context); - - for (const directive of results.unusedOptOutDirectives) { - context.report({ - message: `Unused '${directive.directive}' directive` - loc: directive.loc - suggest: [ - { - desc: 'Remove the directive' - fix(fixer): Rule.Fix { - return fixer.removeRange(directive.range); - } - } - ] - }); - } - return {}; - } -}; - type RulesConfig = { [name: string]: {rule: Rule.RuleModule; severity: ErrorSeverity}; }; export const allRules: RulesConfig = LintRules.reduce( acc[rule.name] = {rule: makeRule(rule) severity: rule.severity}; return acc; } - { - 'no-unused-directives': { - rule: NoUnusedDirectivesRule - severity: ErrorSeverity.Error - } - } as RulesConfig + {} as RulesConfig ); export const recommendedRules: RulesConfig = LintRules.filter( export const recommendedRules: RulesConfig = LintRules.filter( acc[rule.name] = {rule: makeRule(rule) severity: rule.severity}; return acc; } - { - 'no-unused-directives': { - rule: NoUnusedDirectivesRule - severity: ErrorSeverity.Error - } - } as RulesConfig + {} as RulesConfig ); export function mapErrorSeverityToESlint(
facebook/react,26b177bc5e1d287c60c50fc1e185b2fb398488a0,lauren,2025-10-02 22:52:52,"[eprh] Fix `recommended` config for flat config compatibility (#34700)  Previously  the `recommended` config used the legacy ESLint format (plugins as an array of strings). This causes errors when used with ESLint v9's `defineConfig()` helper. This was following [eslint's own docs](https://eslint.org/docs/latest/extend/plugins#backwards-compatibility-for-legacy-configs):  > With this approach  both configuration systems recognize ""recommended"". The old config system uses the recommended key while the current config system uses the flat/recommended key. The defineConfig() helper first looks at the recommended key  and if that is not in the correct format  it looks for the flat/recommended key. This allows you an upgrade path if you’d later like to rename flat/recommended to recommended when you no longer need to support the old config system.  However  [`isLegacyConfig()`](https://github.com/eslint/rewrite/blob/main/packages/config-helpers/src/define-config.js#L73-L81) (also see [`eslintrcKeys`](https://github.com/eslint/rewrite/blob/main/packages/config-helpers/src/define-config.js#L24-L35)) function doesn't check for the `plugins` key  so our config was incorrectly treated as flat config despite being in legacy format.  This PR fixes the issue  along with a few other fixes combined:  1. Convert `recommended` to flat config format 2. Separate basic rules (exhaustive-deps  rules-of-hooks) from compiler rules 3. Add `recommended-latest-legacy` config for non-flat config users who want all recommended rules (including compiler rules) 4. Adding more types for the exported config  Our shipped presets in 6.x.x will essentially be: - `recommended-legacy`: legacy (non-flat)  with basic rules only - `recommended-latest-legacy`: legacy (non-flat)  all rules (basic + compiler) - `flat/recommended`: flat  basic rules only (now the same as recommended  but to avoid making a breaking change we'll just keep it around in 6.x.x) - `recommended-latest`: flat  all rules (basic + compiler) - `recommended`: flat  basic rules only  In the next breaking release 7.x.x  we will collapse down the presets into three:  - `recommended-legacy`: all recommended rules - `recommended`: all recommended rules - `recommended-experimental`: all recommended rules + new bleeding edge experimental rules  Closes #34679  --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/34700). * #34703 * __->__ #34700",fixtures/eslint-v6/.eslintrc.json,1,4,5,"{ ""root"": true - ""extends"": [""plugin:react-hooks/recommended-legacy""] + ""extends"": [""plugin:react-hooks/recommended-latest-legacy""] ""parserOptions"": { ""ecmaVersion"": 2020 ""sourceType"": ""module"" ""ecmaFeatures"": { ""jsx"": true } - } - ""rules"": { - ""react-hooks/exhaustive-deps"": ""error"" } }"
facebook/react,26b177bc5e1d287c60c50fc1e185b2fb398488a0,lauren,2025-10-02 22:52:52,"[eprh] Fix `recommended` config for flat config compatibility (#34700)  Previously  the `recommended` config used the legacy ESLint format (plugins as an array of strings). This causes errors when used with ESLint v9's `defineConfig()` helper. This was following [eslint's own docs](https://eslint.org/docs/latest/extend/plugins#backwards-compatibility-for-legacy-configs):  > With this approach  both configuration systems recognize ""recommended"". The old config system uses the recommended key while the current config system uses the flat/recommended key. The defineConfig() helper first looks at the recommended key  and if that is not in the correct format  it looks for the flat/recommended key. This allows you an upgrade path if you’d later like to rename flat/recommended to recommended when you no longer need to support the old config system.  However  [`isLegacyConfig()`](https://github.com/eslint/rewrite/blob/main/packages/config-helpers/src/define-config.js#L73-L81) (also see [`eslintrcKeys`](https://github.com/eslint/rewrite/blob/main/packages/config-helpers/src/define-config.js#L24-L35)) function doesn't check for the `plugins` key  so our config was incorrectly treated as flat config despite being in legacy format.  This PR fixes the issue  along with a few other fixes combined:  1. Convert `recommended` to flat config format 2. Separate basic rules (exhaustive-deps  rules-of-hooks) from compiler rules 3. Add `recommended-latest-legacy` config for non-flat config users who want all recommended rules (including compiler rules) 4. Adding more types for the exported config  Our shipped presets in 6.x.x will essentially be: - `recommended-legacy`: legacy (non-flat)  with basic rules only - `recommended-latest-legacy`: legacy (non-flat)  all rules (basic + compiler) - `flat/recommended`: flat  basic rules only (now the same as recommended  but to avoid making a breaking change we'll just keep it around in 6.x.x) - `recommended-latest`: flat  all rules (basic + compiler) - `recommended`: flat  basic rules only  In the next breaking release 7.x.x  we will collapse down the presets into three:  - `recommended-legacy`: all recommended rules - `recommended`: all recommended rules - `recommended-experimental`: all recommended rules + new bleeding edge experimental rules  Closes #34679  --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/34700). * #34703 * __->__ #34700",fixtures/eslint-v6/index.js,24,0,24,function useHookInLoops() { useHook4(); } } + +/** + * Compiler Rules + */ +// Invalid: component factory +function InvalidComponentFactory() { + const DynamicComponent = () => <div>Hello</div>; + // eslint-disable-next-line react-hooks/static-components + return <DynamicComponent />; +} + +// Invalid: mutating globals +function InvalidGlobals() { + // eslint-disable-next-line react-hooks/immutability + window.myGlobal = 42; + return <div>Done</div>; +} + +// Invalid: useMemo with wrong deps - triggers preserve-manual-memoization +function InvalidUseMemo({items}) { + // eslint-disable-next-line react-hooks/preserve-manual-memoization react-hooks/exhaustive-deps + const sorted = useMemo(() => [...items].sort() []); + return <div>{sorted.length}</div>; +}
facebook/react,26b177bc5e1d287c60c50fc1e185b2fb398488a0,lauren,2025-10-02 22:52:52,"[eprh] Fix `recommended` config for flat config compatibility (#34700)  Previously  the `recommended` config used the legacy ESLint format (plugins as an array of strings). This causes errors when used with ESLint v9's `defineConfig()` helper. This was following [eslint's own docs](https://eslint.org/docs/latest/extend/plugins#backwards-compatibility-for-legacy-configs):  > With this approach  both configuration systems recognize ""recommended"". The old config system uses the recommended key while the current config system uses the flat/recommended key. The defineConfig() helper first looks at the recommended key  and if that is not in the correct format  it looks for the flat/recommended key. This allows you an upgrade path if you’d later like to rename flat/recommended to recommended when you no longer need to support the old config system.  However  [`isLegacyConfig()`](https://github.com/eslint/rewrite/blob/main/packages/config-helpers/src/define-config.js#L73-L81) (also see [`eslintrcKeys`](https://github.com/eslint/rewrite/blob/main/packages/config-helpers/src/define-config.js#L24-L35)) function doesn't check for the `plugins` key  so our config was incorrectly treated as flat config despite being in legacy format.  This PR fixes the issue  along with a few other fixes combined:  1. Convert `recommended` to flat config format 2. Separate basic rules (exhaustive-deps  rules-of-hooks) from compiler rules 3. Add `recommended-latest-legacy` config for non-flat config users who want all recommended rules (including compiler rules) 4. Adding more types for the exported config  Our shipped presets in 6.x.x will essentially be: - `recommended-legacy`: legacy (non-flat)  with basic rules only - `recommended-latest-legacy`: legacy (non-flat)  all rules (basic + compiler) - `flat/recommended`: flat  basic rules only (now the same as recommended  but to avoid making a breaking change we'll just keep it around in 6.x.x) - `recommended-latest`: flat  all rules (basic + compiler) - `recommended`: flat  basic rules only  In the next breaking release 7.x.x  we will collapse down the presets into three:  - `recommended-legacy`: all recommended rules - `recommended`: all recommended rules - `recommended-experimental`: all recommended rules + new bleeding edge experimental rules  Closes #34679  --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/34700). * #34703 * __->__ #34700",fixtures/eslint-v7/.eslintrc.json,1,4,5,"{ ""root"": true - ""extends"": [""plugin:react-hooks/recommended-legacy""] + ""extends"": [""plugin:react-hooks/recommended-latest-legacy""] ""parserOptions"": { ""ecmaVersion"": 2020 ""sourceType"": ""module"" ""ecmaFeatures"": { ""jsx"": true } - } - ""rules"": { - ""react-hooks/exhaustive-deps"": ""error"" } }"
facebook/react,26b177bc5e1d287c60c50fc1e185b2fb398488a0,lauren,2025-10-02 22:52:52,"[eprh] Fix `recommended` config for flat config compatibility (#34700)  Previously  the `recommended` config used the legacy ESLint format (plugins as an array of strings). This causes errors when used with ESLint v9's `defineConfig()` helper. This was following [eslint's own docs](https://eslint.org/docs/latest/extend/plugins#backwards-compatibility-for-legacy-configs):  > With this approach  both configuration systems recognize ""recommended"". The old config system uses the recommended key while the current config system uses the flat/recommended key. The defineConfig() helper first looks at the recommended key  and if that is not in the correct format  it looks for the flat/recommended key. This allows you an upgrade path if you’d later like to rename flat/recommended to recommended when you no longer need to support the old config system.  However  [`isLegacyConfig()`](https://github.com/eslint/rewrite/blob/main/packages/config-helpers/src/define-config.js#L73-L81) (also see [`eslintrcKeys`](https://github.com/eslint/rewrite/blob/main/packages/config-helpers/src/define-config.js#L24-L35)) function doesn't check for the `plugins` key  so our config was incorrectly treated as flat config despite being in legacy format.  This PR fixes the issue  along with a few other fixes combined:  1. Convert `recommended` to flat config format 2. Separate basic rules (exhaustive-deps  rules-of-hooks) from compiler rules 3. Add `recommended-latest-legacy` config for non-flat config users who want all recommended rules (including compiler rules) 4. Adding more types for the exported config  Our shipped presets in 6.x.x will essentially be: - `recommended-legacy`: legacy (non-flat)  with basic rules only - `recommended-latest-legacy`: legacy (non-flat)  all rules (basic + compiler) - `flat/recommended`: flat  basic rules only (now the same as recommended  but to avoid making a breaking change we'll just keep it around in 6.x.x) - `recommended-latest`: flat  all rules (basic + compiler) - `recommended`: flat  basic rules only  In the next breaking release 7.x.x  we will collapse down the presets into three:  - `recommended-legacy`: all recommended rules - `recommended`: all recommended rules - `recommended-experimental`: all recommended rules + new bleeding edge experimental rules  Closes #34679  --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/34700). * #34703 * __->__ #34700",fixtures/eslint-v7/index.js,24,0,24,function useHookInLoops() { useHook4(); } } + +/** + * Compiler Rules + */ +// Invalid: component factory +function InvalidComponentFactory() { + const DynamicComponent = () => <div>Hello</div>; + // eslint-disable-next-line react-hooks/static-components + return <DynamicComponent />; +} + +// Invalid: mutating globals +function InvalidGlobals() { + // eslint-disable-next-line react-hooks/immutability + window.myGlobal = 42; + return <div>Done</div>; +} + +// Invalid: useMemo with wrong deps - triggers preserve-manual-memoization +function InvalidUseMemo({items}) { + // eslint-disable-next-line react-hooks/preserve-manual-memoization react-hooks/exhaustive-deps + const sorted = useMemo(() => [...items].sort() []); + return <div>{sorted.length}</div>; +}
facebook/react,26b177bc5e1d287c60c50fc1e185b2fb398488a0,lauren,2025-10-02 22:52:52,"[eprh] Fix `recommended` config for flat config compatibility (#34700)  Previously  the `recommended` config used the legacy ESLint format (plugins as an array of strings). This causes errors when used with ESLint v9's `defineConfig()` helper. This was following [eslint's own docs](https://eslint.org/docs/latest/extend/plugins#backwards-compatibility-for-legacy-configs):  > With this approach  both configuration systems recognize ""recommended"". The old config system uses the recommended key while the current config system uses the flat/recommended key. The defineConfig() helper first looks at the recommended key  and if that is not in the correct format  it looks for the flat/recommended key. This allows you an upgrade path if you’d later like to rename flat/recommended to recommended when you no longer need to support the old config system.  However  [`isLegacyConfig()`](https://github.com/eslint/rewrite/blob/main/packages/config-helpers/src/define-config.js#L73-L81) (also see [`eslintrcKeys`](https://github.com/eslint/rewrite/blob/main/packages/config-helpers/src/define-config.js#L24-L35)) function doesn't check for the `plugins` key  so our config was incorrectly treated as flat config despite being in legacy format.  This PR fixes the issue  along with a few other fixes combined:  1. Convert `recommended` to flat config format 2. Separate basic rules (exhaustive-deps  rules-of-hooks) from compiler rules 3. Add `recommended-latest-legacy` config for non-flat config users who want all recommended rules (including compiler rules) 4. Adding more types for the exported config  Our shipped presets in 6.x.x will essentially be: - `recommended-legacy`: legacy (non-flat)  with basic rules only - `recommended-latest-legacy`: legacy (non-flat)  all rules (basic + compiler) - `flat/recommended`: flat  basic rules only (now the same as recommended  but to avoid making a breaking change we'll just keep it around in 6.x.x) - `recommended-latest`: flat  all rules (basic + compiler) - `recommended`: flat  basic rules only  In the next breaking release 7.x.x  we will collapse down the presets into three:  - `recommended-legacy`: all recommended rules - `recommended`: all recommended rules - `recommended-experimental`: all recommended rules + new bleeding edge experimental rules  Closes #34679  --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/34700). * #34703 * __->__ #34700",fixtures/eslint-v8/.eslintrc.json,1,4,5,"{ ""root"": true - ""extends"": [""plugin:react-hooks/recommended-legacy""] + ""extends"": [""plugin:react-hooks/recommended-latest-legacy""] ""parserOptions"": { ""ecmaVersion"": 2020 ""sourceType"": ""module"" ""ecmaFeatures"": { ""jsx"": true } - } - ""rules"": { - ""react-hooks/exhaustive-deps"": ""error"" } }"
facebook/react,26b177bc5e1d287c60c50fc1e185b2fb398488a0,lauren,2025-10-02 22:52:52,"[eprh] Fix `recommended` config for flat config compatibility (#34700)  Previously  the `recommended` config used the legacy ESLint format (plugins as an array of strings). This causes errors when used with ESLint v9's `defineConfig()` helper. This was following [eslint's own docs](https://eslint.org/docs/latest/extend/plugins#backwards-compatibility-for-legacy-configs):  > With this approach  both configuration systems recognize ""recommended"". The old config system uses the recommended key while the current config system uses the flat/recommended key. The defineConfig() helper first looks at the recommended key  and if that is not in the correct format  it looks for the flat/recommended key. This allows you an upgrade path if you’d later like to rename flat/recommended to recommended when you no longer need to support the old config system.  However  [`isLegacyConfig()`](https://github.com/eslint/rewrite/blob/main/packages/config-helpers/src/define-config.js#L73-L81) (also see [`eslintrcKeys`](https://github.com/eslint/rewrite/blob/main/packages/config-helpers/src/define-config.js#L24-L35)) function doesn't check for the `plugins` key  so our config was incorrectly treated as flat config despite being in legacy format.  This PR fixes the issue  along with a few other fixes combined:  1. Convert `recommended` to flat config format 2. Separate basic rules (exhaustive-deps  rules-of-hooks) from compiler rules 3. Add `recommended-latest-legacy` config for non-flat config users who want all recommended rules (including compiler rules) 4. Adding more types for the exported config  Our shipped presets in 6.x.x will essentially be: - `recommended-legacy`: legacy (non-flat)  with basic rules only - `recommended-latest-legacy`: legacy (non-flat)  all rules (basic + compiler) - `flat/recommended`: flat  basic rules only (now the same as recommended  but to avoid making a breaking change we'll just keep it around in 6.x.x) - `recommended-latest`: flat  all rules (basic + compiler) - `recommended`: flat  basic rules only  In the next breaking release 7.x.x  we will collapse down the presets into three:  - `recommended-legacy`: all recommended rules - `recommended`: all recommended rules - `recommended-experimental`: all recommended rules + new bleeding edge experimental rules  Closes #34679  --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/34700). * #34703 * __->__ #34700",fixtures/eslint-v8/index.js,24,0,24,function useHookInLoops() { useHook4(); } } + +/** + * Compiler Rules + */ +// Invalid: component factory +function InvalidComponentFactory() { + const DynamicComponent = () => <div>Hello</div>; + // eslint-disable-next-line react-hooks/static-components + return <DynamicComponent />; +} + +// Invalid: mutating globals +function InvalidGlobals() { + // eslint-disable-next-line react-hooks/immutability + window.myGlobal = 42; + return <div>Done</div>; +} + +// Invalid: useMemo with wrong deps - triggers preserve-manual-memoization +function InvalidUseMemo({items}) { + // eslint-disable-next-line react-hooks/preserve-manual-memoization react-hooks/exhaustive-deps + const sorted = useMemo(() => [...items].sort() []); + return <div>{sorted.length}</div>; +}
facebook/react,26b177bc5e1d287c60c50fc1e185b2fb398488a0,lauren,2025-10-02 22:52:52,"[eprh] Fix `recommended` config for flat config compatibility (#34700)  Previously  the `recommended` config used the legacy ESLint format (plugins as an array of strings). This causes errors when used with ESLint v9's `defineConfig()` helper. This was following [eslint's own docs](https://eslint.org/docs/latest/extend/plugins#backwards-compatibility-for-legacy-configs):  > With this approach  both configuration systems recognize ""recommended"". The old config system uses the recommended key while the current config system uses the flat/recommended key. The defineConfig() helper first looks at the recommended key  and if that is not in the correct format  it looks for the flat/recommended key. This allows you an upgrade path if you’d later like to rename flat/recommended to recommended when you no longer need to support the old config system.  However  [`isLegacyConfig()`](https://github.com/eslint/rewrite/blob/main/packages/config-helpers/src/define-config.js#L73-L81) (also see [`eslintrcKeys`](https://github.com/eslint/rewrite/blob/main/packages/config-helpers/src/define-config.js#L24-L35)) function doesn't check for the `plugins` key  so our config was incorrectly treated as flat config despite being in legacy format.  This PR fixes the issue  along with a few other fixes combined:  1. Convert `recommended` to flat config format 2. Separate basic rules (exhaustive-deps  rules-of-hooks) from compiler rules 3. Add `recommended-latest-legacy` config for non-flat config users who want all recommended rules (including compiler rules) 4. Adding more types for the exported config  Our shipped presets in 6.x.x will essentially be: - `recommended-legacy`: legacy (non-flat)  with basic rules only - `recommended-latest-legacy`: legacy (non-flat)  all rules (basic + compiler) - `flat/recommended`: flat  basic rules only (now the same as recommended  but to avoid making a breaking change we'll just keep it around in 6.x.x) - `recommended-latest`: flat  all rules (basic + compiler) - `recommended`: flat  basic rules only  In the next breaking release 7.x.x  we will collapse down the presets into three:  - `recommended-legacy`: all recommended rules - `recommended`: all recommended rules - `recommended-experimental`: all recommended rules + new bleeding edge experimental rules  Closes #34679  --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/34700). * #34703 * __->__ #34700",fixtures/eslint-v9/eslint.config.ts,0,2,2,import {defineConfig} from 'eslint/config'; import reactHooks from 'eslint-plugin-react-hooks'; -console.log(reactHooks.configs['recommended-latest']); - export default defineConfig([ { languageOptions: {
facebook/react,26b177bc5e1d287c60c50fc1e185b2fb398488a0,lauren,2025-10-02 22:52:52,"[eprh] Fix `recommended` config for flat config compatibility (#34700)  Previously  the `recommended` config used the legacy ESLint format (plugins as an array of strings). This causes errors when used with ESLint v9's `defineConfig()` helper. This was following [eslint's own docs](https://eslint.org/docs/latest/extend/plugins#backwards-compatibility-for-legacy-configs):  > With this approach  both configuration systems recognize ""recommended"". The old config system uses the recommended key while the current config system uses the flat/recommended key. The defineConfig() helper first looks at the recommended key  and if that is not in the correct format  it looks for the flat/recommended key. This allows you an upgrade path if you’d later like to rename flat/recommended to recommended when you no longer need to support the old config system.  However  [`isLegacyConfig()`](https://github.com/eslint/rewrite/blob/main/packages/config-helpers/src/define-config.js#L73-L81) (also see [`eslintrcKeys`](https://github.com/eslint/rewrite/blob/main/packages/config-helpers/src/define-config.js#L24-L35)) function doesn't check for the `plugins` key  so our config was incorrectly treated as flat config despite being in legacy format.  This PR fixes the issue  along with a few other fixes combined:  1. Convert `recommended` to flat config format 2. Separate basic rules (exhaustive-deps  rules-of-hooks) from compiler rules 3. Add `recommended-latest-legacy` config for non-flat config users who want all recommended rules (including compiler rules) 4. Adding more types for the exported config  Our shipped presets in 6.x.x will essentially be: - `recommended-legacy`: legacy (non-flat)  with basic rules only - `recommended-latest-legacy`: legacy (non-flat)  all rules (basic + compiler) - `flat/recommended`: flat  basic rules only (now the same as recommended  but to avoid making a breaking change we'll just keep it around in 6.x.x) - `recommended-latest`: flat  all rules (basic + compiler) - `recommended`: flat  basic rules only  In the next breaking release 7.x.x  we will collapse down the presets into three:  - `recommended-legacy`: all recommended rules - `recommended`: all recommended rules - `recommended-experimental`: all recommended rules + new bleeding edge experimental rules  Closes #34679  --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/34700). * #34703 * __->__ #34700",fixtures/eslint-v9/index.js,24,0,24,function useHookInLoops() { useHook4(); } } + +/** + * Compiler Rules + */ +// Invalid: component factory +function InvalidComponentFactory() { + const DynamicComponent = () => <div>Hello</div>; + // eslint-disable-next-line react-hooks/static-components + return <DynamicComponent />; +} + +// Invalid: mutating globals +function InvalidGlobals() { + // eslint-disable-next-line react-hooks/immutability + window.myGlobal = 42; + return <div>Done</div>; +} + +// Invalid: useMemo with wrong deps - triggers preserve-manual-memoization +function InvalidUseMemo({items}) { + // eslint-disable-next-line react-hooks/preserve-manual-memoization react-hooks/exhaustive-deps + const sorted = useMemo(() => [...items].sort() []); + return <div>{sorted.length}</div>; +}
facebook/react,26b177bc5e1d287c60c50fc1e185b2fb398488a0,lauren,2025-10-02 22:52:52,"[eprh] Fix `recommended` config for flat config compatibility (#34700)  Previously  the `recommended` config used the legacy ESLint format (plugins as an array of strings). This causes errors when used with ESLint v9's `defineConfig()` helper. This was following [eslint's own docs](https://eslint.org/docs/latest/extend/plugins#backwards-compatibility-for-legacy-configs):  > With this approach  both configuration systems recognize ""recommended"". The old config system uses the recommended key while the current config system uses the flat/recommended key. The defineConfig() helper first looks at the recommended key  and if that is not in the correct format  it looks for the flat/recommended key. This allows you an upgrade path if you’d later like to rename flat/recommended to recommended when you no longer need to support the old config system.  However  [`isLegacyConfig()`](https://github.com/eslint/rewrite/blob/main/packages/config-helpers/src/define-config.js#L73-L81) (also see [`eslintrcKeys`](https://github.com/eslint/rewrite/blob/main/packages/config-helpers/src/define-config.js#L24-L35)) function doesn't check for the `plugins` key  so our config was incorrectly treated as flat config despite being in legacy format.  This PR fixes the issue  along with a few other fixes combined:  1. Convert `recommended` to flat config format 2. Separate basic rules (exhaustive-deps  rules-of-hooks) from compiler rules 3. Add `recommended-latest-legacy` config for non-flat config users who want all recommended rules (including compiler rules) 4. Adding more types for the exported config  Our shipped presets in 6.x.x will essentially be: - `recommended-legacy`: legacy (non-flat)  with basic rules only - `recommended-latest-legacy`: legacy (non-flat)  all rules (basic + compiler) - `flat/recommended`: flat  basic rules only (now the same as recommended  but to avoid making a breaking change we'll just keep it around in 6.x.x) - `recommended-latest`: flat  all rules (basic + compiler) - `recommended`: flat  basic rules only  In the next breaking release 7.x.x  we will collapse down the presets into three:  - `recommended-legacy`: all recommended rules - `recommended`: all recommended rules - `recommended-experimental`: all recommended rules + new bleeding edge experimental rules  Closes #34679  --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/34700). * #34703 * __->__ #34700",packages/eslint-plugin-react-hooks/src/index.ts,47,20,67,const rules = { ) } satisfies Record<string Rule.RuleModule>; -// Config rules -const ruleConfigs = { +// Basic hooks rules (for recommended config) +const basicRuleConfigs = { 'react-hooks/rules-of-hooks': 'error' 'react-hooks/exhaustive-deps': 'warn' - // Compiler rules - ...Object.fromEntries( - Object.entries(recommendedRules).map(([name ruleConfig]) => { - return [ - 'react-hooks/' + name - mapErrorSeverityToESlint(ruleConfig.severity) - ]; - }) - ) -} satisfies Linter.RulesRecord; +} as const satisfies Linter.RulesRecord; + +const compilerRuleConfigs = Object.fromEntries( + Object.entries(recommendedRules).map(([name ruleConfig]) => { + return [ + `react-hooks/${name}` as const + mapErrorSeverityToESlint(ruleConfig.severity) + ] as const; + }) +) as Record<`react-hooks/${string}` Linter.RuleEntry>; + +// All rules including compiler rules (for recommended-latest config) +const allRuleConfigs: Linter.RulesRecord = { + ...basicRuleConfigs + ...compilerRuleConfigs +}; const plugin = { meta: { name: 'eslint-plugin-react-hooks' } - configs: {} rules + configs: {} as { + 'recommended-legacy': { + plugins: Array<string>; + rules: Linter.RulesRecord; + }; + 'recommended-latest-legacy': { + plugins: Array<string>; + rules: Linter.RulesRecord; + }; + 'flat/recommended': Array<Linter.Config>; + 'recommended-latest': Array<Linter.Config>; + recommended: Array<Linter.Config>; + } }; Object.assign(plugin.configs { 'recommended-legacy': { plugins: ['react-hooks'] - rules: ruleConfigs + rules: basicRuleConfigs + } + + 'recommended-latest-legacy': { + plugins: ['react-hooks'] + rules: allRuleConfigs } 'flat/recommended': [ { plugins: { 'react-hooks': plugin } - rules: ruleConfigs + rules: basicRuleConfigs } ] Object.assign(plugin.configs { plugins: { 'react-hooks': plugin } - rules: ruleConfigs + rules: allRuleConfigs } ] - recommended: { - plugins: ['react-hooks'] - rules: ruleConfigs - } + recommended: [ + { + plugins: { + 'react-hooks': plugin + } + rules: basicRuleConfigs + } + ] }); export default plugin;
facebook/react,5cc3d49f72a9e78cce61f7fbfc1b7455f313cebe,lauren,2025-10-02 22:42:30,[eprh] Add compiler rules to recommended preset (#34675)  Adds back the compiler rules to the recommended preset  intended for the next release.  --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/34675). * #34703 * #34700 * #34699 * __->__ #34675,packages/eslint-plugin-react-hooks/src/index.ts,14,1,15,import type {Linter Rule} from 'eslint'; import ExhaustiveDeps from './rules/ExhaustiveDeps'; -import {allRules} from './shared/ReactCompiler'; +import { + allRules + mapErrorSeverityToESlint + recommendedRules +} from './shared/ReactCompiler'; import RulesOfHooks from './rules/RulesOfHooks'; // All rules const rules = { const ruleConfigs = { 'react-hooks/rules-of-hooks': 'error' 'react-hooks/exhaustive-deps': 'warn' + // Compiler rules + ...Object.fromEntries( + Object.entries(recommendedRules).map(([name ruleConfig]) => { + return [ + 'react-hooks/' + name + mapErrorSeverityToESlint(ruleConfig.severity) + ]; + }) + ) } satisfies Linter.RulesRecord; const plugin = {
facebook/react,289f070d64c824a43a401762ec786f5502a0074e,Eugene Choi,2025-10-02 21:41:29,[playground] Improve DiffEditor scrollbar + view (#34691)  The previous DiffEditor view of the playground looked broken and not cohesive. There would be parts of the scrollbar appearing on the left side for some reason  along with two scrollbars on the right side. This PR makes the DiffEditor look more cohesive.  Previous:   https://github.com/user-attachments/assets/1aa1c775-5940-43b2-a75a-9b46452fb78b  After:   https://github.com/user-attachments/assets/b5c04998-6a6c-4b52-b3c5-b2fef21729e0,compiler/apps/playground/components/AccordionWindow.tsx,1,2,3,import {Resizable} from 're-resizable'; import React { - useCallback useId unstable_ViewTransition as ViewTransition unstable_addTransitionType as addTransitionType function AccordionWindowItem({ const transitionName = `accordion-window-item-${id}`; - const toggleTabs = () => { + const toggleTabs = (): void => { startTransition(() => { addTransitionType(EXPAND_ACCORDION_TRANSITION); const nextState = new Set(tabsOpen);
facebook/react,289f070d64c824a43a401762ec786f5502a0074e,Eugene Choi,2025-10-02 21:41:29,[playground] Improve DiffEditor scrollbar + view (#34691)  The previous DiffEditor view of the playground looked broken and not cohesive. There would be parts of the scrollbar appearing on the left side for some reason  along with two scrollbars on the right side. This PR makes the DiffEditor look more cohesive.  Previous:   https://github.com/user-attachments/assets/1aa1c775-5940-43b2-a75a-9b46452fb78b  After:   https://github.com/user-attachments/assets/b5c04998-6a6c-4b52-b3c5-b2fef21729e0,compiler/apps/playground/components/Editor/EditorImpl.tsx,1,5,6,import BabelPluginReactCompiler { printFunctionWithOutlined type LoggerEvent } from 'babel-plugin-react-compiler'; -import { - useDeferredValue - useMemo - unstable_ViewTransition as ViewTransition -} from 'react'; +import {useDeferredValue useMemo} from 'react'; import {useStore} from '../StoreContext'; import ConfigEditor from './ConfigEditor'; import Input from './Input';
facebook/react,289f070d64c824a43a401762ec786f5502a0074e,Eugene Choi,2025-10-02 21:41:29,[playground] Improve DiffEditor scrollbar + view (#34691)  The previous DiffEditor view of the playground looked broken and not cohesive. There would be parts of the scrollbar appearing on the left side for some reason  along with two scrollbars on the right side. This PR makes the DiffEditor look more cohesive.  Previous:   https://github.com/user-attachments/assets/1aa1c775-5940-43b2-a75a-9b46452fb78b  After:   https://github.com/user-attachments/assets/b5c04998-6a6c-4b52-b3c5-b2fef21729e0,compiler/apps/playground/components/Editor/Output.tsx,8,2,10,function TextTabContent({ loading={''} options={{ ...monacoOptions + scrollbar: { + vertical: 'hidden' + } + dimension: { + width: 0 + height: 0 + } readOnly: true lineNumbers: 'off' glyphMargin: false // Undocumented see https://github.com/Microsoft/vscode/issues/30795#issuecomment-410998882 - lineDecorationsWidth: 0 - lineNumbersMinChars: 0 + overviewRulerLanes: 0 }} /> ) : (
facebook/react,289f070d64c824a43a401762ec786f5502a0074e,Eugene Choi,2025-10-02 21:41:29,[playground] Improve DiffEditor scrollbar + view (#34691)  The previous DiffEditor view of the playground looked broken and not cohesive. There would be parts of the scrollbar appearing on the left side for some reason  along with two scrollbars on the right side. This PR makes the DiffEditor look more cohesive.  Previous:   https://github.com/user-attachments/assets/1aa1c775-5940-43b2-a75a-9b46452fb78b  After:   https://github.com/user-attachments/assets/b5c04998-6a6c-4b52-b3c5-b2fef21729e0,compiler/apps/playground/styles/globals.css,8,0,8,::view-transition-group(.expand-accordion) { overflow: clip; } + +/** + * For some reason the original Monaco editor is still visible to the + * left of the DiffEditor. This is a workaround for better visual clarity. + */ +.monaco-diff-editor .editor.original{ + visibility: hidden !important; +}
facebook/react,6a8a8ef32692cc42b53d072d5ce6a6a84e190482,"Sebastian ""Sebbie"" Silbermann",2025-10-02 21:14:52,[Flight] Add `<Activity>` (#34697),packages/react-reconciler/src/__tests__/ActivityReactServer-test.js,65,0,65,+/** + * Copyright (c) Meta Platforms Inc. and affiliates. + * + * This source code is licensed under the MIT license found in the + * LICENSE file in the root directory of this source tree. + * + * @emails react-core + * @jest-environment node + */ + +'use strict'; + +let act; +let Activity; +let React; +let ReactServer; +let ReactNoop; +let ReactNoopFlightClient; +let ReactNoopFlightServer; + +describe('ActivityReactServer' () => { + beforeEach(() => { + jest.resetModules(); + jest.mock('react' () => require('react/react.react-server')); + ReactServer = require('react'); + Activity = ReactServer.Activity; + ReactNoopFlightServer = require('react-noop-renderer/flight-server'); + + jest.resetModules(); + __unmockReact(); + React = require('react'); + ReactNoopFlightClient = require('react-noop-renderer/flight-client'); + ReactNoop = require('react-noop-renderer'); + const InternalTestUtils = require('internal-test-utils'); + act = InternalTestUtils.act; + }); + + afterEach(() => { + jest.restoreAllMocks(); + }); + + it('can be rendered in React Server' async () => { + function App() { + return ReactServer.createElement( + Activity + {mode: 'hidden'} + ReactServer.createElement('div' null 'Hello Dave!') + ); + } + + const transport = ReactNoopFlightServer.render( + ReactServer.createElement(App null) + ); + + await act(async () => { + const app = await ReactNoopFlightClient.read(transport); + + ReactNoop.render(app); + }); + + expect(ReactNoop).toMatchRenderedOutput( + <div hidden={true}>Hello Dave!</div> + ); + }); +});
facebook/react,6a8a8ef32692cc42b53d072d5ce6a6a84e190482,"Sebastian ""Sebbie"" Silbermann",2025-10-02 21:14:52,[Flight] Add `<Activity>` (#34697),packages/react-reconciler/src/__tests__/ViewTransitionReactServer-test.js,64,0,64,+/** + * Copyright (c) Meta Platforms Inc. and affiliates. + * + * This source code is licensed under the MIT license found in the + * LICENSE file in the root directory of this source tree. + * + * @emails react-core + * @jest-environment node + */ + +'use strict'; + +let act; +let ViewTransition; +let React; +let ReactServer; +let ReactNoop; +let ReactNoopFlightClient; +let ReactNoopFlightServer; + +describe('ViewTransitionReactServer' () => { + beforeEach(() => { + jest.resetModules(); + jest.mock('react' () => require('react/react.react-server')); + ReactServer = require('react'); + ViewTransition = ReactServer.unstable_ViewTransition; + ReactNoopFlightServer = require('react-noop-renderer/flight-server'); + + jest.resetModules(); + __unmockReact(); + React = require('react'); + ReactNoopFlightClient = require('react-noop-renderer/flight-client'); + ReactNoop = require('react-noop-renderer'); + const InternalTestUtils = require('internal-test-utils'); + act = InternalTestUtils.act; + }); + + afterEach(() => { + jest.restoreAllMocks(); + }); + + // @gate enableViewTransition || fb + it('can be rendered in React Server' async () => { + function App() { + return ReactServer.createElement( + ViewTransition + {} + ReactServer.createElement('div' null 'Hello Dave!') + ); + } + + const transport = ReactNoopFlightServer.render( + ReactServer.createElement(App null) + ); + + await act(async () => { + const app = await ReactNoopFlightClient.read(transport); + + ReactNoop.render(app); + }); + + expect(ReactNoop).toMatchRenderedOutput(<div>Hello Dave!</div>); + }); +});
facebook/react,6a8a8ef32692cc42b53d072d5ce6a6a84e190482,"Sebastian ""Sebbie"" Silbermann",2025-10-02 21:14:52,[Flight] Add `<Activity>` (#34697),packages/react/src/ReactServer.experimental.development.js,1,1,2,export { export { Children + REACT_ACTIVITY_TYPE as Activity REACT_FRAGMENT_TYPE as Fragment REACT_PROFILER_TYPE as Profiler REACT_STRICT_MODE_TYPE as StrictMode export { // Experimental REACT_SUSPENSE_LIST_TYPE as unstable_SuspenseList REACT_VIEW_TRANSITION_TYPE as unstable_ViewTransition - REACT_ACTIVITY_TYPE as unstable_Activity captureOwnerStack // DEV-only };
facebook/react,6a8a8ef32692cc42b53d072d5ce6a6a84e190482,"Sebastian ""Sebbie"" Silbermann",2025-10-02 21:14:52,[Flight] Add `<Activity>` (#34697),packages/react/src/ReactServer.experimental.js,1,1,2,export { export { Children + REACT_ACTIVITY_TYPE as Activity REACT_FRAGMENT_TYPE as Fragment REACT_PROFILER_TYPE as Profiler REACT_STRICT_MODE_TYPE as StrictMode export { // Experimental REACT_SUSPENSE_LIST_TYPE as unstable_SuspenseList REACT_VIEW_TRANSITION_TYPE as unstable_ViewTransition - REACT_ACTIVITY_TYPE as Activity };
facebook/react,6a8a8ef32692cc42b53d072d5ce6a6a84e190482,"Sebastian ""Sebbie"" Silbermann",2025-10-02 21:14:52,[Flight] Add `<Activity>` (#34697),packages/react/src/ReactServer.fb.js,7,0,7,export {default as __SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRA import {forEach map count toArray only} from './ReactChildren'; import {captureOwnerStack as captureOwnerStackImpl} from './ReactOwnerStack'; import { + REACT_ACTIVITY_TYPE REACT_FRAGMENT_TYPE REACT_PROFILER_TYPE REACT_STRICT_MODE_TYPE REACT_SUSPENSE_TYPE + REACT_SUSPENSE_LIST_TYPE + REACT_VIEW_TRANSITION_TYPE } from 'shared/ReactSymbols'; import { cloneElement if (__DEV__) { export { Children + REACT_ACTIVITY_TYPE as Activity REACT_FRAGMENT_TYPE as Fragment REACT_PROFILER_TYPE as Profiler REACT_STRICT_MODE_TYPE as StrictMode export { useMemo version captureOwnerStack // DEV-only + // Experimental + REACT_SUSPENSE_LIST_TYPE as unstable_SuspenseList + REACT_VIEW_TRANSITION_TYPE as unstable_ViewTransition };
facebook/react,6a8a8ef32692cc42b53d072d5ce6a6a84e190482,"Sebastian ""Sebbie"" Silbermann",2025-10-02 21:14:52,[Flight] Add `<Activity>` (#34697),packages/react/src/ReactServer.js,2,0,2,export {default as __SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRA import {forEach map count toArray only} from './ReactChildren'; import { + REACT_ACTIVITY_TYPE REACT_FRAGMENT_TYPE REACT_PROFILER_TYPE REACT_STRICT_MODE_TYPE const Children = { export { Children + REACT_ACTIVITY_TYPE as Activity REACT_FRAGMENT_TYPE as Fragment REACT_PROFILER_TYPE as Profiler REACT_STRICT_MODE_TYPE as StrictMode
facebook/react,f89ed71ddf5f8cab28b202cfdc04927c683ad3cc,Sebastian Markbåge,2025-10-02 21:06:52,[DevTools] Track whether to auto select when new timeline entries come on (#34698)  This auto updates to select the last entry in the timeline until we make the first selection. That way when new content loads in  we show the last timeline of what is visible.,packages/react-devtools-shared/src/devtools/views/SuspenseTab/SuspenseTreeContext.js,12,1,13,export type SuspenseTreeState = { hoveredTimelineIndex: number | -1 uniqueSuspendersOnly: boolean playing: boolean + autoSelect: boolean }; type ACTION_SUSPENSE_TREE_MUTATION = { function getInitialState(store: Store): SuspenseTreeState { hoveredTimelineIndex: -1 uniqueSuspendersOnly playing: false + autoSelect: true }; return initialState; function SuspenseTreeContextController({children}: Props): React.Node { selectedTimelineID === null || nextTimeline.length === 0 ? -1 : nextTimeline.indexOf(selectedTimelineID); - if (nextTimeline.length > 0 && nextTimelineIndex === -1) { + if ( + nextTimeline.length > 0 && + (nextTimelineIndex === -1 || state.autoSelect) + ) { nextTimelineIndex = nextTimeline.length - 1; selectedSuspenseID = nextTimeline[nextTimelineIndex]; } function SuspenseTreeContextController({children}: Props): React.Node { ...state selectedSuspenseID playing: false // pause + autoSelect: false }; } case 'SET_SUSPENSE_LINEAGE': { function SuspenseTreeContextController({children}: Props): React.Node { lineage selectedSuspenseID: suspenseID playing: false // pause + autoSelect: false }; } case 'SET_SUSPENSE_TIMELINE': { function SuspenseTreeContextController({children}: Props): React.Node { selectedSuspenseID: nextSelectedSuspenseID timelineIndex: nextTimelineIndex playing: false // pause + autoSelect: false }; } case 'SUSPENSE_SKIP_TIMELINE_INDEX': { function SuspenseTreeContextController({children}: Props): React.Node { selectedSuspenseID: nextSelectedSuspenseID timelineIndex: nextTimelineIndex playing: false // pause + autoSelect: false }; } case 'SUSPENSE_PLAY_PAUSE': { function SuspenseTreeContextController({children}: Props): React.Node { selectedSuspenseID: nextSelectedSuspenseID timelineIndex: nextTimelineIndex playing: mode === 'toggle' ? !state.playing : mode === 'play' + autoSelect: false }; } case 'SUSPENSE_PLAY_TICK': { function SuspenseTreeContextController({children}: Props): React.Node { selectedSuspenseID: nextSelectedSuspenseID timelineIndex: nextTimelineIndex playing: false // pause + autoSelect: false }; } case 'HOVER_TIMELINE_FOR_ID': {
facebook/react,7d9f876cbc7e9363092e60436704cf8ae435b969,Josh Story,2025-10-02 20:21:57,[Fizz] Detatch boundary after flushing segment with boundary (#34694)  When we flush a Suspense boundary we might not flush the fallback segment  it might only flush a placeholder instead. In this case the segment can flush again but we do not want to flush the boundary itself a second time. We now detach the boundary after flushing it.  better solution to: https://github.com/facebook/react/pull/34668,packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js,52,0,52,"Unfortunately that previous paragraph wasn't quite long enough so I'll continue </html> ); }); + + it('not error when a suspended fallback segment directly inside another Suspense is abandoned' async () => { + function SuspendForever() { + React.use(new Promise(() => {})); + } + + let resolve = () => {}; + const suspendPromise = new Promise(r => { + resolve = r; + }); + function Suspend() { + return React.use(suspendPromise); + } + + function App() { + return ( + <html> + <body> + <Suspense fallback=""outer""> + <Suspense fallback={<SuspendForever />}> + <span>hello world</span> + <span> + <Suspend /> + </span> + </Suspense> + </Suspense> + </body> + </html> + ); + } + + await act(async () => { + const {pipe} = renderToPipeableStream(<App /> { + onError() {} + }); + pipe(writable); + }); + + await act(() => { + resolve('!'); + }); + + expect(getVisibleChildren(document)).toEqual( + <html> + <head /> + <body> + <span>hello world</span> + <span>!</span> + </body> + </html> + ); + }); });"
facebook/react,7d9f876cbc7e9363092e60436704cf8ae435b969,Josh Story,2025-10-02 20:21:57,[Fizz] Detatch boundary after flushing segment with boundary (#34694)  When we flush a Suspense boundary we might not flush the fallback segment  it might only flush a placeholder instead. In this case the segment can flush again but we do not want to flush the boundary itself a second time. We now detach the boundary after flushing it.  better solution to: https://github.com/facebook/react/pull/34668,packages/react-server/src/ReactFizzServer.js,6,2,8,type Segment = { // The context that this segment was created in. parentFormatContext: FormatContext // If this segment represents a fallback this is the content that will replace that fallback. - +boundary: null | SuspenseBoundary + boundary: null | SuspenseBoundary // used to discern when text separator boundaries are needed lastPushedText: boolean textEmbedded: boolean function flushSegment( return flushSubtree(request destination segment hoistableState); } + // We're going to write the boundary. We don't need to maintain this reference since + // we might reflush this segment at a later time (if it aborts and we inlined) but + // we don't want to reflush the boundary + segment.boundary = null; boundary.parentFlushed = true; // This segment is a Suspense boundary. We need to decide whether to // emit the content or the fallback now. function flushPartiallyCompletedSegment( segment: Segment ): boolean { if (segment.status === FLUSHED) { - // We've already flushed this inline. + // We've already flushed this inline return true; }
facebook/react,df3562dc7f4ac7a5e60e76e8fec285890ef60639,"Sebastian ""Sebbie"" Silbermann",2025-10-02 19:52:50,Fix DevTools regression tests (#34696),packages/react-devtools-shared/src/__tests__/preprocessData-test.js,2,0,2,describe('Timeline profiler' () => { `); }); + // @reactVersion >= 19.1 // @reactVersion < 19.2 it('should process a sample createRoot render sequence' async () => { function App() { describe('Timeline profiler' () => { `); }); + // @reactVersion >= 19.1 // @reactVersion < 19.2 it('should process a sample createRoot render sequence' async () => { function App() {
facebook/react,b56907db515ea518b7c30015d2c5d5641df35942,Sebastian Markbåge,2025-10-02 19:29:38,[DevTools] Show Props as Read-only for Suspense/Activity but below (#34695)  Somehow my last commit didn't make it in #34630.,packages/react-devtools-shared/src/devtools/views/Components/InspectedElementPropsTree.js,7,11,18,"import styles from './InspectedElementSharedStyles.css'; import { ElementTypeClass ElementTypeSuspense + ElementTypeActivity } from 'react-devtools-shared/src/frontend/types'; import {withPermissionsCheck} from 'react-devtools-shared/src/frontend/utils/withPermissionsCheck'; export default function InspectedElementPropsTree({ type } = inspectedElement; - if (type === ElementTypeSuspense) { - // Skip showing the props for Suspense. We want to give more real estate to the - // ""Suspended by"" for Suspense boundaries. We could maybe show it further below - // but in practice the props of Suspense boundaries are not very useful to - // inspect because the name shows in the tree already. The children in the tree - // will be either the ""fallback"" or ""children"" prop which you can already inspect - // but resuspending the tree. - return null; - } - const canDeletePaths = type === ElementTypeClass || canEditFunctionPropsDeletePaths; const canEditValues = - !readOnly && (type === ElementTypeClass || canEditFunctionProps); + !readOnly && + (type === ElementTypeClass || canEditFunctionProps) && + // Make it read-only for Suspense to make it a bit cleaner. It's not + // useful to edit children anyway. + type !== ElementTypeSuspense && + type !== ElementTypeActivity; const canRenamePaths = type === ElementTypeClass || canEditFunctionPropsRenamePaths;"
facebook/react,b56907db515ea518b7c30015d2c5d5641df35942,Sebastian Markbåge,2025-10-02 19:29:38,[DevTools] Show Props as Read-only for Suspense/Activity but below (#34695)  Somehow my last commit didn't make it in #34630.,packages/react-devtools-shared/src/devtools/views/Components/InspectedElementView.js,29,8,37,import InspectedElementSourcePanel from './InspectedElementSourcePanel'; import StackTraceView from './StackTraceView'; import OwnerView from './OwnerView'; import Skeleton from './Skeleton'; +import { + ElementTypeSuspense + ElementTypeActivity +} from 'react-devtools-shared/src/frontend/types'; import styles from './InspectedElementView.css'; export default function InspectedElementView({ rootType source nativeTag + type } = inspectedElement; const bridge = useContext(BridgeContext); export default function InspectedElementView({ const showRenderedBy = showStack || showOwnersList || rendererLabel !== null || rootType !== null; + const propsSection = ( + <div className={styles.InspectedElementSection}> + <InspectedElementPropsTree + bridge={bridge} + element={element} + inspectedElement={inspectedElement} + store={store} + /> + </div> + ); + return ( <Fragment> <div className={styles.InspectedElement}> export default function InspectedElementView({ /> </div> - <div className={styles.InspectedElementSection}> - <InspectedElementPropsTree - bridge={bridge} - element={element} - inspectedElement={inspectedElement} - store={store} - /> - </div> + { + // For Suspense and Activity we show the props further down. + type !== ElementTypeSuspense && type !== ElementTypeActivity + ? propsSection + : null + } <div className={styles.InspectedElementSection}> <InspectedElementStateTree export default function InspectedElementView({ /> </div> + { + // For Suspense and Activity we show the props below suspended by to give that more priority. + type !== ElementTypeSuspense && type !== ElementTypeActivity + ? null + : propsSection + } + {showRenderedBy && ( <div className={styles.InspectedElementSection}
facebook/react,c825f030679c41b55faf448648cee4e41dff3787,Sebastian Markbåge,2025-10-02 19:18:41,"[DevTools] Hide State and Props in the Sidebar for Suspense (#34630)  We're showing too much noise in the side-panel when selecting a Suspense boundary. The interesting thing to see directly is the ""Suspended by"".  The ""props"" are mostly useless because the `""name""` prop is already in the tree. I'm now also showing it in the title bar of the selected element panel. The ""children"" and ""fallback"" props are just the thing that you can see in the tree view anyway.  The ""state"" is this weird section with just one field in it  which we already have duplicated in the top toolbar as well. We can just delete this. I make sure to show the icon and a ""suspended..."" section while the boundary is still loading but now yet resuspended by force suspending.  While still loading:  <img width=""600"" height=""193"" alt=""Screenshot 2025-09-27 at 11 54 37 PM"" src=""https://github.com/user-attachments/assets/1c3f3a96-46e0-4b11-806f-032569c7d5b5"" />  After loading:  <img width=""602"" height=""266"" alt=""Screenshot 2025-09-27 at 11 54 53 PM"" src=""https://github.com/user-attachments/assets/c43cc4cb-036f-4ced-9b0d-226c6320cd76"" />  Resuspended after loading:  <img width=""602"" height=""300"" alt=""Screenshot 2025-09-27 at 11 55 07 PM"" src=""https://github.com/user-attachments/assets/0be01735-48a7-47dc-b5cf-e72ec71e0148"" />",packages/react-devtools-shared/src/backend/fiber/renderer.js,2,5,7,export function attach( rootType = fiberRoot._debugRootType; } - const isTimedOutSuspense = - tag === SuspenseComponent && memoizedState !== null; - let isErrored = false; if (isErrorBoundary(fiber)) { // if the current inspected element is an error boundary export function attach( if ( fiberInstance.suspenseNode !== null && fiberInstance.suspenseNode.hasUnknownSuspenders && - !isTimedOutSuspense + !isSuspended ) { // Something unknown threw to suspended this boundary. Let's figure out why that might be. if (renderer.bundleType === 0) { export function attach( supportsTogglingSuspense && hasSuspenseBoundary && // If it's showing the real content we can always flip fallback. - (!isTimedOutSuspense || + (!isSuspended || // If it's showing fallback because we previously forced it to // allow toggling it back to remove the fallback override. forceFallbackForFibers.has(fiber) ||
facebook/react,c825f030679c41b55faf448648cee4e41dff3787,Sebastian Markbåge,2025-10-02 19:18:41,"[DevTools] Hide State and Props in the Sidebar for Suspense (#34630)  We're showing too much noise in the side-panel when selecting a Suspense boundary. The interesting thing to see directly is the ""Suspended by"".  The ""props"" are mostly useless because the `""name""` prop is already in the tree. I'm now also showing it in the title bar of the selected element panel. The ""children"" and ""fallback"" props are just the thing that you can see in the tree view anyway.  The ""state"" is this weird section with just one field in it  which we already have duplicated in the top toolbar as well. We can just delete this. I make sure to show the icon and a ""suspended..."" section while the boundary is still loading but now yet resuspended by force suspending.  While still loading:  <img width=""600"" height=""193"" alt=""Screenshot 2025-09-27 at 11 54 37 PM"" src=""https://github.com/user-attachments/assets/1c3f3a96-46e0-4b11-806f-032569c7d5b5"" />  After loading:  <img width=""602"" height=""266"" alt=""Screenshot 2025-09-27 at 11 54 53 PM"" src=""https://github.com/user-attachments/assets/c43cc4cb-036f-4ced-9b0d-226c6320cd76"" />  Resuspended after loading:  <img width=""602"" height=""300"" alt=""Screenshot 2025-09-27 at 11 55 07 PM"" src=""https://github.com/user-attachments/assets/0be01735-48a7-47dc-b5cf-e72ec71e0148"" />",packages/react-devtools-shared/src/devtools/views/Components/InspectedElement.js,6,3,9,"export default function InspectedElementWrapper(_: Props): React.Node { <ButtonIcon type=""error"" /> </Toggle> )} - {canToggleSuspense && ( + {canToggleSuspense || isSuspended ? ( <Toggle isChecked={isSuspended} + isDisabled={!canToggleSuspense} onChange={toggleSuspended} title={ isSuspended - ? 'Unsuspend the selected component' + ? canToggleSuspense + ? 'Unsuspend the selected component' + : 'This boundary is still suspended' : 'Suspend the selected component' }> <ButtonIcon type=""suspend"" /> </Toggle> - )} + ) : null} {store.supportsInspectMatchingDOMElement && ( <Button onClick={highlightElement}"
facebook/react,c825f030679c41b55faf448648cee4e41dff3787,Sebastian Markbåge,2025-10-02 19:18:41,"[DevTools] Hide State and Props in the Sidebar for Suspense (#34630)  We're showing too much noise in the side-panel when selecting a Suspense boundary. The interesting thing to see directly is the ""Suspended by"".  The ""props"" are mostly useless because the `""name""` prop is already in the tree. I'm now also showing it in the title bar of the selected element panel. The ""children"" and ""fallback"" props are just the thing that you can see in the tree view anyway.  The ""state"" is this weird section with just one field in it  which we already have duplicated in the top toolbar as well. We can just delete this. I make sure to show the icon and a ""suspended..."" section while the boundary is still loading but now yet resuspended by force suspending.  While still loading:  <img width=""600"" height=""193"" alt=""Screenshot 2025-09-27 at 11 54 37 PM"" src=""https://github.com/user-attachments/assets/1c3f3a96-46e0-4b11-806f-032569c7d5b5"" />  After loading:  <img width=""602"" height=""266"" alt=""Screenshot 2025-09-27 at 11 54 53 PM"" src=""https://github.com/user-attachments/assets/c43cc4cb-036f-4ced-9b0d-226c6320cd76"" />  Resuspended after loading:  <img width=""602"" height=""300"" alt=""Screenshot 2025-09-27 at 11 55 07 PM"" src=""https://github.com/user-attachments/assets/0be01735-48a7-47dc-b5cf-e72ec71e0148"" />",packages/react-devtools-shared/src/devtools/views/Components/InspectedElementPropsTree.js,14,1,15,"import NewKeyValue from './NewKeyValue'; import {alphaSortEntries serializeDataForCopy} from '../utils'; import Store from '../../store'; import styles from './InspectedElementSharedStyles.css'; -import {ElementTypeClass} from 'react-devtools-shared/src/frontend/types'; +import { + ElementTypeClass + ElementTypeSuspense +} from 'react-devtools-shared/src/frontend/types'; import {withPermissionsCheck} from 'react-devtools-shared/src/frontend/utils/withPermissionsCheck'; import type {InspectedElement} from 'react-devtools-shared/src/frontend/types'; export default function InspectedElementPropsTree({ type } = inspectedElement; + if (type === ElementTypeSuspense) { + // Skip showing the props for Suspense. We want to give more real estate to the + // ""Suspended by"" for Suspense boundaries. We could maybe show it further below + // but in practice the props of Suspense boundaries are not very useful to + // inspect because the name shows in the tree already. The children in the tree + // will be either the ""fallback"" or ""children"" prop which you can already inspect + // but resuspending the tree. + return null; + } + const canDeletePaths = type === ElementTypeClass || canEditFunctionPropsDeletePaths; const canEditValues ="
facebook/react,c825f030679c41b55faf448648cee4e41dff3787,Sebastian Markbåge,2025-10-02 19:18:41,"[DevTools] Hide State and Props in the Sidebar for Suspense (#34630)  We're showing too much noise in the side-panel when selecting a Suspense boundary. The interesting thing to see directly is the ""Suspended by"".  The ""props"" are mostly useless because the `""name""` prop is already in the tree. I'm now also showing it in the title bar of the selected element panel. The ""children"" and ""fallback"" props are just the thing that you can see in the tree view anyway.  The ""state"" is this weird section with just one field in it  which we already have duplicated in the top toolbar as well. We can just delete this. I make sure to show the icon and a ""suspended..."" section while the boundary is still loading but now yet resuspended by force suspending.  While still loading:  <img width=""600"" height=""193"" alt=""Screenshot 2025-09-27 at 11 54 37 PM"" src=""https://github.com/user-attachments/assets/1c3f3a96-46e0-4b11-806f-032569c7d5b5"" />  After loading:  <img width=""602"" height=""266"" alt=""Screenshot 2025-09-27 at 11 54 53 PM"" src=""https://github.com/user-attachments/assets/c43cc4cb-036f-4ced-9b0d-226c6320cd76"" />  Resuspended after loading:  <img width=""602"" height=""300"" alt=""Screenshot 2025-09-27 at 11 55 07 PM"" src=""https://github.com/user-attachments/assets/0be01735-48a7-47dc-b5cf-e72ec71e0148"" />",packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSuspendedBy.js,11,0,11,export default function InspectedElementSuspendedBy({ (suspendedBy == null || suspendedBy.length === 0) && inspectedElement.unknownSuspenders === UNKNOWN_SUSPENDERS_NONE ) { + if (inspectedElement.isSuspended) { + // If we're still suspended show a place holder until the data loads. + // We don't know what we're suspended by until it has loaded. + return ( + <div> + <div className={styles.HeaderRow}> + <div className={styles.Header}>suspended...</div> + </div> + </div> + ); + } return null; }
facebook/react,c825f030679c41b55faf448648cee4e41dff3787,Sebastian Markbåge,2025-10-02 19:18:41,"[DevTools] Hide State and Props in the Sidebar for Suspense (#34630)  We're showing too much noise in the side-panel when selecting a Suspense boundary. The interesting thing to see directly is the ""Suspended by"".  The ""props"" are mostly useless because the `""name""` prop is already in the tree. I'm now also showing it in the title bar of the selected element panel. The ""children"" and ""fallback"" props are just the thing that you can see in the tree view anyway.  The ""state"" is this weird section with just one field in it  which we already have duplicated in the top toolbar as well. We can just delete this. I make sure to show the icon and a ""suspended..."" section while the boundary is still loading but now yet resuspended by force suspending.  While still loading:  <img width=""600"" height=""193"" alt=""Screenshot 2025-09-27 at 11 54 37 PM"" src=""https://github.com/user-attachments/assets/1c3f3a96-46e0-4b11-806f-032569c7d5b5"" />  After loading:  <img width=""602"" height=""266"" alt=""Screenshot 2025-09-27 at 11 54 53 PM"" src=""https://github.com/user-attachments/assets/c43cc4cb-036f-4ced-9b0d-226c6320cd76"" />  Resuspended after loading:  <img width=""602"" height=""300"" alt=""Screenshot 2025-09-27 at 11 55 07 PM"" src=""https://github.com/user-attachments/assets/0be01735-48a7-47dc-b5cf-e72ec71e0148"" />",packages/react-devtools-shared/src/devtools/views/Components/InspectedElementSuspenseToggle.js,0,72,72,-/** - * Copyright (c) Meta Platforms Inc. and affiliates. - * - * This source code is licensed under the MIT license found in the - * LICENSE file in the root directory of this source tree. - * - * @flow - */ - -import * as React from 'react'; -import {OptionsContext} from '../context'; -import EditableValue from './EditableValue'; -import Store from '../../store'; -import {ElementTypeSuspense} from 'react-devtools-shared/src/frontend/types'; -import styles from './InspectedElementSharedStyles.css'; - -import type {InspectedElement} from 'react-devtools-shared/src/frontend/types'; -import type {FrontendBridge} from 'react-devtools-shared/src/bridge'; - -type Props = { - bridge: FrontendBridge - inspectedElement: InspectedElement - store: Store -}; - -export default function InspectedElementSuspenseToggle({ - bridge - inspectedElement - store -}: Props): React.Node { - const {readOnly} = React.useContext(OptionsContext); - - const {id isSuspended type} = inspectedElement; - const canToggleSuspense = !readOnly && inspectedElement.canToggleSuspense; - - if (type !== ElementTypeSuspense) { - return null; - } - - const toggleSuspense = (path: any value: boolean) => { - const rendererID = store.getRendererIDForElement(id); - if (rendererID !== null) { - bridge.send('overrideSuspense' { - id - rendererID - forceFallback: value - }); - } - }; - - return ( - <div> - <div className={styles.HeaderRow}> - <div className={styles.Header}>suspense</div> - </div> - <div className={styles.ToggleSuspenseRow}> - <span className={styles.Name}>Suspended</span> - {canToggleSuspense ? ( - // key is required to keep <EditableValue> and header row toggle button in sync - <EditableValue - key={isSuspended} - overrideValue={toggleSuspense} - path={['suspense' 'Suspended']} - value={isSuspended} - /> - ) : ( - <span className={styles.Value}>{isSuspended ? 'true' : 'false'}</span> - )} - </div> - </div> - ); -}
facebook/react,c825f030679c41b55faf448648cee4e41dff3787,Sebastian Markbåge,2025-10-02 19:18:41,"[DevTools] Hide State and Props in the Sidebar for Suspense (#34630)  We're showing too much noise in the side-panel when selecting a Suspense boundary. The interesting thing to see directly is the ""Suspended by"".  The ""props"" are mostly useless because the `""name""` prop is already in the tree. I'm now also showing it in the title bar of the selected element panel. The ""children"" and ""fallback"" props are just the thing that you can see in the tree view anyway.  The ""state"" is this weird section with just one field in it  which we already have duplicated in the top toolbar as well. We can just delete this. I make sure to show the icon and a ""suspended..."" section while the boundary is still loading but now yet resuspended by force suspending.  While still loading:  <img width=""600"" height=""193"" alt=""Screenshot 2025-09-27 at 11 54 37 PM"" src=""https://github.com/user-attachments/assets/1c3f3a96-46e0-4b11-806f-032569c7d5b5"" />  After loading:  <img width=""602"" height=""266"" alt=""Screenshot 2025-09-27 at 11 54 53 PM"" src=""https://github.com/user-attachments/assets/c43cc4cb-036f-4ced-9b0d-226c6320cd76"" />  Resuspended after loading:  <img width=""602"" height=""300"" alt=""Screenshot 2025-09-27 at 11 55 07 PM"" src=""https://github.com/user-attachments/assets/0be01735-48a7-47dc-b5cf-e72ec71e0148"" />",packages/react-devtools-shared/src/devtools/views/Components/InspectedElementView.js,0,9,9,import InspectedElementHooksTree from './InspectedElementHooksTree'; import InspectedElementPropsTree from './InspectedElementPropsTree'; import InspectedElementStateTree from './InspectedElementStateTree'; import InspectedElementStyleXPlugin from './InspectedElementStyleXPlugin'; -import InspectedElementSuspenseToggle from './InspectedElementSuspenseToggle'; import InspectedElementSuspendedBy from './InspectedElementSuspendedBy'; import NativeStyleEditor from './NativeStyleEditor'; import {enableStyleXFeatures} from 'react-devtools-feature-flags'; export default function InspectedElementView({ /> </div> - <div className={styles.InspectedElementSection}> - <InspectedElementSuspenseToggle - bridge={bridge} - inspectedElement={inspectedElement} - store={store} - /> - </div> - <div className={styles.InspectedElementSection}> <InspectedElementStateTree bridge={bridge}
facebook/react,2e68dc76a41165d16b35d6eb2e7bf13aafed9aef,Sebastian Markbåge,2025-10-02 18:37:03,"[DevTools] Give a distinct color to the root (#34690)  Stacked on #34654.  The root is special since it represents ""Initial Paint"" (or a ""Transition"" when an Activity is selected). This gives it a different color in the timeline as well as gives it an outline that's clickable. Hovering the timeline now shows ""Initial Paint"" or ""Suspense"".  Also made the cursor a pointer to invite you to try to click things and some rounded corners.  <img width=""1219"" height=""420"" alt=""Screenshot 2025-10-02 at 1 26 38 PM"" src=""https://github.com/user-attachments/assets/12451f93-8917-4f3b-8f01-930129e5fc13"" />  <img width=""1217"" height=""419"" alt=""Screenshot 2025-10-02 at 1 26 54 PM"" src=""https://github.com/user-attachments/assets/02b5e94c-3fbe-488d-b0f2-225b73578608"" />  <img width=""1215"" height=""419"" alt=""Screenshot 2025-10-02 at 1 27 24 PM"" src=""https://github.com/user-attachments/assets/c24e8861-e74a-4ccc-8643-ee9d04bef43c"" />  <img width=""1216"" height=""419"" alt=""Screenshot 2025-10-02 at 1 27 10 PM"" src=""https://github.com/user-attachments/assets/d5cc2b62-fa64-41bf-b485-116b1cd67467"" />",packages/react-devtools-shared/src/devtools/views/SuspenseTab/SuspenseRects.css,10,1,11,.SuspenseRectsContainer { padding: .25rem; + cursor: pointer; + outline: 1px solid var(--color-component-name); + border-radius: 0.25rem; +} + +.SuspenseRectsContainer[data-highlighted='true'] { + background: var(--color-dimmest); } .SuspenseRectsViewBox { pointer-events: all; outline-style: solid; outline-width: 1px; + border-radius: 0.125rem; + cursor: pointer; } .SuspenseRectsScaledRect { /* highlight this boundary */ .SuspenseRectsBoundary:hover:not(:has(.SuspenseRectsBoundary:hover)) > .SuspenseRectsRect .SuspenseRectsBoundary[data-highlighted='true'] > .SuspenseRectsRect { - background-color: var(--color-background-hover); + background-color: var(--color-background-hover); } .SuspenseRectsRect[data-highlighted='true'] {
facebook/react,2e68dc76a41165d16b35d6eb2e7bf13aafed9aef,Sebastian Markbåge,2025-10-02 18:37:03,"[DevTools] Give a distinct color to the root (#34690)  Stacked on #34654.  The root is special since it represents ""Initial Paint"" (or a ""Transition"" when an Activity is selected). This gives it a different color in the timeline as well as gives it an outline that's clickable. Hovering the timeline now shows ""Initial Paint"" or ""Suspense"".  Also made the cursor a pointer to invite you to try to click things and some rounded corners.  <img width=""1219"" height=""420"" alt=""Screenshot 2025-10-02 at 1 26 38 PM"" src=""https://github.com/user-attachments/assets/12451f93-8917-4f3b-8f01-930129e5fc13"" />  <img width=""1217"" height=""419"" alt=""Screenshot 2025-10-02 at 1 26 54 PM"" src=""https://github.com/user-attachments/assets/02b5e94c-3fbe-488d-b0f2-225b73578608"" />  <img width=""1215"" height=""419"" alt=""Screenshot 2025-10-02 at 1 27 24 PM"" src=""https://github.com/user-attachments/assets/c24e8861-e74a-4ccc-8643-ee9d04bef43c"" />  <img width=""1216"" height=""419"" alt=""Screenshot 2025-10-02 at 1 27 10 PM"" src=""https://github.com/user-attachments/assets/d5cc2b62-fa64-41bf-b485-116b1cd67467"" />",packages/react-devtools-shared/src/devtools/views/SuspenseTab/SuspenseRects.js,7,1,8,const ViewBox = createContext<Rect>((null: any)); function SuspenseRectsContainer(): React$Node { const store = useContext(StoreContext); + const {inspectedElementID} = useContext(TreeStateContext); const treeDispatch = useContext(TreeDispatcherContext); const suspenseTreeDispatch = useContext(SuspenseTreeDispatcherContext); // TODO: This relies on a full re-render of all children when the Suspense tree changes. function SuspenseRectsContainer(): React$Node { }); } + const isRootSelected = roots.includes(inspectedElementID); + return ( - <div className={styles.SuspenseRectsContainer} onClick={handleClick}> + <div + className={styles.SuspenseRectsContainer} + onClick={handleClick} + data-highlighted={isRootSelected}> <ViewBox.Provider value={boundingBox}> <div className={styles.SuspenseRectsViewBox}
facebook/react,2e68dc76a41165d16b35d6eb2e7bf13aafed9aef,Sebastian Markbåge,2025-10-02 18:37:03,"[DevTools] Give a distinct color to the root (#34690)  Stacked on #34654.  The root is special since it represents ""Initial Paint"" (or a ""Transition"" when an Activity is selected). This gives it a different color in the timeline as well as gives it an outline that's clickable. Hovering the timeline now shows ""Initial Paint"" or ""Suspense"".  Also made the cursor a pointer to invite you to try to click things and some rounded corners.  <img width=""1219"" height=""420"" alt=""Screenshot 2025-10-02 at 1 26 38 PM"" src=""https://github.com/user-attachments/assets/12451f93-8917-4f3b-8f01-930129e5fc13"" />  <img width=""1217"" height=""419"" alt=""Screenshot 2025-10-02 at 1 26 54 PM"" src=""https://github.com/user-attachments/assets/02b5e94c-3fbe-488d-b0f2-225b73578608"" />  <img width=""1215"" height=""419"" alt=""Screenshot 2025-10-02 at 1 27 24 PM"" src=""https://github.com/user-attachments/assets/c24e8861-e74a-4ccc-8643-ee9d04bef43c"" />  <img width=""1216"" height=""419"" alt=""Screenshot 2025-10-02 at 1 27 10 PM"" src=""https://github.com/user-attachments/assets/d5cc2b62-fa64-41bf-b485-116b1cd67467"" />",packages/react-devtools-shared/src/devtools/views/SuspenseTab/SuspenseScrubber.css,6,4,10,padding-right: 0; } -.SuspenseScrubberBead .SuspenseScrubberBeadSelected { +.SuspenseScrubberBead { flex: 1; height: 0.5rem; background: var(--color-background-selected); background: var(--color-background-selected); } +.SuspenseScrubberBeadTransition { + background: var(--color-component-name); +} + .SuspenseScrubberStepHighlight > .SuspenseScrubberBead -.SuspenseScrubberStepHighlight > .SuspenseScrubberBeadSelected -.SuspenseScrubberStep:hover > .SuspenseScrubberBead -.SuspenseScrubberStep:hover > .SuspenseScrubberBeadSelected { +.SuspenseScrubberStep:hover > .SuspenseScrubberBead { height: 0.75rem; }
facebook/react,2e68dc76a41165d16b35d6eb2e7bf13aafed9aef,Sebastian Markbåge,2025-10-02 18:37:03,"[DevTools] Give a distinct color to the root (#34690)  Stacked on #34654.  The root is special since it represents ""Initial Paint"" (or a ""Transition"" when an Activity is selected). This gives it a different color in the timeline as well as gives it an outline that's clickable. Hovering the timeline now shows ""Initial Paint"" or ""Suspense"".  Also made the cursor a pointer to invite you to try to click things and some rounded corners.  <img width=""1219"" height=""420"" alt=""Screenshot 2025-10-02 at 1 26 38 PM"" src=""https://github.com/user-attachments/assets/12451f93-8917-4f3b-8f01-930129e5fc13"" />  <img width=""1217"" height=""419"" alt=""Screenshot 2025-10-02 at 1 26 54 PM"" src=""https://github.com/user-attachments/assets/02b5e94c-3fbe-488d-b0f2-225b73578608"" />  <img width=""1215"" height=""419"" alt=""Screenshot 2025-10-02 at 1 27 24 PM"" src=""https://github.com/user-attachments/assets/c24e8861-e74a-4ccc-8643-ee9d04bef43c"" />  <img width=""1216"" height=""419"" alt=""Screenshot 2025-10-02 at 1 27 10 PM"" src=""https://github.com/user-attachments/assets/d5cc2b62-fa64-41bf-b485-116b1cd67467"" />",packages/react-devtools-shared/src/devtools/views/SuspenseTab/SuspenseScrubber.js,30,14,44,import {useRef} from 'react'; import styles from './SuspenseScrubber.css'; +import Tooltip from '../Components/reach-ui/tooltip'; + export default function SuspenseScrubber({ min max export default function SuspenseScrubber({ const steps = []; for (let index = min; index <= max; index++) { steps.push( - <div + <Tooltip key={index} - className={ - styles.SuspenseScrubberStep + - (highlight === index - ? ' ' + styles.SuspenseScrubberStepHighlight - : '') - } - onPointerDown={handlePress.bind(null index)} - onMouseEnter={onHoverSegment.bind(null index)}> + label={ + index === min + ? // The first step in the timeline is always a Transition (Initial Paint). + // TODO: Support multiple environments. + 'Initial Paint' + : // TODO: Consider adding the name of this specific boundary if this step has only one. + 'Suspense' + }> <div className={ - index <= value - ? styles.SuspenseScrubberBeadSelected - : styles.SuspenseScrubberBead + styles.SuspenseScrubberStep + + (highlight === index + ? ' ' + styles.SuspenseScrubberStepHighlight + : '') } - /> - </div> + onPointerDown={handlePress.bind(null index)} + onMouseEnter={onHoverSegment.bind(null index)}> + <div + className={ + styles.SuspenseScrubberBead + + (index === min + ? // The first step in the timeline is always a Transition (Initial Paint). + // TODO: Support multiple environments. + ' ' + styles.SuspenseScrubberBeadTransition + : '') + + (index <= value ? ' ' + styles.SuspenseScrubberBeadSelected : '') + } + /> + </div> + </Tooltip> ); }
facebook/react,ced705d7566a2f7f2a2f0e904d91fe1d1d97f808,Sebastian Markbåge,2025-10-02 18:20:02,[DevTools] Always include the root in the timeline and select it by default (#34654)  Rebased on #34454.  Always include the root in the timeline even if it has no unique suspenders  since even if it won't suspend  we have to be able to see that and step to one step before the next boundary to see the first boundary that does suspend in its fallback state.  Also  if there's no current selection on initial mount  select the last entry in the timeline. We usually do this with `selectedSuspenseID` but that doesn't happen on initial load. So this does it on initial load if nothing else is selected by then. That way when you reload you get the initial root selected.  There's a problem here because we should really use one source of truth and `selectedSuspenseID` doesn't really do anything now. Either it should be its separate source of truth and you can't show components in the side-panel or it should be derived from the other state.  If it's derived  once there's a selection  e.g. in the root  then even if new timelines load it will never change but that's probably a good thing.,packages/react-devtools-shared/src/devtools/views/SuspenseTab/SuspenseTab.js,16,0,16,import { SuspenseTreeStateContext } from './SuspenseTreeContext'; import {StoreContext OptionsContext} from '../context'; +import { + TreeDispatcherContext + TreeStateContext +} from '../Components/TreeContext'; import Button from '../Button'; import Toggle from '../Toggle'; import typeof {SyntheticPointerEvent} from 'react-dom-bindings/src/events/SyntheticEvent'; function SuspenseTab(_: {}) { treeListHorizontalFraction } = state; + const {inspectedElementID} = useContext(TreeStateContext); + const {timeline} = useContext(SuspenseTreeStateContext); + const treeDispatch = useContext(TreeDispatcherContext); + useLayoutEffect(() => { + // If the inspected element is still null and we've loaded a timeline we can set the initial selection. + // TODO: This tab should use its own source of truth instead so we only show suspense boundaries. + if (inspectedElementID === null && timeline.length > 0) { + const milestone = timeline[timeline.length - 1]; + treeDispatch({type: 'SELECT_ELEMENT_BY_ID' payload: milestone}); + } + } [timeline inspectedElementID]); + useLayoutEffect(() => { const wrapperElement = wrapperTreeRef.current;
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/HIR/Environment.ts,1,1,2,export const EnvironmentConfigSchema = z.object({ * that if a useEffect or useCallback references a function value that function value will be * considered frozen and in turn all of its referenced variables will be considered frozen as well. */ - enablePreserveExistingMemoizationGuarantees: z.boolean().default(false) + enablePreserveExistingMemoizationGuarantees: z.boolean().default(true) /** * Validates that all useMemo/useCallback values are also memoized by Forget. This mode can be
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allocating-primitive-as-dep.expect.md,3,1,4,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false // bar(props.b) is an allocating expression that produces a primitive which means // that Forget should memoize it. // Correctness: function AllocatingPrimitiveAsDep(props) { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; // bar(props.b) is an allocating expression that produces a primitive which means +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false +// bar(props.b) is an allocating expression that produces a primitive which means // that Forget should memoize it. // Correctness: // - y depends on either bar(props.b) or bar(props.b) + 1"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allocating-primitive-as-dep.js,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false // bar(props.b) is an allocating expression that produces a primitive which means // that Forget should memoize it. // Correctness:
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-modify-global-in-callback-jsx.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; const someGlobal = {value: 0}; export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import { useMemo } from ""react""; const someGlobal = { value: 0 };"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/allow-modify-global-in-callback-jsx.js,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; const someGlobal = {value: 0};
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/computed-load-primitive-as-dependency.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false function Component(props) { let a = foo(); // freeze `a` so we know the next line cannot mutate it function Component(props) { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false function Component(props) { const $ = _c(2); const a = foo();"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/computed-load-primitive-as-dependency.js,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false function Component(props) { let a = foo(); // freeze `a` so we know the next line cannot mutate it
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/constant-propagation-template-literal.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import {Stringify identity} from 'shared-runtime'; function foo() { export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import { Stringify identity } from ""shared-runtime""; function foo() {"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/constant-propagation-template-literal.js,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import {Stringify identity} from 'shared-runtime'; function foo() {
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/context-variable-as-jsx-element-tag.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {Stringify} from 'shared-runtime'; export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import { useMemo } from ""react""; import { Stringify } from ""shared-runtime"";"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/context-variable-as-jsx-element-tag.js,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {Stringify} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/destructure-direct-reassignment.expect.md,2,0,2,## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false function foo(props) { let x y; ({x y} = {x: props.a y: props.b}); export const FIXTURE_ENTRYPOINT = { ## Code ```javascript +// @enablePreserveExistingMemoizationGuarantees:false function foo(props) { let x; let y;
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/destructure-direct-reassignment.js,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false function foo(props) { let x y; ({x y} = {x: props.a y: props.b});
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-uncalled-function-capturing-mutable-values-memoizes-with-captures-values.expect.md,1,1,2,## Input ```javascript -// @flow @enableNewMutationAliasingModel +// @flow @enableNewMutationAliasingModel @enablePreserveExistingMemoizationGuarantees:false /** * This hook returns a function that when called with an input object * will return the result of mapping that input with the supplied map
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-uncalled-function-capturing-mutable-values-memoizes-with-captures-values.js,1,1,2,-// @flow @enableNewMutationAliasingModel +// @flow @enableNewMutationAliasingModel @enablePreserveExistingMemoizationGuarantees:false /** * This hook returns a function that when called with an input object * will return the result of mapping that input with the supplied map
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.repro-preserve-memoization-inner-destructured-value-mistaken-as-dependency-later-mutation.expect.md,1,1,2,## Input ```javascript -// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false /** * Repro from https://github.com/facebook/react/issues/34262
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.repro-preserve-memoization-inner-destructured-value-mistaken-as-dependency-later-mutation.js,1,1,2,-// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false /** * Repro from https://github.com/facebook/react/issues/34262
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.repro-preserve-memoization-inner-destructured-value-mistaken-as-dependency-mutated-dep.expect.md,1,1,2,## Input ```javascript -// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {identity Stringify useHook} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.repro-preserve-memoization-inner-destructured-value-mistaken-as-dependency-mutated-dep.js,1,1,2,-// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {identity Stringify useHook} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missed-memoization-from-capture-in-invoked-function-inferred-as-mutation.expect.md,1,1,2,## Input ```javascript -// @flow @validatePreserveExistingMemoizationGuarantees +// @flow @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {logValue useFragment useHook typedLog} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missed-memoization-from-capture-in-invoked-function-inferred-as-mutation.js,1,1,2,-// @flow @validatePreserveExistingMemoizationGuarantees +// @flow @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {logValue useFragment useHook typedLog} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missed-memoization-from-inferred-mutation-in-logger.expect.md,1,1,2,## Input ```javascript -// @flow @validatePreserveExistingMemoizationGuarantees +// @flow @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useFragment} from 'react-relay'; import LogEvent from 'LogEvent'; import {useCallback useMemo} from 'react';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-missed-memoization-from-inferred-mutation-in-logger.js,1,1,2,-// @flow @validatePreserveExistingMemoizationGuarantees +// @flow @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useFragment} from 'react-relay'; import LogEvent from 'LogEvent'; import {useCallback useMemo} from 'react';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-unmemoized-callback-captured-in-context-variable.expect.md,1,1,2,## Input ```javascript -// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {ValidateMemoization useHook} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-repro-unmemoized-callback-captured-in-context-variable.tsx,1,1,2,-// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {ValidateMemoization useHook} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-object-entries-mutation.expect.md,1,1,2,## Input ```javascript -// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {makeObject_Primitives Stringify} from 'shared-runtime'; function Component(props) {
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-object-entries-mutation.js,1,1,2,-// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {makeObject_Primitives Stringify} from 'shared-runtime'; function Component(props) {
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-object-values-mutation.expect.md,1,1,2,## Input ```javascript -// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {makeObject_Primitives Stringify} from 'shared-runtime'; function Component(props) {
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.validate-object-values-mutation.js,1,1,2,-// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {makeObject_Primitives Stringify} from 'shared-runtime'; function Component(props) {
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/existing-variables-with-c-name.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import {useMemo useState} from 'react'; import {ValidateMemoization} from 'shared-runtime'; export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c2 } from ""react/compiler-runtime""; +import { c as _c2 } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import { useMemo useState } from ""react""; import { ValidateMemoization } from ""shared-runtime"";"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/existing-variables-with-c-name.js,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import {useMemo useState} from 'react'; import {ValidateMemoization} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/bug-fbt-plural-multiple-function-calls.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import fbt from 'fbt'; /** export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import fbt from ""fbt""; /**"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/fbt/bug-fbt-plural-multiple-function-calls.ts,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import fbt from 'fbt'; /**
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/for-in-statement-type-inference.expect.md,2,0,2,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false const {identity mutate} = require('shared-runtime'); function Component(props) { export const FIXTURE_ENTRYPOINT = { ## Code ```javascript +// @enablePreserveExistingMemoizationGuarantees:false const { identity mutate } = require(""shared-runtime""); function Component(props) {"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/for-in-statement-type-inference.js,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false const {identity mutate} = require('shared-runtime'); function Component(props) {
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hooks-with-prefix.expect.md,2,2,4,"## Input ```javascript -// @hookPattern:"".*\b(use[^$]+)$"" +// @hookPattern:"".*\b(use[^$]+)$"" @enablePreserveExistingMemoizationGuarantees:false import * as React from 'react'; import {makeArray useHook} from 'shared-runtime'; export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; // @hookPattern:"".*\b(use[^$]+)$"" +import { c as _c } from ""react/compiler-runtime""; // @hookPattern:"".*\b(use[^$]+)$"" @enablePreserveExistingMemoizationGuarantees:false import * as React from ""react""; import { makeArray useHook } from ""shared-runtime"";"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/hooks-with-prefix.js,1,1,2,"-// @hookPattern:"".*\b(use[^$]+)$"" +// @hookPattern:"".*\b(use[^$]+)$"" @enablePreserveExistingMemoizationGuarantees:false import * as React from 'react'; import {makeArray useHook} from 'shared-runtime';"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-computed-delete.expect.md,2,2,4,## Input ```javascript -// @debug +// @debug @enablePreserveExistingMemoizationGuarantees:false function Component(props) { const x = makeObject(); const y = delete x[props.value]; function Component(props) { ## Code ```javascript -// @debug +// @debug @enablePreserveExistingMemoizationGuarantees:false function Component(props) { const x = makeObject(); const y = delete x[props.value];
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-computed-delete.js,1,1,2,-// @debug +// @debug @enablePreserveExistingMemoizationGuarantees:false function Component(props) { const x = makeObject(); const y = delete x[props.value];
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-property-delete.expect.md,2,0,2,## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false function Component(props) { const x = makeObject(); const y = delete x.value; function Component(props) { ## Code ```javascript +// @enablePreserveExistingMemoizationGuarantees:false function Component(props) { const x = makeObject(); const y = delete x.value;
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/infer-property-delete.js,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false function Component(props) { const x = makeObject(); const y = delete x.value;
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-useCallback-captures-reassigned-context.expect.md,1,1,2,## Input ```javascript -// @validatePreserveExistingMemoizationGuarantees @enableNewMutationAliasingModel +// @validatePreserveExistingMemoizationGuarantees @enableNewMutationAliasingModel @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; import {makeArray} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/error.invalid-useCallback-captures-reassigned-context.js,1,1,2,-// @validatePreserveExistingMemoizationGuarantees @enableNewMutationAliasingModel +// @validatePreserveExistingMemoizationGuarantees @enableNewMutationAliasingModel @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; import {makeArray} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-through-identity-function-expression.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {identity ValidateMemoization} from 'shared-runtime'; export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import { useMemo } from ""react""; import { identity ValidateMemoization } from ""shared-runtime"";"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-through-identity-function-expression.js,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {identity ValidateMemoization} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-through-identity.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {identity ValidateMemoization} from 'shared-runtime'; export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import { useMemo } from ""react""; import { identity ValidateMemoization } from ""shared-runtime"";"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/mutate-through-identity.js,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {identity ValidateMemoization} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/todo-control-flow-sensitive-mutation.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import { mutate export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import { useMemo } from ""react""; import { mutate"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/todo-control-flow-sensitive-mutation.tsx,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import { mutate
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/todo-transitivity-createfrom-capture-lambda.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import { typedCapture export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import { useMemo } from ""react""; import { typedCapture"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/todo-transitivity-createfrom-capture-lambda.tsx,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import { typedCapture
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-add-captured-array-to-itself.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import { typedCapture export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import { useMemo } from ""react""; import { typedCapture"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-add-captured-array-to-itself.tsx,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import { typedCapture
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-capture-createfrom-lambda.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import { typedCapture export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import { useMemo } from ""react""; import { typedCapture"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-capture-createfrom-lambda.tsx,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import { typedCapture
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-capture-createfrom.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import { typedCapture export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import { useMemo } from ""react""; import { typedCapture"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-capture-createfrom.tsx,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import { typedCapture
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-phi-assign-or-capture.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import { typedCapture export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import { useMemo } from ""react""; import { typedCapture"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/transitivity-phi-assign-or-capture.tsx,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import { typedCapture
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useCallback-reordering-deplist-controlflow.expect.md,2,2,4,"## Input ```javascript -// @enableNewMutationAliasingModel +// @enableNewMutationAliasingModel @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; import {Stringify} from 'shared-runtime'; export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; // @enableNewMutationAliasingModel +import { c as _c } from ""react/compiler-runtime""; // @enableNewMutationAliasingModel @enablePreserveExistingMemoizationGuarantees:false import { useCallback } from ""react""; import { Stringify } from ""shared-runtime"";"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useCallback-reordering-deplist-controlflow.tsx,1,1,2,-// @enableNewMutationAliasingModel +// @enableNewMutationAliasingModel @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; import {Stringify} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useCallback-reordering-depslist-assignment.expect.md,2,2,4,"## Input ```javascript -// @enableNewMutationAliasingModel +// @enableNewMutationAliasingModel @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; import {Stringify} from 'shared-runtime'; export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; // @enableNewMutationAliasingModel +import { c as _c } from ""react/compiler-runtime""; // @enableNewMutationAliasingModel @enablePreserveExistingMemoizationGuarantees:false import { useCallback } from ""react""; import { Stringify } from ""shared-runtime"";"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useCallback-reordering-depslist-assignment.tsx,1,1,2,-// @enableNewMutationAliasingModel +// @enableNewMutationAliasingModel @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; import {Stringify} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useMemo-reordering-depslist-assignment.expect.md,2,2,4,"## Input ```javascript -// @enableNewMutationAliasingModel +// @enableNewMutationAliasingModel @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; function useFoo(arr1 arr2) { export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; // @enableNewMutationAliasingModel +import { c as _c } from ""react/compiler-runtime""; // @enableNewMutationAliasingModel @enablePreserveExistingMemoizationGuarantees:false import { useMemo } from ""react""; function useFoo(arr1 arr2) {"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/new-mutability/useMemo-reordering-depslist-assignment.ts,1,1,2,-// @enableNewMutationAliasingModel +// @enableNewMutationAliasingModel @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; function useFoo(arr1 arr2) {
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useMemo-infer-mutate-deps.expect.md,1,1,2,## Input ```javascript -// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {identity} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.false-positive-useMemo-infer-mutate-deps.ts,1,1,2,-// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {identity} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.hoist-useCallback-conditional-access-own-scope.expect.md,1,1,2,## Input ```javascript -// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; function Component({propA propB}) {
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.hoist-useCallback-conditional-access-own-scope.ts,1,1,2,-// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; function Component({propA propB}) {
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.hoist-useCallback-infer-conditional-value-block.expect.md,1,1,2,## Input ```javascript -// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; import {identity mutate} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.hoist-useCallback-infer-conditional-value-block.ts,1,1,2,-// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; import {identity mutate} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.invalid-useCallback-captures-reassigned-context.expect.md,1,1,2,## Input ```javascript -// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; import {makeArray} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.invalid-useCallback-captures-reassigned-context.ts,1,1,2,-// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; import {makeArray} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-conditional-access-noAlloc.expect.md,1,1,2,## Input ```javascript -// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; function Component({propA propB}) {
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-conditional-access-noAlloc.ts,1,1,2,-// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; function Component({propA propB}) {
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-infer-less-specific-conditional-access.expect.md,1,1,2,## Input ```javascript -// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; import {mutate} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useCallback-infer-less-specific-conditional-access.ts,1,1,2,-// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; import {mutate} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-infer-less-specific-conditional-access.expect.md,1,1,2,## Input ```javascript -// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {mutate} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-infer-less-specific-conditional-access.ts,1,1,2,-// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {mutate} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-infer-less-specific-conditional-value-block.expect.md,1,1,2,## Input ```javascript -// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {identity mutate} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/error.useMemo-infer-less-specific-conditional-value-block.ts,1,1,2,-// @validatePreserveExistingMemoizationGuarantees +// @validatePreserveExistingMemoizationGuarantees @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {identity mutate} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-reordering-deplist-controlflow.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; import {Stringify} from 'shared-runtime'; export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import { useCallback } from ""react""; import { Stringify } from ""shared-runtime"";"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-reordering-deplist-controlflow.tsx,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; import {Stringify} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-reordering-depslist-assignment.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; import {Stringify} from 'shared-runtime'; export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import { useCallback } from ""react""; import { Stringify } from ""shared-runtime"";"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useCallback-reordering-depslist-assignment.tsx,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import {useCallback} from 'react'; import {Stringify} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-reordering-depslist-assignment.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; function useFoo(arr1 arr2) { export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import { useMemo } from ""react""; function useFoo(arr1 arr2) {"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-reordering-depslist-assignment.ts,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; function useFoo(arr1 arr2) {
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-reordering-depslist-controlflow.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {Stringify} from 'shared-runtime'; export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import { useMemo } from ""react""; import { Stringify } from ""shared-runtime"";"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-validation/useMemo-reordering-depslist-controlflow.tsx,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {Stringify} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-no-declarations-in-reactive-scope-with-early-return.expect.md,2,2,4,"## Input ```javascript -// @enableAssumeHooksFollowRulesOfReact @enableTransitivelyFreezeFunctionExpressions +// @enableAssumeHooksFollowRulesOfReact @enableTransitivelyFreezeFunctionExpressions @enablePreserveExistingMemoizationGuarantees:false function Component() { const items = useItems(); const filteredItems = useMemo( function Component() { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; // @enableAssumeHooksFollowRulesOfReact @enableTransitivelyFreezeFunctionExpressions +import { c as _c } from ""react/compiler-runtime""; // @enableAssumeHooksFollowRulesOfReact @enableTransitivelyFreezeFunctionExpressions @enablePreserveExistingMemoizationGuarantees:false function Component() { const $ = _c(6); const items = useItems();"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-no-declarations-in-reactive-scope-with-early-return.js,1,1,2,-// @enableAssumeHooksFollowRulesOfReact @enableTransitivelyFreezeFunctionExpressions +// @enableAssumeHooksFollowRulesOfReact @enableTransitivelyFreezeFunctionExpressions @enablePreserveExistingMemoizationGuarantees:false function Component() { const items = useItems(); const filteredItems = useMemo(
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-renaming-conflicting-decls.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import {Stringify identity makeArray toJSON} from 'shared-runtime'; import {useMemo} from 'react'; export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import { Stringify identity makeArray toJSON } from ""shared-runtime""; import { useMemo } from ""react"";"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/repro-renaming-conflicting-decls.js,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import {Stringify identity makeArray toJSON} from 'shared-runtime'; import {useMemo} from 'react';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ts-non-null-expression-default-value.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false const THEME_MAP: ReadonlyMap<string string> = new Map([ ['default' 'light'] ['dark' 'dark'] export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false const THEME_MAP: ReadonlyMap<string string> = new Map([ [""default"" ""light""] [""dark"" ""dark""]"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/ts-non-null-expression-default-value.tsx,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false const THEME_MAP: ReadonlyMap<string string> = new Map([ ['default' 'light'] ['dark' 'dark']
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/unary-expr.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false function component(a) { let t = {t: a}; let z = +t.t; export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false function component(a) { const $ = _c(8); const t = { t: a };"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/unary-expr.js,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false function component(a) { let t = {t: a}; let z = +t.t;
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-named-function.expect.md,2,2,4,"## Input ```javascript -// @validateNoSetStateInRender:false +// @validateNoSetStateInRender:false @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {makeArray} from 'shared-runtime'; export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; // @validateNoSetStateInRender:false +import { c as _c } from ""react/compiler-runtime""; // @validateNoSetStateInRender:false @enablePreserveExistingMemoizationGuarantees:false import { useMemo } from ""react""; import { makeArray } from ""shared-runtime"";"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-named-function.ts,1,1,2,-// @validateNoSetStateInRender:false +// @validateNoSetStateInRender:false @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; import {makeArray} from 'shared-runtime';
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-with-optional.expect.md,2,1,3,"## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; function Component(props) { return ( export const FIXTURE_ENTRYPOINT = { ## Code ```javascript -import { c as _c } from ""react/compiler-runtime""; +import { c as _c } from ""react/compiler-runtime""; // @enablePreserveExistingMemoizationGuarantees:false import { useMemo } from ""react""; function Component(props) { const $ = _c(2);"
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useMemo-with-optional.js,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false import {useMemo} from 'react'; function Component(props) { return (
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/while-with-assignment-in-test.expect.md,2,0,2,## Input ```javascript +// @enablePreserveExistingMemoizationGuarantees:false function Component() { const queue = [1 2 3]; let value = 0; export const FIXTURE_ENTRYPOINT = { ## Code ```javascript +// @enablePreserveExistingMemoizationGuarantees:false function Component() { const queue = [1 2 3]; let value;
facebook/react,70b52beca64aeac447a6cf57cfe1fda0691435c1,Joseph Savona,2025-10-02 17:25:00,"[compiler] `@enablePreserveExistingMemoizationGuarantees` on by default (#34689)  This enables `@enablePreserveExistingMemoizationGuarantees` by default. As of the previous PR (#34503)  this mode now enables the following behaviors:  - Treating variables referenced within a `useMemo()` or `useCallback()` as ""frozen"" (immutable) as of the start of the call. Ie  the compiler will assume that the values you reference are not mutated by the body of the useMemo  not are they mutated later. Directly modifying them (eg `var.property = true`) will be an error. - Similarly  the results of the useMemo/useCallback are treated as frozen (immutable) after the call.  These two rules match the behavior for other hooks: this means that developers will see similar behavior to swapping out `useMemo()` for a custom `useMyMemo()` wrapper/alias.  Additionally  as of #34503 the compiler uses information from the manual dependencies to know which variables are non-nullable. Even if a useMemo block conditionally accesses a nested property — `if (cond) { log(x.y.z) }` — where the compiler would not usually know that `x` is non-nullable  if the user specifies `x.y.z` as a manual dependency then the compiler knows that `x` and `x.y` are non-nullable and can infer a more precise dependency.  Finally  this mode also ensures that we always memoize function calls that return primitives. See #34343 for more details.  For now  I've explicitly opted out of this feature in all test fixtures where the behavior changed.",compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/while-with-assignment-in-test.js,1,0,1,+// @enablePreserveExistingMemoizationGuarantees:false function Component() { const queue = [1 2 3]; let value = 0;
facebook/react,4a28227960202539f329338f62d33973e76b32d8,"Sebastian ""Sebbie"" Silbermann",2025-10-02 17:18:15,[DevTools] Inspect the Initial Paint when inspecting a Root (#34454),packages/react-devtools-shared/src/__tests__/store-test.js,0,6,6,"describe('Store' () => { <Suspense name=""three"" rects={[{x:1 y:2 width:5 height:1}]}> `); - const rendererID = getRendererID(); - const rootID = store.getRootIDForElement(store.getElementIDAtIndex(0)); await actAsync(() => { agent.overrideSuspenseMilestone({ - rendererID - rootID suspendedSet: [ store.getElementIDAtIndex(4) store.getElementIDAtIndex(8) describe('Store' () => { await actAsync(() => { agent.overrideSuspenseMilestone({ - rendererID - rootID suspendedSet: [] }); });"
facebook/react,4a28227960202539f329338f62d33973e76b32d8,"Sebastian ""Sebbie"" Silbermann",2025-10-02 17:18:15,[DevTools] Inspect the Initial Paint when inspecting a Root (#34454),packages/react-devtools-shared/src/backend/types.js,1,4,5,export type RendererInterface = { onErrorOrWarning?: OnErrorOrWarning overrideError: (id: number forceError: boolean) => void overrideSuspense: (id: number forceFallback: boolean) => void - overrideSuspenseMilestone: ( - rootID: number - suspendedSet: Array<number> - ) => void + overrideSuspenseMilestone: (suspendedSet: Array<number>) => void overrideValueAtPath: ( type: Type id: number
facebook/react,4a28227960202539f329338f62d33973e76b32d8,"Sebastian ""Sebbie"" Silbermann",2025-10-02 17:18:15,[DevTools] Inspect the Initial Paint when inspecting a Root (#34454),packages/react-devtools-shared/src/backend/views/Highlighter/index.js,48,0,48,"import Agent from 'react-devtools-shared/src/backend/agent'; import {hideOverlay showOverlay} from './Highlighter'; +import type {HostInstance} from 'react-devtools-shared/src/backend/types'; import type {BackendBridge} from 'react-devtools-shared/src/bridge'; import type {RendererInterface} from '../../types'; export default function setupHighlighter( ): void { bridge.addListener('clearHostInstanceHighlight' clearHostInstanceHighlight); bridge.addListener('highlightHostInstance' highlightHostInstance); + bridge.addListener('highlightHostInstances' highlightHostInstances); bridge.addListener('scrollToHostInstance' scrollToHostInstance); bridge.addListener('shutdown' stopInspectingHost); bridge.addListener('startInspectingHost' startInspectingHost); export default function setupHighlighter( hideOverlay(agent); } + function highlightHostInstances({ + displayName + hideAfterTimeout + elements + scrollIntoView + }: { + displayName: string | null + hideAfterTimeout: boolean + elements: Array<{rendererID: number id: number}> + scrollIntoView: boolean + }) { + const nodes: Array<HostInstance> = []; + for (let i = 0; i < elements.length; i++) { + const {id rendererID} = elements[i]; + const renderer = agent.rendererInterfaces[rendererID]; + if (renderer == null) { + console.warn(`Invalid renderer id ""${rendererID}"" for element ""${id}""`); + continue; + } + + // In some cases fiber may already be unmounted + if (!renderer.hasElementWithId(id)) { + continue; + } + + const hostInstances = renderer.findHostInstancesForElementID(id); + if (hostInstances !== null) { + for (let j = 0; j < hostInstances.length; j++) { + nodes.push(hostInstances[j]); + } + } + } + + if (nodes.length > 0) { + const node = nodes[0]; + // $FlowFixMe[method-unbinding] + if (scrollIntoView && typeof node.scrollIntoView === 'function') { + // If the node isn't visible show it before highlighting it. + // We may want to reconsider this; it might be a little disruptive. + node.scrollIntoView({block: 'nearest' inline: 'nearest'}); + } + } + + showOverlay(nodes displayName agent hideAfterTimeout); + } + function attemptScrollToHostInstance( renderer: RendererInterface id: number"
facebook/react,4a28227960202539f329338f62d33973e76b32d8,"Sebastian ""Sebbie"" Silbermann",2025-10-02 17:18:15,[DevTools] Inspect the Initial Paint when inspecting a Root (#34454),packages/react-devtools-shared/src/backendAPI.js,27,1,28,export function inspectElement( id: number path: InspectedElementPath | null rendererID: number - shouldListenToPauseEvents: boolean = false + shouldListenToPauseEvents: boolean ): Promise<InspectedElementPayload> { const requestID = requestCounter++; const promise = getPromiseForRequestID<InspectedElementPayload>( export function inspectElement( return promise; } +export function inspectScreen( + bridge: FrontendBridge + forceFullData: boolean + arbitraryRootID: number + path: InspectedElementPath | null + shouldListenToPauseEvents: boolean +): Promise<InspectedElementPayload> { + const requestID = requestCounter++; + const promise = getPromiseForRequestID<InspectedElementPayload>( + requestID + 'inspectedScreen' + bridge + `Timed out while inspecting screen.` + shouldListenToPauseEvents + ); + + bridge.send('inspectScreen' { + requestID + id: arbitraryRootID + path + forceFullData + }); + + return promise; +} + let storeAsGlobalCount = 0; export function storeAsGlobal({
facebook/react,4a28227960202539f329338f62d33973e76b32d8,"Sebastian ""Sebbie"" Silbermann",2025-10-02 17:18:15,[DevTools] Inspect the Initial Paint when inspecting a Root (#34454),packages/react-devtools-shared/src/bridge.js,16,8,24,export const BRIDGE_PROTOCOL: Array<BridgeProtocol> = [ { version: 2 minNpmVersion: '4.22.0' - maxNpmVersion: '6.2.0' - } - // Version 3 adds supports-toggling-suspense bit to add-root - { - version: 3 - minNpmVersion: '6.2.0' maxNpmVersion: null } ]; type HighlightHostInstance = { openBuiltinElementsPanel: boolean scrollIntoView: boolean }; +type HighlightHostInstances = { + elements: Array<ElementAndRendererID> + displayName: string | null + hideAfterTimeout: boolean + scrollIntoView: boolean +}; type ScrollToHostInstance = { ...ElementAndRendererID type OverrideSuspense = { }; type OverrideSuspenseMilestone = { - rendererID: number - rootID: number suspendedSet: Array<number> }; type InspectElementParams = { requestID: number }; +type InspectScreenParams = { + requestID: number + id: number + forceFullData: boolean + path: Array<number | string> | null +}; + type StoreAsGlobalParams = { ...ElementAndRendererID count: number export type BackendEvents = { fastRefreshScheduled: [] getSavedPreferences: [] inspectedElement: [InspectedElementPayload] + inspectedScreen: [InspectedElementPayload] isReloadAndProfileSupportedByBackend: [boolean] operations: [Array<number>] ownersList: [OwnersList] type FrontendEvents = { getProfilingData: [{rendererID: RendererID}] getProfilingStatus: [] highlightHostInstance: [HighlightHostInstance] + highlightHostInstances: [HighlightHostInstances] inspectElement: [InspectElementParams] + inspectScreen: [InspectScreenParams] logElementToConsole: [ElementAndRendererID] overrideError: [OverrideError] overrideSuspense: [OverrideSuspense]
facebook/react,4a28227960202539f329338f62d33973e76b32d8,"Sebastian ""Sebbie"" Silbermann",2025-10-02 17:18:15,[DevTools] Inspect the Initial Paint when inspecting a Root (#34454),packages/react-devtools-shared/src/devtools/views/Profiler/CommitTreeBuilder.js,0,1,1,function updateTree( i++; // Profiling flag i++; // supportsStrictMode flag i++; // hasOwnerMetadata flag - i++; // supportsTogglingSuspense flag if (__DEBUG__) { debug('Add' `new root fiber ${id}`);
facebook/react,4a28227960202539f329338f62d33973e76b32d8,"Sebastian ""Sebbie"" Silbermann",2025-10-02 17:18:15,[DevTools] Inspect the Initial Paint when inspecting a Root (#34454),packages/react-devtools-shared/src/devtools/views/SuspenseTab/SuspenseBreadcrumbs.js,4,4,8,"export default function SuspenseBreadcrumbs(): React$Node { const store = useContext(StoreContext); const treeDispatch = useContext(TreeDispatcherContext); const suspenseTreeDispatch = useContext(SuspenseTreeDispatcherContext); - const {selectedSuspenseID selectedRootID lineage} = useContext( + const {selectedSuspenseID lineage roots} = useContext( SuspenseTreeStateContext ); export default function SuspenseBreadcrumbs(): React$Node { // that rendered the whole screen. In laymans terms this is really ""Initial Paint"". // TODO: Once we add subtree selection then the equivalent should be called // ""Transition"" since in that case it's really about a Transition within the page. - selectedRootID !== null ? ( + roots.length > 0 ? ( <li className={styles.SuspenseBreadcrumbsListItem} - aria-current={selectedSuspenseID === selectedRootID}> + aria-current=""true""> <button className={styles.SuspenseBreadcrumbsButton} - onClick={handleClick.bind(null selectedRootID)} + onClick={handleClick.bind(null roots[0])} type=""button""> Initial Paint </button>"
facebook/react,4a28227960202539f329338f62d33973e76b32d8,"Sebastian ""Sebbie"" Silbermann",2025-10-02 17:18:15,[DevTools] Inspect the Initial Paint when inspecting a Root (#34454),packages/react-devtools-shared/src/devtools/views/SuspenseTab/SuspenseRects.js,24,7,31,function getDocumentBoundingRect( }; } -function SuspenseRectsShell({ - rootID -}: { - rootID: SuspenseNode['id'] -}): React$Node { +function SuspenseRectsRoot({rootID}: {rootID: SuspenseNode['id']}): React$Node { const store = useContext(StoreContext); const root = store.getSuspenseByID(rootID); if (root === null) { const ViewBox = createContext<Rect>((null: any)); function SuspenseRectsContainer(): React$Node { const store = useContext(StoreContext); + const treeDispatch = useContext(TreeDispatcherContext); + const suspenseTreeDispatch = useContext(SuspenseTreeDispatcherContext); // TODO: This relies on a full re-render of all children when the Suspense tree changes. const {roots} = useContext(SuspenseTreeStateContext); function SuspenseRectsContainer(): React$Node { const width = '100%'; const aspectRatio = `1 / ${heightScale}`; + function handleClick(event: SyntheticMouseEvent) { + if (event.defaultPrevented) { + // Already clicked on an inner rect + return; + } + if (roots.length === 0) { + // Nothing to select + return; + } + const arbitraryRootID = roots[0]; + + event.preventDefault(); + treeDispatch({type: 'SELECT_ELEMENT_BY_ID' payload: arbitraryRootID}); + suspenseTreeDispatch({ + type: 'SET_SUSPENSE_LINEAGE' + payload: arbitraryRootID + }); + } + return ( - <div className={styles.SuspenseRectsContainer}> + <div className={styles.SuspenseRectsContainer} onClick={handleClick}> <ViewBox.Provider value={boundingBox}> <div className={styles.SuspenseRectsViewBox} style={{aspectRatio width}}> {roots.map(rootID => { - return <SuspenseRectsShell key={rootID} rootID={rootID} />; + return <SuspenseRectsRoot key={rootID} rootID={rootID} />; })} </div> </ViewBox.Provider>
facebook/react,4a28227960202539f329338f62d33973e76b32d8,"Sebastian ""Sebbie"" Silbermann",2025-10-02 17:18:15,[DevTools] Inspect the Initial Paint when inspecting a Root (#34454),packages/react-devtools-shared/src/devtools/views/hooks.js,34,10,44,"export function useHighlightHostInstance(): { const highlightHostInstance = useCallback( (id: number scrollIntoView?: boolean = false) => { const element = store.getElementByID(id); - const rendererID = store.getRendererIDForElement(id); - if (element !== null && rendererID !== null) { + if (element !== null) { + const isRoot = element.parentID === 0; let displayName = element.displayName; if (displayName !== null && element.nameProp !== null) { displayName += ` name=""${element.nameProp}""`; } - bridge.send('highlightHostInstance' { - displayName - hideAfterTimeout: false - id - openBuiltinElementsPanel: false - rendererID - scrollIntoView: scrollIntoView - }); + if (isRoot) { + // Inspect screen + const elements: Array<{rendererID: number id: number}> = []; + + for (let i = 0; i < store.roots.length; i++) { + const rootID = store.roots[i]; + const rendererID = store.getRendererIDForElement(rootID); + if (rendererID === null) { + continue; + } + elements.push({rendererID id: rootID}); + } + + bridge.send('highlightHostInstances' { + displayName + hideAfterTimeout: false + elements + scrollIntoView: scrollIntoView + }); + } else { + const rendererID = store.getRendererIDForElement(id); + if (rendererID !== null) { + bridge.send('highlightHostInstance' { + displayName + hideAfterTimeout: false + id + openBuiltinElementsPanel: false + rendererID + scrollIntoView: scrollIntoView + }); + } + } } } [store bridge]"
facebook/react,4a28227960202539f329338f62d33973e76b32d8,"Sebastian ""Sebbie"" Silbermann",2025-10-02 17:18:15,[DevTools] Inspect the Initial Paint when inspecting a Root (#34454),packages/react-devtools-shared/src/inspectedElementMutableSource.js,21,10,31,import { convertInspectedElementBackendToFrontend hydrateHelper inspectElement as inspectElementAPI + inspectScreen as inspectScreenAPI } from 'react-devtools-shared/src/backendAPI'; import {fillInPath} from 'react-devtools-shared/src/hydration'; export function inspectElement( rendererID: number shouldListenToPauseEvents: boolean = false ): Promise<InspectElementReturnType> { - const {id} = element; + const {id parentID} = element; // This could indicate that the DevTools UI has been closed and reopened. // The in-memory cache will be clear but the backend still thinks we have cached data. // In this case we need to tell it to resend the full data. const forceFullData = !inspectedElementCache.has(id); - - return inspectElementAPI( - bridge - forceFullData - id - path - rendererID - shouldListenToPauseEvents - ).then((data: any) => { + const isRoot = parentID === 0; + const promisedElement = isRoot + ? inspectScreenAPI( + bridge + forceFullData + id + path + shouldListenToPauseEvents + ) + : inspectElementAPI( + bridge + forceFullData + id + path + rendererID + shouldListenToPauseEvents + ); + + return promisedElement.then((data: any) => { const {type} = data; let inspectedElement;
facebook/react,4a28227960202539f329338f62d33973e76b32d8,"Sebastian ""Sebbie"" Silbermann",2025-10-02 17:18:15,[DevTools] Inspect the Initial Paint when inspecting a Root (#34454),packages/react-devtools-shared/src/utils.js,0,1,1,export function printOperationsArray(operations: Array<number>) { i++; // supportsProfiling i++; // supportsStrictMode i++; // hasOwnerMetadata - i++; // supportsTogglingSuspense } else { const parentID = ((operations[i]: any): number); i++;
facebook/react,e4a27db2836981b3851bb981a3dec93f5a373e32,"Sebastian ""Sebbie"" Silbermann",2025-10-02 17:13:52,[DevTools] Defer Suspense tab to 19.3.0-canary (#34688),packages/react-devtools-shared/src/backend/agent.js,1,1,2,export default class Agent extends EventEmitter<{ if (renderer !== null) { const devRenderer = renderer.bundleType === 1; const enableSuspenseTab = - devRenderer && gte(renderer.version '19.2.0-canary'); + devRenderer && gte(renderer.version '19.3.0-canary'); if (enableSuspenseTab) { this._bridge.send('enableSuspenseTab'); }
facebook/react,57d5a59748bbec1b507bb778c9fbe4bcb82b0a94,Joseph Savona,2025-10-02 16:48:52,[compiler] enablePreserveMemo treats manual deps as non-nullable (#34503)  The `@enablePreserveExistingMemoizationGuarantees` mode can still fail to preserve manual memoization due to mismtached dependencies. Specifically  where the user's dependencies are more precise than the compiler infers bc the compiler is being conservative about what might be nullable. In this mode though we're intentionally using information from the manual memoization and can also rely on the deps as a signal for what's non-nullable.  The idea of the PR is that we treat manual memo deps just like other inferred-as-non-nullable objects during PropagateScopeDeps. We're careful to not treat the full path as non-nullable  only up to the last property index. So `x.y.z` as a manual dep treats `x` and `x.y` as non-nullable  allowing us to preserve a conditional dependency on `x.y.z`.  Optionals within manual dependencies are a bit trickier and aren't handled yet  but hopefully that's less common and something we can improve in a follow-up. Not handling them just means that developers may hit false positives on validating existing memoization if they use optional chains in manual dependencies.  --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/34503). * #34689 * __->__ #34503,compiler/packages/babel-plugin-react-compiler/src/HIR/CollectHoistablePropertyLoads.ts,26,0,26,function collectNonNullsInBlocks( assumedNonNullObjects.add(entry); } } + } else if ( + fn.env.config.enablePreserveExistingMemoizationGuarantees && + instr.value.kind === 'StartMemoize' && + instr.value.deps != null + ) { + for (const dep of instr.value.deps) { + if (dep.root.kind === 'NamedLocal') { + if ( + !isImmutableAtInstr(dep.root.value.identifier instr.id context) + ) { + continue; + } + for (let i = 0; i < dep.path.length; i++) { + const pathEntry = dep.path[i]!; + if (pathEntry.optional) { + break; + } + const depNode = context.registry.getOrCreateProperty({ + identifier: dep.root.value.identifier + path: dep.path.slice(0 i) + reactive: dep.root.value.reactive + }); + assumedNonNullObjects.add(depNode); + } + } + } } }
facebook/react,57d5a59748bbec1b507bb778c9fbe4bcb82b0a94,Joseph Savona,2025-10-02 16:48:52,[compiler] enablePreserveMemo treats manual deps as non-nullable (#34503)  The `@enablePreserveExistingMemoizationGuarantees` mode can still fail to preserve manual memoization due to mismtached dependencies. Specifically  where the user's dependencies are more precise than the compiler infers bc the compiler is being conservative about what might be nullable. In this mode though we're intentionally using information from the manual memoization and can also rely on the deps as a signal for what's non-nullable.  The idea of the PR is that we treat manual memo deps just like other inferred-as-non-nullable objects during PropagateScopeDeps. We're careful to not treat the full path as non-nullable  only up to the last property index. So `x.y.z` as a manual dep treats `x` and `x.y` as non-nullable  allowing us to preserve a conditional dependency on `x.y.z`.  Optionals within manual dependencies are a bit trickier and aren't handled yet  but hopefully that's less common and something we can improve in a follow-up. Not handling them just means that developers may hit false positives on validating existing memoization if they use optional chains in manual dependencies.  --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/34503). * #34689 * __->__ #34503,compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-preserve-memo-deps-mixed-optional-nonoptional-property-chain.js,41,0,41,+// @enablePreserveExistingMemoizationGuarantees @validatePreserveExistingMemoizationGuarantees @enableOptionalDependencies @enableTreatFunctionDepsAsConditional:false + +import {useMemo} from 'react'; +import {identity ValidateMemoization} from 'shared-runtime'; + +function Component({x}) { + const object = useMemo(() => { + return identity({ + callback: () => { + // This is a bug in our dependency inference: we stop capturing dependencies + // after x.a.b?.c. But what this dependency is telling us is that if `x.a.b` + // was non-nullish then we can access `.c.d?.e`. Thus we should take the + // full property chain exactly as-is with optionals/non-optionals as a + // dependency + return identity(x.a.b?.c.d?.e); + } + }); + } [x.a.b?.c.d?.e]); + const result = useMemo(() => { + return [object.callback()]; + } [object]); + return <Inner x={x} result={result} />; +} + +function Inner({x result}) { + 'use no memo'; + return <ValidateMemoization inputs={[x.y.z]} output={result} />; +} + +export const FIXTURE_ENTRYPOINT = { + fn: Component + params: [{x: {y: {z: 42}}}] + sequentialRenders: [ + {x: {y: {z: 42}}} + {x: {y: {z: 42}}} + {x: {y: {z: 3.14}}} + {x: {y: {z: 42}}} + {x: {y: {z: 3.14}}} + {x: {y: {z: 42}}} + ] +};
facebook/react,57d5a59748bbec1b507bb778c9fbe4bcb82b0a94,Joseph Savona,2025-10-02 16:48:52,[compiler] enablePreserveMemo treats manual deps as non-nullable (#34503)  The `@enablePreserveExistingMemoizationGuarantees` mode can still fail to preserve manual memoization due to mismtached dependencies. Specifically  where the user's dependencies are more precise than the compiler infers bc the compiler is being conservative about what might be nullable. In this mode though we're intentionally using information from the manual memoization and can also rely on the deps as a signal for what's non-nullable.  The idea of the PR is that we treat manual memo deps just like other inferred-as-non-nullable objects during PropagateScopeDeps. We're careful to not treat the full path as non-nullable  only up to the last property index. So `x.y.z` as a manual dep treats `x` and `x.y` as non-nullable  allowing us to preserve a conditional dependency on `x.y.z`.  Optionals within manual dependencies are a bit trickier and aren't handled yet  but hopefully that's less common and something we can improve in a follow-up. Not handling them just means that developers may hit false positives on validating existing memoization if they use optional chains in manual dependencies.  --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/34503). * #34689 * __->__ #34503,compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-deps-conditional-property-chain-less-precise-deps.js,35,0,35,+// @enablePreserveExistingMemoizationGuarantees @validatePreserveExistingMemoizationGuarantees @enableOptionalDependencies @enableTreatFunctionDepsAsConditional:false + +import {useMemo} from 'react'; +import {identity ValidateMemoization} from 'shared-runtime'; + +function Component({x}) { + const object = useMemo(() => { + return identity({ + callback: () => { + return identity(x.y.z); // accesses more levels of properties than the manual memo + } + }); + // x.y as a manual dep only tells us that x is non-nullable not that x.y is non-nullable + // we can only take a dep on x.y not x.y.z + } [x.y]); + const result = useMemo(() => { + return [object.callback()]; + } [object]); + return <ValidateMemoization inputs={[x.y]} output={result} />; +} + +const input1 = {x: {y: {z: 42}}}; +const input1b = {x: {y: {z: 42}}}; +const input2 = {x: {y: {z: 3.14}}}; +export const FIXTURE_ENTRYPOINT = { + fn: Component + params: [input1] + sequentialRenders: [ + input1 + input1 + input1b // should reset even though .z didn't change + input1 + input2 + ] +};
facebook/react,57d5a59748bbec1b507bb778c9fbe4bcb82b0a94,Joseph Savona,2025-10-02 16:48:52,[compiler] enablePreserveMemo treats manual deps as non-nullable (#34503)  The `@enablePreserveExistingMemoizationGuarantees` mode can still fail to preserve manual memoization due to mismtached dependencies. Specifically  where the user's dependencies are more precise than the compiler infers bc the compiler is being conservative about what might be nullable. In this mode though we're intentionally using information from the manual memoization and can also rely on the deps as a signal for what's non-nullable.  The idea of the PR is that we treat manual memo deps just like other inferred-as-non-nullable objects during PropagateScopeDeps. We're careful to not treat the full path as non-nullable  only up to the last property index. So `x.y.z` as a manual dep treats `x` and `x.y` as non-nullable  allowing us to preserve a conditional dependency on `x.y.z`.  Optionals within manual dependencies are a bit trickier and aren't handled yet  but hopefully that's less common and something we can improve in a follow-up. Not handling them just means that developers may hit false positives on validating existing memoization if they use optional chains in manual dependencies.  --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/34503). * #34689 * __->__ #34503,compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-deps-conditional-property-chain.js,31,0,31,+// @enablePreserveExistingMemoizationGuarantees @validatePreserveExistingMemoizationGuarantees @enableOptionalDependencies @enableTreatFunctionDepsAsConditional:false + +import {useMemo} from 'react'; +import {identity ValidateMemoization} from 'shared-runtime'; + +function Component({x}) { + const object = useMemo(() => { + return identity({ + callback: () => { + return identity(x.y.z); + } + }); + } [x.y.z]); + const result = useMemo(() => { + return [object.callback()]; + } [object]); + return <ValidateMemoization inputs={[x.y.z]} output={result} />; +} + +export const FIXTURE_ENTRYPOINT = { + fn: Component + params: [{x: {y: {z: 42}}}] + sequentialRenders: [ + {x: {y: {z: 42}}} + {x: {y: {z: 42}}} + {x: {y: {z: 3.14}}} + {x: {y: {z: 42}}} + {x: {y: {z: 3.14}}} + {x: {y: {z: 42}}} + ] +};
facebook/react,57d5a59748bbec1b507bb778c9fbe4bcb82b0a94,Joseph Savona,2025-10-02 16:48:52,[compiler] enablePreserveMemo treats manual deps as non-nullable (#34503)  The `@enablePreserveExistingMemoizationGuarantees` mode can still fail to preserve manual memoization due to mismtached dependencies. Specifically  where the user's dependencies are more precise than the compiler infers bc the compiler is being conservative about what might be nullable. In this mode though we're intentionally using information from the manual memoization and can also rely on the deps as a signal for what's non-nullable.  The idea of the PR is that we treat manual memo deps just like other inferred-as-non-nullable objects during PropagateScopeDeps. We're careful to not treat the full path as non-nullable  only up to the last property index. So `x.y.z` as a manual dep treats `x` and `x.y` as non-nullable  allowing us to preserve a conditional dependency on `x.y.z`.  Optionals within manual dependencies are a bit trickier and aren't handled yet  but hopefully that's less common and something we can improve in a follow-up. Not handling them just means that developers may hit false positives on validating existing memoization if they use optional chains in manual dependencies.  --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/34503). * #34689 * __->__ #34503,compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/preserve-memo-deps-optional-property-chain.js,36,0,36,+// @enablePreserveExistingMemoizationGuarantees @validatePreserveExistingMemoizationGuarantees @enableOptionalDependencies @enableTreatFunctionDepsAsConditional:false + +import {useMemo} from 'react'; +import {identity ValidateMemoization} from 'shared-runtime'; + +function Component({x y z}) { + const object = useMemo(() => { + return identity({ + callback: () => { + return identity(x?.y?.z y.a?.b z.a.b?.c); + } + }); + } [x?.y?.z y.a?.b z.a.b?.c]); + const result = useMemo(() => { + return [object.callback()]; + } [object]); + return <Inner x={x} result={result} />; +} + +function Inner({x result}) { + 'use no memo'; + return <ValidateMemoization inputs={[x.y.z]} output={result} />; +} + +export const FIXTURE_ENTRYPOINT = { + fn: Component + params: [{x: {y: {z: 42}}}] + sequentialRenders: [ + {x: {y: {z: 42}}} + {x: {y: {z: 42}}} + {x: {y: {z: 3.14}}} + {x: {y: {z: 42}}} + {x: {y: {z: 3.14}}} + {x: {y: {z: 42}}} + ] +};
facebook/react,bc828bf6e3b762747134099f338a2b57df586f43,"Sebastian ""Sebbie"" Silbermann",2025-10-02 16:33:50,[DevTools] Recommend React Performance tracks if supported when Timeline profiler is not supported (#34684),packages/react-devtools-shared/src/backend/fiber/renderer.js,5,0,5,import { __DEBUG__ PROFILING_FLAG_BASIC_SUPPORT PROFILING_FLAG_TIMELINE_SUPPORT + PROFILING_FLAG_PERFORMANCE_TRACKS_SUPPORT TREE_OPERATION_ADD TREE_OPERATION_REMOVE TREE_OPERATION_REORDER_CHILDREN export function attach( const supportsTogglingSuspense = typeof setSuspenseHandler === 'function' && typeof scheduleUpdate === 'function'; + const supportsPerformanceTracks = gte(version '19.2.0'); if (typeof scheduleRefresh === 'function') { // When Fast Refresh updates a component the frontend may need to purge cached information. export function attach( if (typeof injectProfilingHooks === 'function') { profilingFlags |= PROFILING_FLAG_TIMELINE_SUPPORT; } + if (supportsPerformanceTracks) { + profilingFlags |= PROFILING_FLAG_PERFORMANCE_TRACKS_SUPPORT; + } } // Set supportsStrictMode to false for production renderer builds
facebook/react,bc828bf6e3b762747134099f338a2b57df586f43,"Sebastian ""Sebbie"" Silbermann",2025-10-02 16:33:50,[DevTools] Recommend React Performance tracks if supported when Timeline profiler is not supported (#34684),packages/react-devtools-shared/src/constants.js,3,2,5,export const SUSPENSE_TREE_OPERATION_REORDER_CHILDREN = 10; export const SUSPENSE_TREE_OPERATION_RESIZE = 11; export const SUSPENSE_TREE_OPERATION_SUSPENDERS = 12; -export const PROFILING_FLAG_BASIC_SUPPORT = 0b01; -export const PROFILING_FLAG_TIMELINE_SUPPORT = 0b10; +export const PROFILING_FLAG_BASIC_SUPPORT /*. */ = 0b001; +export const PROFILING_FLAG_TIMELINE_SUPPORT /* */ = 0b010; +export const PROFILING_FLAG_PERFORMANCE_TRACKS_SUPPORT /* */ = 0b100; export const UNKNOWN_SUSPENDERS_NONE: UnknownSuspendersReason = 0; // If we had at least one debugInfo then that might have been the reason. export const UNKNOWN_SUSPENDERS_REASON_PRODUCTION: UnknownSuspendersReason = 1; // We're running in prod. That might be why we had unknown suspenders.
facebook/react,bc828bf6e3b762747134099f338a2b57df586f43,"Sebastian ""Sebbie"" Silbermann",2025-10-02 16:33:50,[DevTools] Recommend React Performance tracks if supported when Timeline profiler is not supported (#34684),packages/react-devtools-timeline/src/Timeline.js,13,3,16,import {TimelineSearchContextController} from './TimelineSearchContext'; import styles from './Timeline.css'; export function Timeline(_: {}): React.Node { - const {file inMemoryTimelineData isTimelineSupported setFile viewState} = - useContext(TimelineContext); + const { + file + inMemoryTimelineData + isPerformanceTracksSupported + isTimelineSupported + setFile + viewState + } = useContext(TimelineContext); const {didRecordCommits isProfiling} = useContext(ProfilerContext); const ref = useRef(null); export function Timeline(_: {}): React.Node { } else if (isTimelineSupported) { content = <NoProfilingData />; } else { - content = <TimelineNotSupported />; + content = ( + <TimelineNotSupported + isPerformanceTracksSupported={isPerformanceTracksSupported} + /> + ); } return (
facebook/react,bc828bf6e3b762747134099f338a2b57df586f43,"Sebastian ""Sebbie"" Silbermann",2025-10-02 16:33:50,[DevTools] Recommend React Performance tracks if supported when Timeline profiler is not supported (#34684),packages/react-devtools-timeline/src/TimelineContext.js,15,0,15,import type { export type Context = { file: File | null inMemoryTimelineData: Array<TimelineData> | null + isPerformanceTracksSupported: boolean isTimelineSupported: boolean searchInputContainerRef: RefObject setFile: (file: File | null) => void function TimelineContextController({children}: Props): React.Node { } ); + const isPerformanceTracksSupported = useSyncExternalStore<boolean>( + function subscribe(callback) { + store.addListener('rootSupportsPerformanceTracks' callback); + return function unsubscribe() { + store.removeListener('rootSupportsPerformanceTracks' callback); + }; + } + function getState() { + return store.rootSupportsPerformanceTracks; + } + ); + const inMemoryTimelineData = useSyncExternalStore<Array<TimelineData> | null>( function subscribe(callback) { store.profilerStore.addListener('isProcessingData' callback); function TimelineContextController({children}: Props): React.Node { () => ({ file inMemoryTimelineData + isPerformanceTracksSupported isTimelineSupported searchInputContainerRef setFile function TimelineContextController({children}: Props): React.Node { [ file inMemoryTimelineData + isPerformanceTracksSupported isTimelineSupported setFile viewState
facebook/react,bc828bf6e3b762747134099f338a2b57df586f43,"Sebastian ""Sebbie"" Silbermann",2025-10-02 16:33:50,[DevTools] Recommend React Performance tracks if supported when Timeline profiler is not supported (#34684),packages/react-devtools-timeline/src/TimelineNotSupported.js,53,5,58,"import {isInternalFacebookBuild} from 'react-devtools-feature-flags'; import styles from './TimelineNotSupported.css'; -export default function TimelineNotSupported(): React.Node { +type Props = { + isPerformanceTracksSupported: boolean +}; + +function PerformanceTracksSupported() { return ( - <div className={styles.Column}> - <div className={styles.Header}>Timeline profiling not supported.</div> + <> <p className={styles.Paragraph}> <span> - Timeline profiler requires a development or profiling build of{' '} - <code className={styles.Code}>react-dom@^18</code>. + Please use{' '} + <a + className={styles.Link} + href=""https://react.dev/reference/dev-tools/react-performance-tracks"" + rel=""noopener noreferrer"" + target=""_blank""> + React Performance tracks + </a>{' '} + instead of the Timeline profiler. </span> </p> + </> + ); +} + +function UnknownUnsupportedReason() { + return ( + <> + <p className={styles.Paragraph}> + Timeline profiler requires a development or profiling build of{' '} + <code className={styles.Code}>react-dom@{'>='}18</code>. + </p> + <p className={styles.Paragraph}> + In React 19.2 and above{' '} + <a + className={styles.Link} + href=""https://react.dev/reference/dev-tools/react-performance-tracks"" + rel=""noopener noreferrer"" + target=""_blank""> + React Performance tracks + </a>{' '} + can be used instead. + </p> <div className={styles.LearnMoreRow}> Click{' '} <a export default function TimelineNotSupported(): React.Node { </a>{' '} to learn more about profiling. </div> + </> + ); +} + +export default function TimelineNotSupported({ + isPerformanceTracksSupported +}: Props): React.Node { + return ( + <div className={styles.Column}> + <div className={styles.Header}>Timeline profiling not supported.</div> + + {isPerformanceTracksSupported ? ( + <PerformanceTracksSupported /> + ) : ( + <UnknownUnsupportedReason /> + )} {isInternalFacebookBuild && ( <div className={styles.MetaGKRow}>"
facebook/react,a757cb76671863071cf3672401ce1cbdcf040a85,"Sebastian ""Sebbie"" Silbermann",2025-10-02 12:43:02,Fix DevTools fixture crash due to usage of renamed APIs (#34682),packages/react-devtools-shell/src/app/InspectableElements/UseEffectEvent.js,5,3,8,import * as React from 'react'; -const {experimental_useEffectEvent useState useEffect} = React; +const {useState useEffect} = React; +const useEffectEvent = + React.useEffectEvent || React.experimental_useEffectEvent; export default function UseEffectEvent(): React.Node { return ( export default function UseEffectEvent(): React.Node { } function SingleHookCase() { - const onClick = experimental_useEffectEvent(() => {}); + const onClick = useEffectEvent(() => {}); return <div onClick={onClick} />; } function useCustomHook() { const [state setState] = useState(); - const onClick = experimental_useEffectEvent(() => {}); + const onClick = useEffectEvent(() => {}); useEffect(() => {}); return [state setState onClick];
facebook/react,d74f061b6908e4841b2eb09c296ca4658dbdd38e,Sebastian Markbåge,2025-10-02 01:58:13,[Fiber] Clean up ViewTransition when it fails to start (#34676)  The View Transition docs were unclear about this but apparently the `finished` promise never settles if the animation never started. So if there's an error that rejects the `ready` promise  we'll never run the clean up which can cause it to stall.  Fixes #34662.  However  ultimately that is caused by Chrome stalling our default `onDefaultTransitionIndicator` but it should be unblocked after 10 seconds  not a minute.,packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js,16,0,16,export function startViewTransition( spawnedWorkCallback(); }; const handleError = (error: mixed) => { + // $FlowFixMe[prop-missing] + if (ownerDocument.__reactViewTransition === transition) { + // $FlowFixMe[prop-missing] + ownerDocument.__reactViewTransition = null; + } try { error = customizeViewTransitionError(error false); if (error !== null) { export function startViewTransition( layoutCallback(); // Skip afterMutationCallback() since we're not animating. spawnedWorkCallback(); + if (enableProfilerTimer) { + finishedAnimation(); + } } }; transition.ready.then(readyCallback handleError); export function startGestureTransition( ? () => requestAnimationFrame(readyCallback) : readyCallback; const handleError = (error: mixed) => { + // $FlowFixMe[prop-missing] + if (ownerDocument.__reactViewTransition === transition) { + // $FlowFixMe[prop-missing] + ownerDocument.__reactViewTransition = null; + } try { error = customizeViewTransitionError(error true); if (error !== null) { export function startGestureTransition( // Skip readyCallback() and go straight to animateCallbck() since we're not animating. // animateCallback() is still required to restore states. animateCallback(); + if (enableProfilerTimer) { + finishedAnimation(); + } } }; transition.ready.then(readyForAnimations handleError);
facebook/react,f7254efc5c43ebae57afa32a52d4653878ef23d0,Eugene Choi,2025-10-02 01:26:16,[playground] Persist open tabs on compiler error (#34673)  This change allows it so that tabs that were open before a compiler error are automatically opened again when the error is resolved. Quality of life change for those especially working with the advanced view of the playground.   https://github.com/user-attachments/assets/cd2dc117-e6fc-4f57-a08f-259757c4f5e8,compiler/apps/playground/components/AccordionWindow.tsx,5,1,6,"export default function AccordionWindow(props: { tabsOpen: Set<string>; setTabsOpen: (newTab: Set<string>) => void; changedPasses: Set<string>; + isFailure: boolean; }): React.ReactElement { return ( <div className=""flex-1 min-w-[550px] sm:min-w-0""> export default function AccordionWindow(props: { tabsOpen={props.tabsOpen} setTabsOpen={props.setTabsOpen} hasChanged={props.changedPasses.has(name)} + isFailure={props.isFailure} /> ); })} function AccordionWindowItem({ tabsOpen setTabsOpen hasChanged + isFailure }: { name: string; tabs: TabsRecord; tabsOpen: Set<string>; setTabsOpen: (newTab: Set<string>) => void; hasChanged: boolean; + isFailure: boolean; }): React.ReactElement { const id = useId(); - const isShow = tabsOpen.has(name); + const isShow = isFailure ? name === 'Output' : tabsOpen.has(name); const transitionName = `accordion-window-item-${id}`;"
facebook/react,f7254efc5c43ebae57afa32a52d4653878ef23d0,Eugene Choi,2025-10-02 01:26:16,[playground] Persist open tabs on compiler error (#34673)  This change allows it so that tabs that were open before a compiler error are automatically opened again when the error is resolved. Quality of life change for those especially working with the advanced view of the playground.   https://github.com/user-attachments/assets/cd2dc117-e6fc-4f57-a08f-259757c4f5e8,compiler/apps/playground/components/Editor/Output.tsx,5,8,13,function OutputContent({store compilerOutput}: Props): JSX.Element { * Update the active tab back to the output or errors tab when the compilation state * changes between success/failure. */ - const [previousOutputKind setPreviousOutputKind] = useState( - compilerOutput.kind - ); - if (compilerOutput.kind !== previousOutputKind) { - setPreviousOutputKind(compilerOutput.kind); - setTabsOpen(new Set(['Output'])); - setActiveTab('Output'); - } + + const isFailure = compilerOutput.kind !== 'ok'; const changedPasses: Set<string> = new Set(['Output' 'HIR']); // Initial and final passes should always be bold let lastResult: string = ''; for (const [passName results] of compilerOutput.results) { function OutputContent({store compilerOutput}: Props): JSX.Element { tabs={tabs} activeTab={activeTab} onTabChange={setActiveTab} + // Display the Output tab on compilation failure + activeTabOverride={isFailure ? 'Output' : undefined} /> </ViewTransition> ); function OutputContent({store compilerOutput}: Props): JSX.Element { tabsOpen={tabsOpen} tabs={tabs} changedPasses={changedPasses} + isFailure={isFailure} /> </ViewTransition> );
facebook/react,f7254efc5c43ebae57afa32a52d4653878ef23d0,Eugene Choi,2025-10-02 01:26:16,[playground] Persist open tabs on compiler error (#34673)  This change allows it so that tabs that were open before a compiler error are automatically opened again when the error is resolved. Quality of life change for those especially working with the advanced view of the playground.   https://github.com/user-attachments/assets/cd2dc117-e6fc-4f57-a08f-259757c4f5e8,compiler/apps/playground/components/TabbedWindow.tsx,10,2,12,"export default function TabbedWindow({ tabs activeTab onTabChange + activeTabOverride }: { tabs: Map<string React.ReactNode>; activeTab: string; onTabChange: (tab: string) => void; + activeTabOverride?: string; }): React.ReactElement { + const currentActiveTab = activeTabOverride ? activeTabOverride : activeTab; + const id = useId(); const transitionName = `tab-highlight-${id}`; export default function TabbedWindow({ <div className=""flex flex-col h-full max-w-full""> <div className=""flex p-2 flex-shrink-0""> {Array.from(tabs.keys()).map(tab => { - const isActive = activeTab === tab; + const isActive = currentActiveTab === tab; return ( <button key={tab} export default function TabbedWindow({ {isActive && ( <ViewTransition name={transitionName} + enter={{default: 'none'}} + exit={{default: 'none'}} share={{ [TOGGLE_TAB_TRANSITION]: 'tab-highlight' default: 'none' export default function TabbedWindow({ </ViewTransition> )} <ViewTransition + enter={{default: 'none'}} + exit={{default: 'none'}} update={{ [TOGGLE_TAB_TRANSITION]: 'tab-text' default: 'none' export default function TabbedWindow({ })} </div> <div className=""flex-1 overflow-hidden w-full h-full""> - {tabs.get(activeTab)} + {tabs.get(currentActiveTab)} </div> </div> </div>"
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),ReactVersions.js,10,10,20,"// // The @latest channel uses the version as-is e.g.: // -// 19.2.0 +// 19.3.0 // // The @canary channel appends additional information with the scheme // <version>-<label>-<commit_sha> e.g.: // -// 19.2.0-canary-a1c2d3e4 +// 19.3.0-canary-a1c2d3e4 // // The @experimental channel doesn't include a version only a date and a sha e.g.: // // 0.0.0-experimental-241c4467e-20200129 -const ReactVersion = '19.2.0'; +const ReactVersion = '19.3.0'; // The label used by the @canary channel. Represents the upcoming release's // stability. Most of the time this will be ""canary"" but we may temporarily const canaryChannelLabel = 'canary'; const rcNumber = 0; const stablePackages = { - 'eslint-plugin-react-hooks': '6.1.0' - 'jest-react': '0.17.0' + 'eslint-plugin-react-hooks': '6.2.0' + 'jest-react': '0.18.0' react: ReactVersion 'react-art': ReactVersion 'react-dom': ReactVersion 'react-server-dom-webpack': ReactVersion 'react-server-dom-turbopack': ReactVersion 'react-server-dom-parcel': ReactVersion 'react-is': ReactVersion - 'react-reconciler': '0.33.0' - 'react-refresh': '0.18.0' + 'react-reconciler': '0.34.0' + 'react-refresh': '0.19.0' 'react-test-renderer': ReactVersion - 'use-subscription': '1.12.0' - 'use-sync-external-store': '1.6.0' - scheduler: '0.27.0' + 'use-subscription': '1.13.0' + 'use-sync-external-store': '1.7.0' + scheduler: '0.28.0' }; // These packages do not exist in the @canary or @latest channel only"
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/react-art/package.json,3,3,6,"{ ""name"": ""react-art"" ""description"": ""React ART is a JavaScript library for drawing vector graphics using React. It provides declarative and reactive bindings to the ART library. Using the same declarative API you can render the output to either Canvas SVG or VML (IE8)."" - ""version"": ""19.2.0"" + ""version"": ""19.3.0"" ""main"": ""index.js"" ""repository"": { ""type"": ""git"" ""dependencies"": { ""art"": ""^0.10.1"" ""create-react-class"": ""^15.6.2"" - ""scheduler"": ""^0.27.0"" + ""scheduler"": ""^0.28.0"" } ""peerDependencies"": { - ""react"": ""^19.2.0"" + ""react"": ""^19.3.0"" } ""files"": [ ""LICENSE"""
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/react-dom-bindings/package.json,1,1,2,"{ ""name"": ""react-dom-bindings"" ""description"": ""React implementation details for react-dom."" - ""version"": ""19.2.0"" + ""version"": ""19.3.0"" ""private"": true ""main"": ""index.js"" ""repository"": {"
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/react-dom/package.json,3,3,6,"{ ""name"": ""react-dom"" - ""version"": ""19.2.0"" + ""version"": ""19.3.0"" ""description"": ""React package for working with the DOM."" ""main"": ""index.js"" ""repository"": { } ""homepage"": ""https://react.dev/"" ""dependencies"": { - ""scheduler"": ""^0.27.0"" + ""scheduler"": ""^0.28.0"" } ""peerDependencies"": { - ""react"": ""^19.2.0"" + ""react"": ""^19.3.0"" } ""files"": [ ""LICENSE"""
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/react-is/package.json,1,1,2,"{ ""name"": ""react-is"" - ""version"": ""19.2.0"" + ""version"": ""19.3.0"" ""description"": ""Brand checking of React Elements."" ""main"": ""index.js"" ""sideEffects"": false"
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/react-markup/package.json,1,1,2,"{ ""name"": ""react-markup"" - ""version"": ""19.2.0"" + ""version"": ""19.3.0"" ""description"": ""React package generating embedded markup such as e-mails with support for Server Components."" ""main"": ""index.js"" ""repository"": {"
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/react-native-renderer/package.json,1,1,2,"""directory"": ""packages/react-native-renderer"" } ""dependencies"": { - ""scheduler"": ""^0.27.0"" + ""scheduler"": ""^0.28.0"" } ""peerDependencies"": { ""react"": ""^18.0.0"""
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/react-reconciler/package.json,3,3,6,"{ ""name"": ""react-reconciler"" ""description"": ""React package for creating custom renderers."" - ""version"": ""0.33.0"" + ""version"": ""0.34.0"" ""keywords"": [ ""react"" ] ""node"": "">=0.10.0"" } ""peerDependencies"": { - ""react"": ""^19.2.0"" + ""react"": ""^19.3.0"" } ""dependencies"": { - ""scheduler"": ""^0.27.0"" + ""scheduler"": ""^0.28.0"" } }"
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/react-refresh/package.json,1,1,2,"""keywords"": [ ""react"" ] - ""version"": ""0.18.0"" + ""version"": ""0.19.0"" ""homepage"": ""https://react.dev/"" ""bugs"": ""https://github.com/facebook/react/issues"" ""license"": ""MIT"""
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/react-server-dom-esm/package.json,1,1,2,"{ ""name"": ""react-server-dom-esm"" ""description"": ""React Server Components bindings for DOM using ESM. This is intended to be integrated into meta-frameworks. It is not intended to be imported directly."" - ""version"": ""19.2.0"" + ""version"": ""19.3.0"" ""keywords"": [ ""react"" ]"
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/react-server-dom-fb/package.json,1,1,2,"""directory"": ""packages/react-server-dom-fb"" } ""dependencies"": { - ""scheduler"": ""^0.27.0"" + ""scheduler"": ""^0.28.0"" } ""peerDependencies"": { ""react"": ""^18.0.0"""
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/react-server-dom-parcel/package.json,3,3,6,"{ ""name"": ""react-server-dom-parcel"" ""description"": ""React Server Components bindings for DOM using Parcel. This is intended to be integrated into meta-frameworks. It is not intended to be imported directly."" - ""version"": ""19.2.0"" + ""version"": ""19.3.0"" ""keywords"": [ ""react"" ] ""node"": "">=0.10.0"" } ""peerDependencies"": { - ""react"": ""^19.2.0"" - ""react-dom"": ""^19.2.0"" + ""react"": ""^19.3.0"" + ""react-dom"": ""^19.3.0"" } }"
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/react-server-dom-turbopack/package.json,3,3,6,"{ ""name"": ""react-server-dom-turbopack"" ""description"": ""React Server Components bindings for DOM using Turbopack. This is intended to be integrated into meta-frameworks. It is not intended to be imported directly."" - ""version"": ""19.2.0"" + ""version"": ""19.3.0"" ""keywords"": [ ""react"" ] ""node"": "">=0.10.0"" } ""peerDependencies"": { - ""react"": ""^19.2.0"" - ""react-dom"": ""^19.2.0"" + ""react"": ""^19.3.0"" + ""react-dom"": ""^19.3.0"" } ""dependencies"": { ""acorn-loose"": ""^8.3.0"""
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/react-server-dom-webpack/package.json,3,3,6,"{ ""name"": ""react-server-dom-webpack"" ""description"": ""React Server Components bindings for DOM using Webpack. This is intended to be integrated into meta-frameworks. It is not intended to be imported directly."" - ""version"": ""19.2.0"" + ""version"": ""19.3.0"" ""keywords"": [ ""react"" ] ""node"": "">=0.10.0"" } ""peerDependencies"": { - ""react"": ""^19.2.0"" - ""react-dom"": ""^19.2.0"" + ""react"": ""^19.3.0"" + ""react-dom"": ""^19.3.0"" ""webpack"": ""^5.59.0"" } ""dependencies"": {"
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/react-test-renderer/package.json,4,4,8,"{ ""name"": ""react-test-renderer"" - ""version"": ""19.2.0"" + ""version"": ""19.3.0"" ""description"": ""React package for snapshot testing."" ""main"": ""index.js"" ""repository"": { } ""homepage"": ""https://react.dev/"" ""dependencies"": { - ""react-is"": ""^19.2.0"" - ""scheduler"": ""^0.27.0"" + ""react-is"": ""^19.3.0"" + ""scheduler"": ""^0.28.0"" } ""peerDependencies"": { - ""react"": ""^19.2.0"" + ""react"": ""^19.3.0"" } ""files"": [ ""LICENSE"""
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/react/package.json,1,1,2,"""keywords"": [ ""react"" ] - ""version"": ""19.2.0"" + ""version"": ""19.3.0"" ""homepage"": ""https://react.dev/"" ""bugs"": ""https://github.com/facebook/react/issues"" ""license"": ""MIT"""
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/scheduler/package.json,1,1,2,"{ ""name"": ""scheduler"" - ""version"": ""0.27.0"" + ""version"": ""0.28.0"" ""description"": ""Cooperative scheduler for the browser environment."" ""repository"": { ""type"": ""git"""
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/shared/ReactVersion.js,1,1,2,// TODO: This module is used both by the release scripts and to expose a version // at runtime. We should instead inject the version number as part of the build // process and use the ReactVersions.js module as the single source of truth. -export default '19.2.0'; +export default '19.3.0';
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/use-subscription/package.json,1,1,2,"{ ""name"": ""use-subscription"" ""description"": ""Reusable hooks"" - ""version"": ""1.12.0"" + ""version"": ""1.13.0"" ""repository"": { ""type"": ""git"" ""url"": ""https://github.com/facebook/react.git"""
facebook/react,79ca5ae8557e903f225c9ae61fa4db981ac87dfa,"Sebastian ""Sebbie"" Silbermann",2025-10-01 22:31:55,Bump next prerelease version numbers (#34674),packages/use-sync-external-store/package.json,1,1,2,"{ ""name"": ""use-sync-external-store"" ""description"": ""Backwards compatible shim for React's useSyncExternalStore. Works with any React that supports hooks."" - ""version"": ""1.6.0"" + ""version"": ""1.7.0"" ""exports"": { ""."": ""./index.js"" ""./with-selector"": ""./with-selector.js"""
facebook/react,ae74234eae6ebd62f19190731278e20bc1c37d51,lauren,2025-10-01 21:05:42,[eprh] Allow compiler rules to be opted-in but not in the preset (#34672)  Follow up to #34649. This adds the compiler rules back so they can be opted-in 6.1.0  but aren't included in the presets as that would be a breaking change.,packages/eslint-plugin-react-hooks/src/index.ts,4,0,4,import type {Linter Rule} from 'eslint'; import ExhaustiveDeps from './rules/ExhaustiveDeps'; +import {allRules} from './shared/ReactCompiler'; import RulesOfHooks from './rules/RulesOfHooks'; // All rules const rules = { 'exhaustive-deps': ExhaustiveDeps 'rules-of-hooks': RulesOfHooks + ...Object.fromEntries( + Object.entries(allRules).map(([name config]) => [name config.rule]) + ) } satisfies Record<string Rule.RuleModule>; // Config rules
facebook/react,861811347b8fa936b4a114fc022db9b8253b3d86,"Sebastian ""Sebbie"" Silbermann",2025-10-01 20:45:31,Bump scheduler version (#34671)  The canaries have been published depending on 0.27-canary. Bumping scheduler just in case to be sure.,packages/react-art/package.json,1,1,2,"""dependencies"": { ""art"": ""^0.10.1"" ""create-react-class"": ""^15.6.2"" - ""scheduler"": ""^0.26.0"" + ""scheduler"": ""^0.27.0"" } ""peerDependencies"": { ""react"": ""^19.2.0"""
facebook/react,861811347b8fa936b4a114fc022db9b8253b3d86,"Sebastian ""Sebbie"" Silbermann",2025-10-01 20:45:31,Bump scheduler version (#34671)  The canaries have been published depending on 0.27-canary. Bumping scheduler just in case to be sure.,packages/react-dom/package.json,1,1,2,"} ""homepage"": ""https://react.dev/"" ""dependencies"": { - ""scheduler"": ""^0.26.0"" + ""scheduler"": ""^0.27.0"" } ""peerDependencies"": { ""react"": ""^19.2.0"""
facebook/react,861811347b8fa936b4a114fc022db9b8253b3d86,"Sebastian ""Sebbie"" Silbermann",2025-10-01 20:45:31,Bump scheduler version (#34671)  The canaries have been published depending on 0.27-canary. Bumping scheduler just in case to be sure.,packages/react-native-renderer/package.json,1,1,2,"""directory"": ""packages/react-native-renderer"" } ""dependencies"": { - ""scheduler"": ""^0.26.0"" + ""scheduler"": ""^0.27.0"" } ""peerDependencies"": { ""react"": ""^18.0.0"""
facebook/react,861811347b8fa936b4a114fc022db9b8253b3d86,"Sebastian ""Sebbie"" Silbermann",2025-10-01 20:45:31,Bump scheduler version (#34671)  The canaries have been published depending on 0.27-canary. Bumping scheduler just in case to be sure.,packages/react-reconciler/package.json,1,1,2,"""react"": ""^19.2.0"" } ""dependencies"": { - ""scheduler"": ""^0.26.0"" + ""scheduler"": ""^0.27.0"" } }"
facebook/react,861811347b8fa936b4a114fc022db9b8253b3d86,"Sebastian ""Sebbie"" Silbermann",2025-10-01 20:45:31,Bump scheduler version (#34671)  The canaries have been published depending on 0.27-canary. Bumping scheduler just in case to be sure.,packages/react-server-dom-fb/package.json,1,1,2,"""directory"": ""packages/react-server-dom-fb"" } ""dependencies"": { - ""scheduler"": ""^0.26.0"" + ""scheduler"": ""^0.27.0"" } ""peerDependencies"": { ""react"": ""^18.0.0"""
facebook/react,861811347b8fa936b4a114fc022db9b8253b3d86,"Sebastian ""Sebbie"" Silbermann",2025-10-01 20:45:31,Bump scheduler version (#34671)  The canaries have been published depending on 0.27-canary. Bumping scheduler just in case to be sure.,packages/react-test-renderer/package.json,1,1,2,"""homepage"": ""https://react.dev/"" ""dependencies"": { ""react-is"": ""^19.2.0"" - ""scheduler"": ""^0.26.0"" + ""scheduler"": ""^0.27.0"" } ""peerDependencies"": { ""react"": ""^19.2.0"""
facebook/react,861811347b8fa936b4a114fc022db9b8253b3d86,"Sebastian ""Sebbie"" Silbermann",2025-10-01 20:45:31,Bump scheduler version (#34671)  The canaries have been published depending on 0.27-canary. Bumping scheduler just in case to be sure.,packages/scheduler/package.json,1,1,2,"{ ""name"": ""scheduler"" - ""version"": ""0.26.0"" + ""version"": ""0.27.0"" ""description"": ""Cooperative scheduler for the browser environment."" ""repository"": { ""type"": ""git"""
facebook/react,7f9d99749c95d69b23efaa328c4388d73a39bf50,Ricky,2025-10-01 20:31:30,Land enableHiddenSubtreeInsertionEffectCleanup (#34372)  Fixes a bug where insertion effects were not cleaned up if a hidden Activity is unmounted.,packages/shared/ReactFeatureFlags.js,1,1,2,export const renameElementSymbol: boolean = true; /** * Enables a fix to run insertion effect cleanup on hidden subtrees. */ -export const enableHiddenSubtreeInsertionEffectCleanup: boolean = false; +export const enableHiddenSubtreeInsertionEffectCleanup: boolean = true; /** * Removes legacy style context defined using static `contextTypes` and consumed with static `childContextTypes`.
facebook/react,aef8b1b562ed7db87ae9552e44168a54af84aaf8,"Sebastian ""Sebbie"" Silbermann",2025-10-01 20:11:02,19.2 changelog (#34655)  Co-authored-by: Jack Pope <jackpope1@gmail.com> Co-authored-by: Rick Hanlon <rickhanlonii@meta.com>,packages/eslint-plugin-react-hooks/CHANGELOG.md,15,0,15,+## 6.1.0 + +**Note:** Version 6.0.0 was mistakenly released and immediately deprecated and untagged on npm. This is the first official 6.x major release and includes breaking changes. + +- **Breaking:** Require Node.js 18 or newer. ([@michaelfaith](https://github.com/michaelfaith) in [#32458](https://github.com/facebook/react/pull/32458)) +- **Breaking:** Flat config is now the default `recommended` preset. Legacy config moved to `recommended-legacy`. ([@michaelfaith](https://github.com/michaelfaith) in [#32457](https://github.com/facebook/react/pull/32457)) +- **New Violations:** Disallow calling `use` within try/catch blocks. ([@poteto](https://github.com/poteto) in [#34040](https://github.com/facebook/react/pull/34040)) +- **New Violations:** Disallow calling `useEffectEvent` functions in arbitrary closures. ([@jbrown215](https://github.com/jbrown215) in [#33544](https://github.com/facebook/react/pull/33544)) +- Handle `React.useEffect` in addition to `useEffect` in rules-of-hooks. ([@Ayc0](https://github.com/Ayc0) in [#34076](https://github.com/facebook/react/pull/34076)) +- Added `react-hooks` settings config option that to accept `additionalEffectHooks` that are used across exhaustive-deps and rules-of-hooks rules. ([@jbrown215](https://github.com/jbrown215)) in [#34497](https://github.com/facebook/react/pull/34497) + +## 6.0.0 + +Accidentally released. See 6.1.0 for the actual changes. + ## 5.2.0 - Support flat config ([@michaelfaith](https://github.com/michaelfaith) in [#30774](https://github.com/facebook/react/pull/30774))
facebook/react,67e24bc5279204108b749fe48b4d395ef9e49e67,Jack Pope,2025-10-01 19:17:08,"Improve lint error messages for useEffectEvent (#34669)  Called Before:  > `logEvent` is a function created with React Hook ""useEffectEvent""  and can only be called from the same component.  Called After:  > `logEvent` is a function created with React Hook ""useEffectEvent""  and can only be called from Effects and Effect Events in the same component.  Referenced Before:  > `logEvent` is a function created with React Hook ""useEffectEvent""  and can only be called from the same component. They cannot be assigned to variables or passed down.  Referenced After:  > `logEvent` is a function created with React Hook ""useEffectEvent""  and can only be called from Effects and Effect Events in the same component. It cannot be assigned to a variable or passed down.",packages/eslint-plugin-react-hooks/__tests__/ESLintRulesOfHooks-test.js,19,3,22,"const allTests = { const onClick = useEffectEvent(() => { showNotification(theme); }); + // error message 1 const onClick2 = () => { onClick() }; + // error message 2 const onClick3 = useCallback(() => onClick() []); + // error message 3 + const onClick4 = onClick; return <> + {/** error message 4 */} + <Child onClick={onClick}></Child> <Child onClick={onClick2}></Child> <Child onClick={onClick3}></Child> </>; } ` + // Explicitly test error messages here for various cases errors: [ - useEffectEventError('onClick' true) - useEffectEventError('onClick' true) + `\`onClick\` is a function created with React Hook ""useEffectEvent"" and can only be called from ` + + 'Effects and Effect Events in the same component.' + `\`onClick\` is a function created with React Hook ""useEffectEvent"" and can only be called from ` + + 'Effects and Effect Events in the same component.' + `\`onClick\` is a function created with React Hook ""useEffectEvent"" and can only be called from ` + + `Effects and Effect Events in the same component. ` + + `It cannot be assigned to a variable or passed down.` + `\`onClick\` is a function created with React Hook ""useEffectEvent"" and can only be called from ` + + `Effects and Effect Events in the same component. ` + + `It cannot be assigned to a variable or passed down.` ] } ] function useEffectEventError(fn called) { return { message: `\`${fn}\` is a function created with React Hook ""useEffectEvent"" and can only be called from ` + - `the same component.${called ? '' : ' They cannot be assigned to variables or passed down.'}` + 'Effects and Effect Events in the same component.' + + (called ? '' : ' It cannot be assigned to a variable or passed down.') }; }"
facebook/react,67e24bc5279204108b749fe48b4d395ef9e49e67,Jack Pope,2025-10-01 19:17:08,"Improve lint error messages for useEffectEvent (#34669)  Called Before:  > `logEvent` is a function created with React Hook ""useEffectEvent""  and can only be called from the same component.  Called After:  > `logEvent` is a function created with React Hook ""useEffectEvent""  and can only be called from Effects and Effect Events in the same component.  Referenced Before:  > `logEvent` is a function created with React Hook ""useEffectEvent""  and can only be called from the same component. They cannot be assigned to variables or passed down.  Referenced After:  > `logEvent` is a function created with React Hook ""useEffectEvent""  and can only be called from Effects and Effect Events in the same component. It cannot be assigned to a variable or passed down.",packages/eslint-plugin-react-hooks/src/rules/RulesOfHooks.ts,14,8,22,"function isEffectIdentifier(node: Node additionalHooks?: RegExp): boolean { return false; } + function isUseEffectEventIdentifier(node: Node): boolean { return node.type === 'Identifier' && node.name === 'useEffectEvent'; } +function useEffectEventError(fn: string called: boolean): string { + return ( + `\`${fn}\` is a function created with React Hook ""useEffectEvent"" and can only be called from ` + + 'Effects and Effect Events in the same component.' + + (called ? '' : ' It cannot be assigned to a variable or passed down.') + ); +} + function isUseIdentifier(node: Node): boolean { return isReactFunction(node 'use'); } const rule = { // This identifier resolves to a useEffectEvent function but isn't being referenced in an // effect or another event function. It isn't being called either. if (lastEffect == null && useEffectEventFunctions.has(node)) { - const message = - `\`${getSourceCode().getText( - node - )}\` is a function created with React Hook ""useEffectEvent"" and can only be called from ` + - 'the same component.' + - (node.parent.type === 'CallExpression' - ? '' - : ' They cannot be assigned to variables or passed down.'); + const message = useEffectEventError( + getSourceCode().getText(node) + node.parent.type === 'CallExpression' + ); + context.report({ node message"
facebook/react,bbc2d596fa48b64d359b96e167403693caaaabd9,Sebastian Markbåge,2025-10-01 17:45:37,Traverse down an updated tree even if it has no passive effects in profiling mode (#34667)  We need this to be able to log the renders that happened inside.  This is the same thing we do here but for the offscreen special cases:   https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberCommitWork.js#L3452-L3457,packages/react-reconciler/src/ReactFiberCommitWork.js,20,3,23,function commitPassiveMountOnFiber( instance._visibility |= OffscreenPassiveEffectsConnected; const includeWorkInProgressEffects = - (finishedWork.subtreeFlags & PassiveMask) !== NoFlags; + (finishedWork.subtreeFlags & PassiveMask) !== NoFlags || + (enableProfilerTimer && + enableComponentPerformanceTrack && + finishedWork.actualDuration !== 0 && + (finishedWork.alternate === null || + finishedWork.alternate.child !== finishedWork.child)); recursivelyTraverseReconnectPassiveEffects( finishedRoot finishedWork function recursivelyTraverseReconnectPassiveEffects( // node was reused. const childShouldIncludeWorkInProgressEffects = includeWorkInProgressEffects && - (parentFiber.subtreeFlags & PassiveMask) !== NoFlags; + ((parentFiber.subtreeFlags & PassiveMask) !== NoFlags || + (enableProfilerTimer && + enableComponentPerformanceTrack && + parentFiber.actualDuration !== 0 && + (parentFiber.alternate === null || + parentFiber.alternate.child !== parentFiber.child))); // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic) let child = parentFiber.child; function recursivelyTraverseAtomicPassiveEffects( // pre-rendering. We call this function when traversing a hidden tree whose // regular effects are currently disconnected. // TODO: Add special flag for atomic effects - if (parentFiber.subtreeFlags & PassiveMask) { + if ( + parentFiber.subtreeFlags & PassiveMask || + (enableProfilerTimer && + enableComponentPerformanceTrack && + parentFiber.actualDuration !== 0 && + (parentFiber.alternate === null || + parentFiber.alternate.child !== parentFiber.child)) + ) { let child = parentFiber.child; while (child !== null) { if (enableProfilerTimer && enableComponentPerformanceTrack) {
actions/checkout,ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493,Salman Chishti,2025-08-13 12:57:25,Update README to include Node.js 24 support details and requirements (#2248)  * Update README to include Node.js 24 support details and requirements  * Update,README.md,7,2,9,# Checkout V5 -Checkout v5 now supports Node.js 24 +## What's new + +- Updated to the node24 runtime + - This requires a minimum Actions Runner version of [v2.327.1](https://github.com/actions/runner/releases/tag/v2.327.1) to run. + # Checkout V4 Please refer to the [release page](https://github.com/actions/checkout/releases/ # Scenarios - [Checkout V5](#checkout-v5) + - [What's new](#whats-new) - [Checkout V4](#checkout-v4) - [Note](#note) -- [What's new](#whats-new) +- [What's new](#whats-new-1) - [Usage](#usage) - [Scenarios](#scenarios) - [Fetch only the root files](#fetch-only-the-root-files)
actions/checkout,08c6903cd8c0fde910a37f88322edcfb5dd907a8,Salman Chishti,2025-08-11 12:35:28,Prepare v5.0.0 release (#2238),.github/workflows/update-main-version.yml,1,0,1,on: type: choice description: The major version to update options: + - v5 - v4 - v3 - v2
actions/checkout,08c6903cd8c0fde910a37f88322edcfb5dd907a8,Salman Chishti,2025-08-11 12:35:28,Prepare v5.0.0 release (#2238),CHANGELOG.md,4,0,4,# Changelog +## V5.0.0 +* Update actions checkout to use node 24 by @salmanmkc in https://github.com/actions/checkout/pull/2226 + + ## V4.3.0 * docs: update README.md by @motss in https://github.com/actions/checkout/pull/1971 * Add internal repos for checking out multiple repositories by @mouismail in https://github.com/actions/checkout/pull/1977
actions/checkout,08c6903cd8c0fde910a37f88322edcfb5dd907a8,Salman Chishti,2025-08-11 12:35:28,Prepare v5.0.0 release (#2238),package-lock.json,2,2,4,"{ ""name"": ""checkout"" - ""version"": ""4.3.0"" + ""version"": ""5.0.0"" ""lockfileVersion"": 3 ""requires"": true ""packages"": { """": { ""name"": ""checkout"" - ""version"": ""4.3.0"" + ""version"": ""5.0.0"" ""license"": ""MIT"" ""dependencies"": { ""@actions/core"": ""^1.10.1"""
actions/checkout,08c6903cd8c0fde910a37f88322edcfb5dd907a8,Salman Chishti,2025-08-11 12:35:28,Prepare v5.0.0 release (#2238),package.json,1,1,2,"{ ""name"": ""checkout"" - ""version"": ""4.3.0"" + ""version"": ""5.0.0"" ""description"": ""checkout action"" ""main"": ""lib/main.js"" ""scripts"": {"
actions/checkout,08c6903cd8c0fde910a37f88322edcfb5dd907a8,Salman Chishti,2025-08-11 12:35:28,Prepare v5.0.0 release (#2238),src/misc/generate-docs.ts,1,1,2,function updateUsage( } updateUsage( - 'actions/checkout@v4' + 'actions/checkout@v5' path.join(__dirname '..' '..' 'action.yml') path.join(__dirname '..' '..' 'README.md') )
actions/checkout,9f265659d3bb64ab1440b03b12f4d47a24320917,Salman Chishti,2025-08-11 10:52:51,Update actions checkout to use node 24 (#2226)  * use node 24  * update other parts to node 24  * bump to major version  audit fix  changelog  * update licenses  * update dist  * update major version  * will do separate pr for v5 and will do a minor version for previous changes,.github/workflows/check-dist.yml,2,2,4,jobs: steps: - uses: actions/checkout@v4.1.6 - - name: Set Node.js 20.x + - name: Set Node.js 24.x uses: actions/setup-node@v4 with: - node-version: 20.x + node-version: 24.x - name: Install dependencies run: npm ci
actions/checkout,9f265659d3bb64ab1440b03b12f4d47a24320917,Salman Chishti,2025-08-11 10:52:51,Update actions checkout to use node 24 (#2226)  * use node 24  * update other parts to node 24  * bump to major version  audit fix  changelog  * update licenses  * update dist  * update major version  * will do separate pr for v5 and will do a minor version for previous changes,.github/workflows/test.yml,1,1,2,jobs: steps: - uses: actions/setup-node@v4 with: - node-version: 20.x + node-version: 24.x - uses: actions/checkout@v4.1.6 - run: npm ci - run: npm run build
actions/checkout,9f265659d3bb64ab1440b03b12f4d47a24320917,Salman Chishti,2025-08-11 10:52:51,Update actions checkout to use node 24 (#2226)  * use node 24  * update other parts to node 24  * bump to major version  audit fix  changelog  * update licenses  * update dist  * update major version  * will do separate pr for v5 and will do a minor version for previous changes,action.yml,1,1,2,outputs: commit: description: 'The commit SHA that was checked out' runs: - using: node20 + using: node24 main: dist/index.js post: dist/index.js
actions/checkout,9f265659d3bb64ab1440b03b12f4d47a24320917,Salman Chishti,2025-08-11 10:52:51,Update actions checkout to use node 24 (#2226)  * use node 24  * update other parts to node 24  * bump to major version  audit fix  changelog  * update licenses  * update dist  * update major version  * will do separate pr for v5 and will do a minor version for previous changes,package-lock.json,8,8,16,"} ""devDependencies"": { ""@types/jest"": ""^29.5.12"" - ""@types/node"": ""^20.12.12"" + ""@types/node"": ""^24.1.0"" ""@types/uuid"": ""^9.0.8"" ""@typescript-eslint/eslint-plugin"": ""^7.9.0"" ""@typescript-eslint/parser"": ""^7.9.0"" ""dev"": true } ""node_modules/@types/node"": { - ""version"": ""20.12.12"" - ""resolved"": ""https://registry.npmjs.org/@types/node/-/node-20.12.12.tgz"" - ""integrity"": ""sha512-eWLDGF/FOSPtAvEqeRAQ4C8LSA7M1I7i0ky1I8U7kD1J5ITyW3AsRhQrKVoWf5pFKZ2kILsEGJhsI9r93PYnOw=="" + ""version"": ""24.1.0"" + ""resolved"": ""https://registry.npmjs.org/@types/node/-/node-24.1.0.tgz"" + ""integrity"": ""sha512-ut5FthK5moxFKH2T1CUOC6ctR67rQRvvHdFLCD2Ql6KXmMuCrjsSsRI9UsLCm9M18BMwClv4pn327UvB7eeO1w=="" ""dev"": true ""dependencies"": { - ""undici-types"": ""~5.26.4"" + ""undici-types"": ""~7.8.0"" } } ""node_modules/@types/stack-utils"": { } } ""node_modules/undici-types"": { - ""version"": ""5.26.5"" - ""resolved"": ""https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz"" - ""integrity"": ""sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA=="" + ""version"": ""7.8.0"" + ""resolved"": ""https://registry.npmjs.org/undici-types/-/undici-types-7.8.0.tgz"" + ""integrity"": ""sha512-9UJ2xGDvQ43tYyVMpuHlsgApydB8ZKfVYTsLDhXkFL/6gfkp+U8xTGdh8pMJv1SpZna0zxG1DwsKZsreLbXBxw=="" ""dev"": true } ""node_modules/universal-user-agent"": {"
actions/checkout,9f265659d3bb64ab1440b03b12f4d47a24320917,Salman Chishti,2025-08-11 10:52:51,Update actions checkout to use node 24 (#2226)  * use node 24  * update other parts to node 24  * bump to major version  audit fix  changelog  * update licenses  * update dist  * update major version  * will do separate pr for v5 and will do a minor version for previous changes,package.json,1,1,2,"} ""devDependencies"": { ""@types/jest"": ""^29.5.12"" - ""@types/node"": ""^20.12.12"" + ""@types/node"": ""^24.1.0"" ""@types/uuid"": ""^9.0.8"" ""@typescript-eslint/eslint-plugin"": ""^7.9.0"" ""@typescript-eslint/parser"": ""^7.9.0"""
actions/checkout,08eba0b27e820071cde6df949e0beb9ba4906955,Salman Chishti,2025-08-11 10:30:37,Prepare release v4.3.0 (#2237),CHANGELOG.md,9,0,9,# Changelog +## V4.3.0 +* docs: update README.md by @motss in https://github.com/actions/checkout/pull/1971 +* Add internal repos for checking out multiple repositories by @mouismail in https://github.com/actions/checkout/pull/1977 +* Documentation update - add recommended permissions to Readme by @benwells in https://github.com/actions/checkout/pull/2043 +* Adjust positioning of user email note and permissions heading by @joshmgross in https://github.com/actions/checkout/pull/2044 +* Update README.md by @nebuk89 in https://github.com/actions/checkout/pull/2194 +* Update CODEOWNERS for actions by @TingluoHuang in https://github.com/actions/checkout/pull/2224 +* Update package dependencies by @salmanmkc in https://github.com/actions/checkout/pull/2236 + ## v4.2.2 * `url-helper.ts` now leverages well-known environment variables by @jww3 in https://github.com/actions/checkout/pull/1941 * Expand unit test coverage for `isGhes` by @jww3 in https://github.com/actions/checkout/pull/1946
actions/checkout,08eba0b27e820071cde6df949e0beb9ba4906955,Salman Chishti,2025-08-11 10:30:37,Prepare release v4.3.0 (#2237),package-lock.json,2,2,4,"{ ""name"": ""checkout"" - ""version"": ""4.2.2"" + ""version"": ""4.3.0"" ""lockfileVersion"": 3 ""requires"": true ""packages"": { """": { ""name"": ""checkout"" - ""version"": ""4.2.2"" + ""version"": ""4.3.0"" ""license"": ""MIT"" ""dependencies"": { ""@actions/core"": ""^1.10.1"""
actions/checkout,08eba0b27e820071cde6df949e0beb9ba4906955,Salman Chishti,2025-08-11 10:30:37,Prepare release v4.3.0 (#2237),package.json,1,1,2,"{ ""name"": ""checkout"" - ""version"": ""4.2.2"" + ""version"": ""4.3.0"" ""description"": ""checkout action"" ""main"": ""lib/main.js"" ""scripts"": {"
actions/checkout,631c7dc4f80f88219c5ee78fee08c6b62fac8da1,Salman Chishti,2025-08-11 10:22:41,Update package dependencies (#2236)  * package updates  * update dist  * Update license files,.licenses/npm/@octokit/endpoint.dep.yml,2,2,4,"--- name: ""@octokit/endpoint"" -version: 9.0.5 +version: 9.0.6 type: npm summary: Turns REST API endpoints into generic request options -homepage: +homepage: license: mit licenses: - sources: LICENSE"
actions/checkout,631c7dc4f80f88219c5ee78fee08c6b62fac8da1,Salman Chishti,2025-08-11 10:22:41,Update package dependencies (#2236)  * package updates  * update dist  * Update license files,.licenses/npm/@octokit/plugin-paginate-rest.dep.yml,2,2,4,"--- name: ""@octokit/plugin-paginate-rest"" -version: 9.2.1 +version: 9.2.2 type: npm summary: Octokit plugin to paginate REST API endpoint responses -homepage: +homepage: license: mit licenses: - sources: LICENSE"
actions/checkout,631c7dc4f80f88219c5ee78fee08c6b62fac8da1,Salman Chishti,2025-08-11 10:22:41,Update package dependencies (#2236)  * package updates  * update dist  * Update license files,.licenses/npm/@octokit/request-error.dep.yml,2,2,4,"--- name: ""@octokit/request-error"" -version: 5.1.0 +version: 5.1.1 type: npm summary: Error class for Octokit request errors -homepage: +homepage: license: mit licenses: - sources: LICENSE"
actions/checkout,631c7dc4f80f88219c5ee78fee08c6b62fac8da1,Salman Chishti,2025-08-11 10:22:41,Update package dependencies (#2236)  * package updates  * update dist  * Update license files,.licenses/npm/@octokit/request.dep.yml,2,2,4,"--- name: ""@octokit/request"" -version: 8.4.0 +version: 8.4.1 type: npm summary: Send parameterized requests to GitHub's APIs with sensible defaults in browsers and Node -homepage: +homepage: license: mit licenses: - sources: LICENSE"
actions/checkout,631c7dc4f80f88219c5ee78fee08c6b62fac8da1,Salman Chishti,2025-08-11 10:22:41,Update package dependencies (#2236)  * package updates  * update dist  * Update license files,.licenses/npm/undici.dep.yml,1,1,2,--- name: undici -version: 5.28.4 +version: 5.29.0 type: npm summary: An HTTP/1.1 client written from scratch for Node.js homepage: https://undici.nodejs.org
actions/checkout,8edcb1bdb4e267140fa742c62e395cd74f332709,Tingluo Huang,2025-07-23 13:20:20,Update CODEOWNERS for actions (#2224),CODEOWNERS,1,1,2,-* @actions/actions-launch +* @actions/actions-runtime
actions/checkout,09d2acae674a48949e3602304ab46fd20ae0c42f,Ben De St Paer-Gotch,2025-06-06 08:19:16,Update README.md (#2194),README.md,18,0,18,The auth token is persisted in the local git config. This enables your scripts t When Git 2.18 or higher is not in your PATH falls back to the REST API to download the files. +### Note + +Thank you for your interest in this GitHub action however right now we are not taking contributions. + +We continue to focus our resources on strategic areas that help our customers be successful while making developers' lives easier. While GitHub Actions remains a key part of this vision we are allocating resources towards other areas of Actions and are not taking contributions to this repository at this time. The GitHub public roadmap is the best place to follow along for any updates on features we’re working on and what stage they’re in. + +We are taking the following steps to better direct requests related to GitHub Actions including: + +1. We will be directing questions and support requests to our [Community Discussions area](https://github.com/orgs/community/discussions/categories/actions) + +2. High Priority bugs can be reported through Community Discussions or you can report these to our support team https://support.github.com/contact/bug-report. + +3. Security Issues should be handled as per our [security.md](security.md) + +We will still provide security updates for this project and fix major breaking changes during this time. + +You are welcome to still raise bugs in this repo. + # What's new Please refer to the [release page](https://github.com/actions/checkout/releases/latest) for the latest release notes.
actions/checkout,85e6279cec87321a52edac9c87bce653a07cf6c2,Josh Gross,2025-01-16 20:56:18,Adjust positioning of user email note and permissions heading (#2044),README.md,3,4,7,jobs: git push ``` -## Recommended permissions +*NOTE:* The user email is `{user.id}+{user.login}@users.noreply.github.com`. See users API: https://api.github.com/users/github-actions%5Bbot%5D + +# Recommended permissions When using the `checkout` action in your GitHub Actions workflow it is recommended to set the following `GITHUB_TOKEN` permissions to ensure proper functionality unless alternative auth is provided via the `token` or `ssh-key` inputs: permissions: contents: read ``` -*NOTE:* The user email is `{user.id}+{user.login}@users.noreply.github.com`. See users API: https://api.github.com/users/github-actions%5Bbot%5D - - # License The scripts and documentation in this project are released under the [MIT License](LICENSE)
actions/checkout,009b9ae9e446ad8d9b8c809870b0fbcc5e03573e,Ben Wells,2025-01-16 19:14:48,"Documentation update - add recommended permissions to Readme (#2043)  * Update README.md  * Update README.md  Co-authored-by: Josh Gross <joshmgross@github.com>  ---------  Co-authored-by: Josh Gross <joshmgross@github.com>",README.md,10,0,10,"jobs: git commit -m ""generated"" git push ``` + +## Recommended permissions + +When using the `checkout` action in your GitHub Actions workflow it is recommended to set the following `GITHUB_TOKEN` permissions to ensure proper functionality unless alternative auth is provided via the `token` or `ssh-key` inputs: + +```yaml +permissions: + contents: read +``` + *NOTE:* The user email is `{user.id}+{user.login}@users.noreply.github.com`. See users API: https://api.github.com/users/github-actions%5Bbot%5D"
actions/checkout,cbb722410c2e876e24abbe8de2cc27693e501dcb,Mohammad Ismail,2024-11-14 15:41:00,Update README.md (#1977),README.md,2,2,4,Please refer to the [release page](https://github.com/actions/checkout/releases/ repository: my-org/my-tools path: my-tools ``` -> - If your secondary repository is private you will need to add the option noted in [Checkout multiple repos (private)](#Checkout-multiple-repos-private) +> - If your secondary repository is private or internal you will need to add the option noted in [Checkout multiple repos (private)](#Checkout-multiple-repos-private) ## Checkout multiple repos (nested) Please refer to the [release page](https://github.com/actions/checkout/releases/ repository: my-org/my-tools path: my-tools ``` -> - If your secondary repository is private you will need to add the option noted in [Checkout multiple repos (private)](#Checkout-multiple-repos-private) +> - If your secondary repository is private or internal you will need to add the option noted in [Checkout multiple repos (private)](#Checkout-multiple-repos-private) ## Checkout multiple repos (private)
actions/checkout,3b9b8c884f6b4bb4d5be2779c26374abadae0871,The web walker,2024-11-08 15:32:54,docs: update README.md (#1971)  Add a scenario where it is necessary to push a commit to a pull request.,README.md,26,0,26,"Please refer to the [release page](https://github.com/actions/checkout/releases/ - [Checkout pull request HEAD commit instead of merge commit](#Checkout-pull-request-HEAD-commit-instead-of-merge-commit) - [Checkout pull request on closed event](#Checkout-pull-request-on-closed-event) - [Push a commit using the built-in token](#Push-a-commit-using-the-built-in-token) +- [Push a commit to a PR using the built-in token](#Push-a-commit-to-a-PR-using-the-built-in-token) ## Fetch only the root files jobs: ``` *NOTE:* The user email is `{user.id}+{user.login}@users.noreply.github.com`. See users API: https://api.github.com/users/github-actions%5Bbot%5D +## Push a commit to a PR using the built-in token + +In a pull request trigger `ref` is required as GitHub Actions checks out in detached HEAD mode meaning it doesn’t check out your branch by default. + +```yaml +on: pull_request +jobs: + build: + runs-on: ubuntu-latest + steps: + - uses: actions/checkout@v4 + with: + ref: ${{ github.head_ref }} + - run: | + date > generated.txt + # Note: the following account information will not work on GHES + git config user.name ""github-actions[bot]"" + git config user.email ""41898282+github-actions[bot]@users.noreply.github.com"" + git add . + git commit -m ""generated"" + git push +``` +*NOTE:* The user email is `{user.id}+{user.login}@users.noreply.github.com`. See users API: https://api.github.com/users/github-actions%5Bbot%5D + + # License The scripts and documentation in this project are released under the [MIT License](LICENSE)"
actions/checkout,11bd71901bbe5b1630ceea73d27597364c9af683,John Wesley Walker III,2024-10-23 14:24:28,Prepare 4.2.2 Release (#1953)  * Prepare 4.2.2 Release  ---------  Co-authored-by: Josh Gross <joshmgross@github.com>,CHANGELOG.md,4,0,4,# Changelog +## v4.2.2 +* `url-helper.ts` now leverages well-known environment variables by @jww3 in https://github.com/actions/checkout/pull/1941 +* Expand unit test coverage for `isGhes` by @jww3 in https://github.com/actions/checkout/pull/1946 + ## v4.2.1 * Check out other refs/* by commit if provided fall back to ref by @orhantoy in https://github.com/actions/checkout/pull/1924
actions/checkout,11bd71901bbe5b1630ceea73d27597364c9af683,John Wesley Walker III,2024-10-23 14:24:28,Prepare 4.2.2 Release (#1953)  * Prepare 4.2.2 Release  ---------  Co-authored-by: Josh Gross <joshmgross@github.com>,package-lock.json,2,2,4,"{ ""name"": ""checkout"" - ""version"": ""4.2.1"" + ""version"": ""4.2.2"" ""lockfileVersion"": 3 ""requires"": true ""packages"": { """": { ""name"": ""checkout"" - ""version"": ""4.2.1"" + ""version"": ""4.2.2"" ""license"": ""MIT"" ""dependencies"": { ""@actions/core"": ""^1.10.1"""
actions/checkout,11bd71901bbe5b1630ceea73d27597364c9af683,John Wesley Walker III,2024-10-23 14:24:28,Prepare 4.2.2 Release (#1953)  * Prepare 4.2.2 Release  ---------  Co-authored-by: Josh Gross <joshmgross@github.com>,package.json,1,1,2,"{ ""name"": ""checkout"" - ""version"": ""4.2.1"" + ""version"": ""4.2.2"" ""description"": ""checkout action"" ""main"": ""lib/main.js"" ""scripts"": {"
actions/checkout,e3d2460bbb42d7710191569f88069044cfb9d8cf,John Wesley Walker III,2024-10-23 13:59:08,Expand unit test coverage (#1946),__test__/url-helper.test.ts,37,0,37,describe('getServerUrl tests' () => { }) describe('isGhes tests' () => { + const pristineEnv = process.env + + beforeEach(() => { + jest.resetModules() + process.env = {...pristineEnv} + }) + + afterAll(() => { + process.env = pristineEnv + }) + it('basics' async () => { + delete process.env['GITHUB_SERVER_URL'] expect(urlHelper.isGhes()).toBeFalsy() expect(urlHelper.isGhes('https://github.com')).toBeFalsy() expect(urlHelper.isGhes('https://contoso.ghe.com')).toBeFalsy() expect(urlHelper.isGhes('https://test.github.localhost')).toBeFalsy() expect(urlHelper.isGhes('https://src.onpremise.fabrikam.com')).toBeTruthy() }) + + it('returns false when the GITHUB_SERVER_URL environment variable is not defined' async () => { + delete process.env['GITHUB_SERVER_URL'] + expect(urlHelper.isGhes()).toBeFalsy() + }) + + it('returns false when the GITHUB_SERVER_URL environment variable is set to github.com' async () => { + process.env['GITHUB_SERVER_URL'] = 'https://github.com' + expect(urlHelper.isGhes()).toBeFalsy() + }) + + it('returns false when the GITHUB_SERVER_URL environment variable is set to a GitHub Enterprise Cloud-style URL' async () => { + process.env['GITHUB_SERVER_URL'] = 'https://contoso.ghe.com' + expect(urlHelper.isGhes()).toBeFalsy() + }) + + it('returns false when the GITHUB_SERVER_URL environment variable has a .localhost suffix' async () => { + process.env['GITHUB_SERVER_URL'] = 'https://mock-github.localhost' + expect(urlHelper.isGhes()).toBeFalsy() + }) + + it('returns true when the GITHUB_SERVER_URL environment variable is set to some other URL' async () => { + process.env['GITHUB_SERVER_URL'] = 'https://src.onpremise.fabrikam.com' + expect(urlHelper.isGhes()).toBeTruthy() + }) }) describe('getServerApiUrl tests' () => {
actions/checkout,163217dfcd28294438ea1c1c149cfaf66eec283e,John Wesley Walker III,2024-10-18 08:07:17,`url-helper.ts` now leverages well-known environment variables. (#1941)  * `utl-helper.ts` now leverages well-known environment variables.  --------- Co-authored-by: Erez Testiler <easyt@github.com>,__test__/url-helper.test.ts,55,0,55,+import * as urlHelper from '../src/url-helper' + +describe('getServerUrl tests' () => { + it('basics' async () => { + // Note that URL::toString will append a trailing / when passed just a domain name ... + expect(urlHelper.getServerUrl().toString()).toBe('https://github.com/') + expect(urlHelper.getServerUrl(' ').toString()).toBe('https://github.com/') + expect(urlHelper.getServerUrl(' ').toString()).toBe('https://github.com/') + expect(urlHelper.getServerUrl('http://contoso.com').toString()).toBe( + 'http://contoso.com/' + ) + expect(urlHelper.getServerUrl('https://contoso.com').toString()).toBe( + 'https://contoso.com/' + ) + expect(urlHelper.getServerUrl('https://contoso.com/').toString()).toBe( + 'https://contoso.com/' + ) + + // ... but can't make that same assumption when passed an URL that includes some deeper path. + expect(urlHelper.getServerUrl('https://contoso.com/a/b').toString()).toBe( + 'https://contoso.com/a/b' + ) + }) +}) + +describe('isGhes tests' () => { + it('basics' async () => { + expect(urlHelper.isGhes()).toBeFalsy() + expect(urlHelper.isGhes('https://github.com')).toBeFalsy() + expect(urlHelper.isGhes('https://contoso.ghe.com')).toBeFalsy() + expect(urlHelper.isGhes('https://test.github.localhost')).toBeFalsy() + expect(urlHelper.isGhes('https://src.onpremise.fabrikam.com')).toBeTruthy() + }) +}) + +describe('getServerApiUrl tests' () => { + it('basics' async () => { + expect(urlHelper.getServerApiUrl()).toBe('https://api.github.com') + expect(urlHelper.getServerApiUrl('https://github.com')).toBe( + 'https://api.github.com' + ) + expect(urlHelper.getServerApiUrl('https://GitHub.com')).toBe( + 'https://api.github.com' + ) + expect(urlHelper.getServerApiUrl('https://contoso.ghe.com')).toBe( + 'https://api.contoso.ghe.com' + ) + expect(urlHelper.getServerApiUrl('https://fabrikam.GHE.COM')).toBe( + 'https://api.fabrikam.ghe.com' + ) + expect( + urlHelper.getServerApiUrl('https://src.onpremise.fabrikam.com') + ).toBe('https://src.onpremise.fabrikam.com/api/v3') + }) +})
actions/checkout,163217dfcd28294438ea1c1c149cfaf66eec283e,John Wesley Walker III,2024-10-18 08:07:17,`url-helper.ts` now leverages well-known environment variables. (#1941)  * `utl-helper.ts` now leverages well-known environment variables.  --------- Co-authored-by: Erez Testiler <easyt@github.com>,dist/index.js,39,11,50,"function getFetchUrl(settings) { return `${serviceUrl.origin}/${encodedOwner}/${encodedName}`; } function getServerUrl(url) { - let urlValue = url && url.trim().length > 0 - ? url - : process.env['GITHUB_SERVER_URL'] || 'https://github.com'; - return new url_1.URL(urlValue); + let resolvedUrl = process.env['GITHUB_SERVER_URL'] || 'https://github.com'; + if (hasContent(url WhitespaceMode.Trim)) { + resolvedUrl = url; + } + return new url_1.URL(resolvedUrl); } function getServerApiUrl(url) { - let apiUrl = 'https://api.github.com'; - if (isGhes(url)) { - const serverUrl = getServerUrl(url); - apiUrl = new url_1.URL(`${serverUrl.origin}/api/v3`).toString(); + if (hasContent(url WhitespaceMode.Trim)) { + let serverUrl = getServerUrl(url); + if (isGhes(url)) { + serverUrl.pathname = 'api/v3'; + } + else { + serverUrl.hostname = 'api.' + serverUrl.hostname; + } + return pruneSuffix(serverUrl.toString() '/'); } - return apiUrl; + return process.env['GITHUB_API_URL'] || 'https://api.github.com'; } function isGhes(url) { - const ghUrl = getServerUrl(url); - return ghUrl.hostname.toUpperCase() !== 'GITHUB.COM'; + const ghUrl = new url_1.URL(url || process.env['GITHUB_SERVER_URL'] || 'https://github.com'); + const hostname = ghUrl.hostname.trimEnd().toUpperCase(); + const isGitHubHost = hostname === 'GITHUB.COM'; + const isGitHubEnterpriseCloudHost = hostname.endsWith('.GHE.COM'); + const isLocalHost = hostname.endsWith('.LOCALHOST'); + return !isGitHubHost && !isGitHubEnterpriseCloudHost && !isLocalHost; +} +function pruneSuffix(text suffix) { + if (hasContent(suffix WhitespaceMode.Preserve) && (text === null || text === void 0 ? void 0 : text.endsWith(suffix))) { + return text.substring(0 text.length - suffix.length); + } + return text; +} +var WhitespaceMode; +(function (WhitespaceMode) { + WhitespaceMode[WhitespaceMode[""Trim""] = 0] = ""Trim""; + WhitespaceMode[WhitespaceMode[""Preserve""] = 1] = ""Preserve""; +})(WhitespaceMode || (WhitespaceMode = {})); +function hasContent(text whitespaceMode) { + let refinedText = text !== null && text !== void 0 ? text : ''; + if (whitespaceMode == WhitespaceMode.Trim) { + refinedText = refinedText.trim(); + } + return refinedText.length > 0; }"
actions/checkout,163217dfcd28294438ea1c1c149cfaf66eec283e,John Wesley Walker III,2024-10-18 08:07:17,`url-helper.ts` now leverages well-known environment variables. (#1941)  * `utl-helper.ts` now leverages well-known environment variables.  --------- Co-authored-by: Erez Testiler <easyt@github.com>,src/url-helper.ts,47,12,59,export function getFetchUrl(settings: IGitSourceSettings): string { } export function getServerUrl(url?: string): URL { - let urlValue = - url && url.trim().length > 0 - ? url - : process.env['GITHUB_SERVER_URL'] || 'https://github.com' - return new URL(urlValue) + let resolvedUrl = process.env['GITHUB_SERVER_URL'] || 'https://github.com' + if (hasContent(url WhitespaceMode.Trim)) { + resolvedUrl = url! + } + + return new URL(resolvedUrl) } export function getServerApiUrl(url?: string): string { - let apiUrl = 'https://api.github.com' + if (hasContent(url WhitespaceMode.Trim)) { + let serverUrl = getServerUrl(url) + if (isGhes(url)) { + serverUrl.pathname = 'api/v3' + } else { + serverUrl.hostname = 'api.' + serverUrl.hostname + } - if (isGhes(url)) { - const serverUrl = getServerUrl(url) - apiUrl = new URL(`${serverUrl.origin}/api/v3`).toString() + return pruneSuffix(serverUrl.toString() '/') } - return apiUrl + return process.env['GITHUB_API_URL'] || 'https://api.github.com' } export function isGhes(url?: string): boolean { - const ghUrl = getServerUrl(url) + const ghUrl = new URL( + url || process.env['GITHUB_SERVER_URL'] || 'https://github.com' + ) + + const hostname = ghUrl.hostname.trimEnd().toUpperCase() + const isGitHubHost = hostname === 'GITHUB.COM' + const isGitHubEnterpriseCloudHost = hostname.endsWith('.GHE.COM') + const isLocalHost = hostname.endsWith('.LOCALHOST') + + return !isGitHubHost && !isGitHubEnterpriseCloudHost && !isLocalHost +} - return ghUrl.hostname.toUpperCase() !== 'GITHUB.COM' +function pruneSuffix(text: string suffix: string) { + if (hasContent(suffix WhitespaceMode.Preserve) && text?.endsWith(suffix)) { + return text.substring(0 text.length - suffix.length) + } + return text +} + +enum WhitespaceMode { + Trim + Preserve +} + +function hasContent( + text: string | undefined + whitespaceMode: WhitespaceMode +): boolean { + let refinedText = text ?? '' + if (whitespaceMode == WhitespaceMode.Trim) { + refinedText = refinedText.trim() + } + return refinedText.length > 0 }
actions/checkout,eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871,Josh Gross,2024-10-07 16:38:04,Prepare 4.2.1 release (#1925),CHANGELOG.md,3,0,3,# Changelog +## v4.2.1 +* Check out other refs/* by commit if provided fall back to ref by @orhantoy in https://github.com/actions/checkout/pull/1924 + ## v4.2.0 * Add Ref and Commit outputs by @lucacome in https://github.com/actions/checkout/pull/1180
actions/checkout,eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871,Josh Gross,2024-10-07 16:38:04,Prepare 4.2.1 release (#1925),package-lock.json,2,2,4,"{ ""name"": ""checkout"" - ""version"": ""4.2.0"" + ""version"": ""4.2.1"" ""lockfileVersion"": 3 ""requires"": true ""packages"": { """": { ""name"": ""checkout"" - ""version"": ""4.2.0"" + ""version"": ""4.2.1"" ""license"": ""MIT"" ""dependencies"": { ""@actions/core"": ""^1.10.1"""
actions/checkout,eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871,Josh Gross,2024-10-07 16:38:04,Prepare 4.2.1 release (#1925),package.json,1,1,2,"{ ""name"": ""checkout"" - ""version"": ""4.2.0"" + ""version"": ""4.2.1"" ""description"": ""checkout action"" ""main"": ""lib/main.js"" ""scripts"": {"
actions/checkout,6b42224f41ee5dfe5395e27c8b2746f1f9955030,Joel Ambass,2024-10-03 09:03:35,"Add workflow file for publishing releases to immutable action package (#1919)  This workflow file publishes new action releases to the immutable action package of the same name as this repo.  This is part of the Immutable Actions project which is not yet fully released to the public. First party actions like this one are part of our initial testing of this feature.",.github/workflows/publish-immutable-actions.yml,20,0,20,+name: 'Publish Immutable Action Version' + +on: + release: + types: [published] + +jobs: + publish: + runs-on: ubuntu-latest + permissions: + contents: read + id-token: write + packages: write + + steps: + - name: Checking out + uses: actions/checkout@v4 + - name: Publish + id: publish + uses: actions/publish-immutable-action@0.0.3
actions/checkout,de5a000abf73b6f4965bd1bcdf8f8d94a56ea815,Orhan Toy,2024-10-02 00:24:28,Check out other refs/* by commit if provided  fall back to ref (#1924),__test__/ref-helper.test.ts,10,0,10,describe('ref-helper tests' () => { expect(checkoutInfo.startPoint).toBeFalsy() }) + it('getCheckoutInfo refs/ without commit' async () => { + const checkoutInfo = await refHelper.getCheckoutInfo( + git + 'refs/non-standard-ref' + '' + ) + expect(checkoutInfo.ref).toBe('refs/non-standard-ref') + expect(checkoutInfo.startPoint).toBeFalsy() + }) + it('getCheckoutInfo unqualified branch only' async () => { git.branchExists = jest.fn(async (remote: boolean pattern: string) => { return true
actions/checkout,de5a000abf73b6f4965bd1bcdf8f8d94a56ea815,Orhan Toy,2024-10-02 00:24:28,Check out other refs/* by commit if provided  fall back to ref (#1924),dist/index.js,2,2,4,function getCheckoutInfo(git ref commit) { result.ref = ref; } // refs/ - else if (upperRef.startsWith('REFS/') && commit) { - result.ref = commit; + else if (upperRef.startsWith('REFS/')) { + result.ref = commit ? commit : ref; } // Unqualified ref check for a matching branch or tag else {
actions/checkout,de5a000abf73b6f4965bd1bcdf8f8d94a56ea815,Orhan Toy,2024-10-02 00:24:28,Check out other refs/* by commit if provided  fall back to ref (#1924),src/ref-helper.ts,2,2,4,export async function getCheckoutInfo( result.ref = ref } // refs/ - else if (upperRef.startsWith('REFS/') && commit) { - result.ref = commit + else if (upperRef.startsWith('REFS/')) { + result.ref = commit ? commit : ref } // Unqualified ref check for a matching branch or tag else {
actions/checkout,d632683dd7b4114ad314bca15554477dd762a938,Josh Gross,2024-09-25 17:51:15,Prepare 4.2.0 release (#1878)  * Bump package version to 4.1.8  * Add v4.1.8 changelog  * Bump version to `4.2.0`,CHANGELOG.md,5,0,5,# Changelog +## v4.2.0 + +* Add Ref and Commit outputs by @lucacome in https://github.com/actions/checkout/pull/1180 +* Dependency updates by @dependabot- https://github.com/actions/checkout/pull/1777 https://github.com/actions/checkout/pull/1872 + ## v4.1.7 * Bump the minor-npm-dependencies group across 1 directory with 4 updates by @dependabot in https://github.com/actions/checkout/pull/1739 * Bump actions/checkout from 3 to 4 by @dependabot in https://github.com/actions/checkout/pull/1697
actions/checkout,d632683dd7b4114ad314bca15554477dd762a938,Josh Gross,2024-09-25 17:51:15,Prepare 4.2.0 release (#1878)  * Bump package version to 4.1.8  * Add v4.1.8 changelog  * Bump version to `4.2.0`,package-lock.json,2,2,4,"{ ""name"": ""checkout"" - ""version"": ""4.1.7"" + ""version"": ""4.2.0"" ""lockfileVersion"": 3 ""requires"": true ""packages"": { """": { ""name"": ""checkout"" - ""version"": ""4.1.7"" + ""version"": ""4.2.0"" ""license"": ""MIT"" ""dependencies"": { ""@actions/core"": ""^1.10.1"""
actions/checkout,d632683dd7b4114ad314bca15554477dd762a938,Josh Gross,2024-09-25 17:51:15,Prepare 4.2.0 release (#1878)  * Bump package version to 4.1.8  * Add v4.1.8 changelog  * Bump version to `4.2.0`,package.json,1,1,2,"{ ""name"": ""checkout"" - ""version"": ""4.1.7"" + ""version"": ""4.2.0"" ""description"": ""checkout action"" ""main"": ""lib/main.js"" ""scripts"": {"
actions/checkout,6d193bf28034eafb982f37bd894289fe649468fc,dependabot[bot],2024-09-05 19:04:42,Bump braces from 3.0.2 to 3.0.3 (#1777)  Bumps [braces](https://github.com/micromatch/braces) from 3.0.2 to 3.0.3. - [Changelog](https://github.com/micromatch/braces/blob/master/CHANGELOG.md) - [Commits](https://github.com/micromatch/braces/compare/3.0.2...3.0.3)  --- updated-dependencies: - dependency-name: braces   dependency-type: indirect ...  Signed-off-by: dependabot[bot] <support@github.com> Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>,package-lock.json,7,7,14,"} } ""node_modules/braces"": { - ""version"": ""3.0.2"" - ""resolved"": ""https://registry.npmjs.org/braces/-/braces-3.0.2.tgz"" - ""integrity"": ""sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A=="" + ""version"": ""3.0.3"" + ""resolved"": ""https://registry.npmjs.org/braces/-/braces-3.0.3.tgz"" + ""integrity"": ""sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA=="" ""dev"": true ""dependencies"": { - ""fill-range"": ""^7.0.1"" + ""fill-range"": ""^7.1.1"" } ""engines"": { ""node"": "">=8"" } } ""node_modules/fill-range"": { - ""version"": ""7.0.1"" - ""resolved"": ""https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz"" - ""integrity"": ""sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ=="" + ""version"": ""7.1.1"" + ""resolved"": ""https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz"" + ""integrity"": ""sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg=="" ""dev"": true ""dependencies"": { ""to-regex-range"": ""^5.0.1"""
actions/checkout,db0cee9a514becbbd4a101a5fbbbf47865ee316c,dependabot[bot],2024-09-05 19:04:17,Bump the minor-npm-dependencies group across 1 directory with 4 updates (#1872)  * Bump the minor-npm-dependencies group across 1 directory with 4 updates  Bumps the minor-npm-dependencies group with 4 updates in the / directory: [eslint-plugin-jest](https://github.com/jest-community/eslint-plugin-jest)  [prettier](https://github.com/prettier/prettier)  [ts-jest](https://github.com/kulshekhar/ts-jest) and [typescript](https://github.com/Microsoft/TypeScript).   Updates `eslint-plugin-jest` from 28.5.0 to 28.8.2 - [Release notes](https://github.com/jest-community/eslint-plugin-jest/releases) - [Changelog](https://github.com/jest-community/eslint-plugin-jest/blob/main/CHANGELOG.md) - [Commits](https://github.com/jest-community/eslint-plugin-jest/compare/v28.5.0...v28.8.2)  Updates `prettier` from 3.2.5 to 3.3.3 - [Release notes](https://github.com/prettier/prettier/releases) - [Changelog](https://github.com/prettier/prettier/blob/main/CHANGELOG.md) - [Commits](https://github.com/prettier/prettier/compare/3.2.5...3.3.3)  Updates `ts-jest` from 29.1.2 to 29.2.5 - [Release notes](https://github.com/kulshekhar/ts-jest/releases) - [Changelog](https://github.com/kulshekhar/ts-jest/blob/main/CHANGELOG.md) - [Commits](https://github.com/kulshekhar/ts-jest/compare/v29.1.2...v29.2.5)  Updates `typescript` from 5.4.5 to 5.5.4 - [Release notes](https://github.com/Microsoft/TypeScript/releases) - [Changelog](https://github.com/microsoft/TypeScript/blob/main/azure-pipelines.release.yml) - [Commits](https://github.com/Microsoft/TypeScript/compare/v5.4.5...v5.5.4)  --- updated-dependencies: - dependency-name: eslint-plugin-jest   dependency-type: direct:development   update-type: version-update:semver-minor   dependency-group: minor-npm-dependencies - dependency-name: prettier   dependency-type: direct:development   update-type: version-update:semver-minor   dependency-group: minor-npm-dependencies - dependency-name: ts-jest   dependency-type: direct:development   update-type: version-update:semver-minor   dependency-group: minor-npm-dependencies - dependency-name: typescript   dependency-type: direct:development   update-type: version-update:semver-minor   dependency-group: minor-npm-dependencies ...  Signed-off-by: dependabot[bot] <support@github.com>  * `npm run build`  ---------  Signed-off-by: dependabot[bot] <support@github.com> Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com> Co-authored-by: Josh Gross <joshmgross@github.com>,package.json,4,4,8,"""@vercel/ncc"": ""^0.38.1"" ""eslint"": ""^8.57.0"" ""eslint-plugin-github"": ""^4.10.2"" - ""eslint-plugin-jest"": ""^28.5.0"" + ""eslint-plugin-jest"": ""^28.8.2"" ""jest"": ""^29.7.0"" ""jest-circus"": ""^29.7.0"" ""js-yaml"": ""^4.1.0"" - ""prettier"": ""^3.2.5"" - ""ts-jest"": ""^29.1.2"" - ""typescript"": ""^5.4.5"" + ""prettier"": ""^3.3.3"" + ""ts-jest"": ""^29.2.5"" + ""typescript"": ""^5.5.4"" } }"
actions/checkout,b6849436894e144dbce29d7d7fda2ae3bf9d8365,Luca Comellini,2024-09-05 15:57:13,Add Ref and Commit outputs (#1180)  Signed-off-by: Luca Comellini <luca.com@gmail.com>,.github/workflows/test.yml,34,0,34,"jobs: uses: actions/checkout@v4.1.6 with: path: localClone + + test-output: + runs-on: ubuntu-latest + steps: + # Clone this repo + - name: Checkout + uses: actions/checkout@v4.1.6 + + # Basic checkout using git + - name: Checkout basic + id: checkout + uses: ./ + with: + ref: test-data/v2/basic + + # Verify output + - name: Verify output + run: | + echo ""Commit: ${{ steps.checkout.outputs.commit }}"" + echo ""Ref: ${{ steps.checkout.outputs.ref }}"" + + if [ ""${{ steps.checkout.outputs.ref }}"" != ""test-data/v2/basic"" ]; then + echo ""Expected ref to be test-data/v2/basic"" + exit 1 + fi + + if [ ""${{ steps.checkout.outputs.commit }}"" != ""82f71901cf8c021332310dcc8cdba84c4193ff5d"" ]; then + echo ""Expected commit to be 82f71901cf8c021332310dcc8cdba84c4193ff5d"" + exit 1 + fi + + # needed to make checkout post cleanup succeed + - name: Fix Checkout + uses: actions/checkout@v4.1.6"
actions/checkout,b6849436894e144dbce29d7d7fda2ae3bf9d8365,Luca Comellini,2024-09-05 15:57:13,Add Ref and Commit outputs (#1180)  Signed-off-by: Luca Comellini <luca.com@gmail.com>,action.yml,5,0,5,inputs: github-server-url: description: The base URL for the GitHub instance that you are trying to clone from will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com required: false +outputs: + ref: + description: 'The branch tag or SHA that was checked out' + commit: + description: 'The commit SHA that was checked out' runs: using: node20 main: dist/index.js
actions/checkout,b6849436894e144dbce29d7d7fda2ae3bf9d8365,Luca Comellini,2024-09-05 15:57:13,Add Ref and Commit outputs (#1180)  Signed-off-by: Luca Comellini <luca.com@gmail.com>,dist/index.js,3,1,4,"function getSource(settings) { // Get commit information const commitInfo = yield git.log1(); // Log commit sha - yield git.log1(""--format='%H'""); + const commitSHA = yield git.log1('--format=%H'); + core.setOutput('commit' commitSHA.trim()); // Check for incorrect pull request merge commit yield refHelper.checkCommitInfo(settings.authToken commitInfo settings.repositoryOwner settings.repositoryName settings.ref settings.commit settings.githubServerUrl); } function run() { coreCommand.issueCommand('add-matcher' {} path.join(__dirname 'problem-matcher.json')); // Get sources yield gitSourceProvider.getSource(sourceSettings); + core.setOutput('ref' sourceSettings.ref); } finally { // Unregister problem matcher"
actions/checkout,b6849436894e144dbce29d7d7fda2ae3bf9d8365,Luca Comellini,2024-09-05 15:57:13,Add Ref and Commit outputs (#1180)  Signed-off-by: Luca Comellini <luca.com@gmail.com>,src/git-source-provider.ts,2,1,3,"export async function getSource(settings: IGitSourceSettings): Promise<void> { const commitInfo = await git.log1() // Log commit sha - await git.log1(""--format='%H'"") + const commitSHA = await git.log1('--format=%H') + core.setOutput('commit' commitSHA.trim()) // Check for incorrect pull request merge commit await refHelper.checkCommitInfo("
actions/checkout,b6849436894e144dbce29d7d7fda2ae3bf9d8365,Luca Comellini,2024-09-05 15:57:13,Add Ref and Commit outputs (#1180)  Signed-off-by: Luca Comellini <luca.com@gmail.com>,src/main.ts,1,0,1,async function run(): Promise<void> { // Get sources await gitSourceProvider.getSource(sourceSettings) + core.setOutput('ref' sourceSettings.ref) } finally { // Unregister problem matcher coreCommand.issueCommand('remove-matcher' {owner: 'checkout-git'} '')
actions/checkout,2d7d9f7ff5b310f983d059b68785b3c74d8b8edd,yasonk,2024-09-02 13:53:38,Provide explanation for where user email came from (#1869)  * Provide explanation for where user email came from  * bringing back the newline,README.md,1,0,1,"jobs: git commit -m ""generated"" git push ``` +*NOTE:* The user email is `{user.id}+{user.login}@users.noreply.github.com`. See users API: https://api.github.com/users/github-actions%5Bbot%5D # License"
actions/checkout,9a9194f87191a7e9055e3e9b95b8cfb13023bb08,dependabot[bot],2024-07-29 20:10:36,"Bump docker/build-push-action from 5.3.0 to 6.5.0 (#1832)  Bumps [docker/build-push-action](https://github.com/docker/build-push-action) from 5.3.0 to 6.5.0. - [Release notes](https://github.com/docker/build-push-action/releases) - [Commits](https://github.com/docker/build-push-action/compare/v5.3.0...v6.5.0)  --- updated-dependencies: - dependency-name: docker/build-push-action   dependency-type: direct:production   update-type: version-update:semver-major ...  Signed-off-by: dependabot[bot] <support@github.com> Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",.github/workflows/update-test-ubuntu-git.yml,1,1,2,jobs: # Use `docker/build-push-action` to build (and optionally publish) the image. - name: Build Docker Image (with optional Push) - uses: docker/build-push-action@v5.3.0 + uses: docker/build-push-action@v6.5.0 with: context: . file: images/test-ubuntu-git.Dockerfile
actions/checkout,dd960bd3c3f080561a1810e32349ac211ecec7d4,dependabot[bot],2024-07-29 20:10:02,"Bump docker/login-action in the minor-actions-dependencies group (#1831)  Bumps the minor-actions-dependencies group with 1 update: [docker/login-action](https://github.com/docker/login-action).   Updates `docker/login-action` from 3.1.0 to 3.3.0 - [Release notes](https://github.com/docker/login-action/releases) - [Commits](https://github.com/docker/login-action/compare/v3.1.0...v3.3.0)  --- updated-dependencies: - dependency-name: docker/login-action   dependency-type: direct:production   update-type: version-update:semver-minor   dependency-group: minor-actions-dependencies ...  Signed-off-by: dependabot[bot] <support@github.com> Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",.github/workflows/update-test-ubuntu-git.yml,1,1,2,jobs: # Use `docker/login-action` to log in to GHCR.io. # Once published the packages are scoped to the account defined here. - name: Log in to the ghcr.io container registry - uses: docker/login-action@v3.1.0 + uses: docker/login-action@v3.3.0 with: registry: ${{ env.REGISTRY }} username: ${{ github.actor }}
actions/checkout,692973e3d937129bcbf40652eb9f2f61becf3332,Josh Gross,2024-06-12 18:41:43,"Prepare 4.1.7 release (#1775)  * Prepare 4.1.7 release  * Include #1776 in 4.1.7 release",CHANGELOG.md,6,0,6,# Changelog +## v4.1.7 +* Bump the minor-npm-dependencies group across 1 directory with 4 updates by @dependabot in https://github.com/actions/checkout/pull/1739 +* Bump actions/checkout from 3 to 4 by @dependabot in https://github.com/actions/checkout/pull/1697 +* Check out other refs/* by commit by @orhantoy in https://github.com/actions/checkout/pull/1774 +* Pin actions/checkout's own workflows to a known good stable version. by @jww3 in https://github.com/actions/checkout/pull/1776 + ## v4.1.6 * Check platform to set archive extension appropriately by @cory-miller in https://github.com/actions/checkout/pull/1732
actions/checkout,692973e3d937129bcbf40652eb9f2f61becf3332,Josh Gross,2024-06-12 18:41:43,"Prepare 4.1.7 release (#1775)  * Prepare 4.1.7 release  * Include #1776 in 4.1.7 release",package-lock.json,2,2,4,"{ ""name"": ""checkout"" - ""version"": ""4.1.6"" + ""version"": ""4.1.7"" ""lockfileVersion"": 3 ""requires"": true ""packages"": { """": { ""name"": ""checkout"" - ""version"": ""4.1.6"" + ""version"": ""4.1.7"" ""license"": ""MIT"" ""dependencies"": { ""@actions/core"": ""^1.10.1"""
actions/checkout,692973e3d937129bcbf40652eb9f2f61becf3332,Josh Gross,2024-06-12 18:41:43,"Prepare 4.1.7 release (#1775)  * Prepare 4.1.7 release  * Include #1776 in 4.1.7 release",package.json,1,1,2,"{ ""name"": ""checkout"" - ""version"": ""4.1.6"" + ""version"": ""4.1.7"" ""description"": ""checkout action"" ""main"": ""lib/main.js"" ""scripts"": {"
actions/checkout,6ccd57f4c5d15bdc2fef309bd9fb6cc9db2ef1c6,John Wesley Walker III,2024-06-12 17:11:03,"Pin actions/checkout's own workflows to a known  good  stable version. (#1776)  * Pin actions/checkout's own workflows to a known  good  stable version.  * fixed failing unit test  * fix unit test",.github/workflows/check-dist.yml,1,1,2,jobs: runs-on: ubuntu-latest steps: - - uses: actions/checkout@v4 + - uses: actions/checkout@v4.1.6 - name: Set Node.js 20.x uses: actions/setup-node@v4
actions/checkout,6ccd57f4c5d15bdc2fef309bd9fb6cc9db2ef1c6,John Wesley Walker III,2024-06-12 17:11:03,"Pin actions/checkout's own workflows to a known  good  stable version. (#1776)  * Pin actions/checkout's own workflows to a known  good  stable version.  * fixed failing unit test  * fix unit test",.github/workflows/codeql-analysis.yml,1,1,2,jobs: steps: - name: Checkout repository - uses: actions/checkout@v4 + uses: actions/checkout@v4.1.6 - name: Initialize CodeQL uses: github/codeql-action/init@v3
actions/checkout,6ccd57f4c5d15bdc2fef309bd9fb6cc9db2ef1c6,John Wesley Walker III,2024-06-12 17:11:03,"Pin actions/checkout's own workflows to a known  good  stable version. (#1776)  * Pin actions/checkout's own workflows to a known  good  stable version.  * fixed failing unit test  * fix unit test",.github/workflows/licensed.yml,1,1,2,jobs: runs-on: ubuntu-latest name: Check licenses steps: - - uses: actions/checkout@v4 + - uses: actions/checkout@v4.1.6 - run: npm ci - run: npm run licensed-check \ No newline at end of file
actions/checkout,6ccd57f4c5d15bdc2fef309bd9fb6cc9db2ef1c6,John Wesley Walker III,2024-06-12 17:11:03,"Pin actions/checkout's own workflows to a known  good  stable version. (#1776)  * Pin actions/checkout's own workflows to a known  good  stable version.  * fixed failing unit test  * fix unit test",.github/workflows/test.yml,9,9,18,jobs: - uses: actions/setup-node@v4 with: node-version: 20.x - - uses: actions/checkout@v4 + - uses: actions/checkout@v4.1.6 - run: npm ci - run: npm run build - run: npm run format-check jobs: steps: # Clone this repo - name: Checkout - uses: actions/checkout@v4 + uses: actions/checkout@v4.1.6 # Basic checkout - name: Checkout basic jobs: steps: # Clone this repo - name: Checkout - uses: actions/checkout@v4 + uses: actions/checkout@v4.1.6 # Basic checkout using git - name: Checkout basic jobs: steps: # Clone this repo - name: Checkout - uses: actions/checkout@v4 + uses: actions/checkout@v4.1.6 # Basic checkout using git - name: Checkout basic jobs: steps: # Clone this repo - name: Checkout - uses: actions/checkout@v4 + uses: actions/checkout@v4.1.6 with: - path: v4 + path: localClone # Basic checkout using git - name: Checkout basic - uses: ./v4 + uses: ./localClone with: ref: test-data/v2/basic - name: Verify basic jobs: # needed to make checkout post cleanup succeed - name: Fix Checkout v4 - uses: actions/checkout@v4 + uses: actions/checkout@v4.1.6 with: - path: v4 + path: localClone
actions/checkout,6ccd57f4c5d15bdc2fef309bd9fb6cc9db2ef1c6,John Wesley Walker III,2024-06-12 17:11:03,"Pin actions/checkout's own workflows to a known  good  stable version. (#1776)  * Pin actions/checkout's own workflows to a known  good  stable version.  * fixed failing unit test  * fix unit test",.github/workflows/update-main-version.yml,1,1,2,jobs: # Note this update workflow can also be used as a rollback tool. # For that reason it's best to pin `actions/checkout` to a known stable version # (typically about two releases back). - - uses: actions/checkout@v4 + - uses: actions/checkout@v4.1.6 with: fetch-depth: 0 - name: Git config
actions/checkout,b17fe1e4d59a9d1d95a7aead5e6fcd13e50939a5,Orhan Toy,2024-06-12 15:01:40,Handle hidden refs (#1774)  Co-authored-by: Chris Gavin <chris@chrisgavin.me>,__test__/ref-helper.test.ts,10,0,10,describe('ref-helper tests' () => { expect(checkoutInfo.startPoint).toBeFalsy() }) + it('getCheckoutInfo refs/' async () => { + const checkoutInfo = await refHelper.getCheckoutInfo( + git + 'refs/gh/queue/main/pr-123' + commit + ) + expect(checkoutInfo.ref).toBe(commit) + expect(checkoutInfo.startPoint).toBeFalsy() + }) + it('getCheckoutInfo unqualified branch only' async () => { git.branchExists = jest.fn(async (remote: boolean pattern: string) => { return true
actions/checkout,b17fe1e4d59a9d1d95a7aead5e6fcd13e50939a5,Orhan Toy,2024-06-12 15:01:40,Handle hidden refs (#1774)  Co-authored-by: Chris Gavin <chris@chrisgavin.me>,dist/index.js,5,1,6,function getCheckoutInfo(git ref commit) { result.ref = `refs/remotes/pull/${branch}`; } // refs/tags/ - else if (upperRef.startsWith('REFS/')) { + else if (upperRef.startsWith('REFS/TAGS/')) { result.ref = ref; } + // refs/ + else if (upperRef.startsWith('REFS/') && commit) { + result.ref = commit; + } // Unqualified ref check for a matching branch or tag else { if (yield git.branchExists(true `origin/${ref}`)) {
actions/checkout,b17fe1e4d59a9d1d95a7aead5e6fcd13e50939a5,Orhan Toy,2024-06-12 15:01:40,Handle hidden refs (#1774)  Co-authored-by: Chris Gavin <chris@chrisgavin.me>,src/ref-helper.ts,5,1,6,export async function getCheckoutInfo( result.ref = `refs/remotes/pull/${branch}` } // refs/tags/ - else if (upperRef.startsWith('REFS/')) { + else if (upperRef.startsWith('REFS/TAGS/')) { result.ref = ref } + // refs/ + else if (upperRef.startsWith('REFS/') && commit) { + result.ref = commit + } // Unqualified ref check for a matching branch or tag else { if (await git.branchExists(true `origin/${ref}`)) {
actions/checkout,b80ff79f1755d06ba70441c368a6fe801f5f3a62,dependabot[bot],2024-05-20 18:25:59,"Bump actions/checkout from 3 to 4 (#1697)  * Bump actions/checkout from 3 to 4  Bumps [actions/checkout](https://github.com/actions/checkout) from 3 to 4. - [Release notes](https://github.com/actions/checkout/releases) - [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md) - [Commits](https://github.com/actions/checkout/compare/v3...v4)  --- updated-dependencies: - dependency-name: actions/checkout   dependency-type: direct:production   update-type: version-update:semver-major ...  Signed-off-by: dependabot[bot] <support@github.com>  * Apply suggestions from code review  * .  ---------  Signed-off-by: dependabot[bot] <support@github.com> Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com> Co-authored-by: Cory Miller <13227161+cory-miller@users.noreply.github.com>",.github/workflows/check-dist.yml,1,1,2,jobs: runs-on: ubuntu-latest steps: - - uses: actions/checkout@v3 + - uses: actions/checkout@v4 - name: Set Node.js 20.x uses: actions/setup-node@v4
actions/checkout,b80ff79f1755d06ba70441c368a6fe801f5f3a62,dependabot[bot],2024-05-20 18:25:59,"Bump actions/checkout from 3 to 4 (#1697)  * Bump actions/checkout from 3 to 4  Bumps [actions/checkout](https://github.com/actions/checkout) from 3 to 4. - [Release notes](https://github.com/actions/checkout/releases) - [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md) - [Commits](https://github.com/actions/checkout/compare/v3...v4)  --- updated-dependencies: - dependency-name: actions/checkout   dependency-type: direct:production   update-type: version-update:semver-major ...  Signed-off-by: dependabot[bot] <support@github.com>  * Apply suggestions from code review  * .  ---------  Signed-off-by: dependabot[bot] <support@github.com> Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com> Co-authored-by: Cory Miller <13227161+cory-miller@users.noreply.github.com>",.github/workflows/codeql-analysis.yml,1,1,2,jobs: steps: - name: Checkout repository - uses: actions/checkout@v3 + uses: actions/checkout@v4 - name: Initialize CodeQL uses: github/codeql-action/init@v3
actions/checkout,b80ff79f1755d06ba70441c368a6fe801f5f3a62,dependabot[bot],2024-05-20 18:25:59,"Bump actions/checkout from 3 to 4 (#1697)  * Bump actions/checkout from 3 to 4  Bumps [actions/checkout](https://github.com/actions/checkout) from 3 to 4. - [Release notes](https://github.com/actions/checkout/releases) - [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md) - [Commits](https://github.com/actions/checkout/compare/v3...v4)  --- updated-dependencies: - dependency-name: actions/checkout   dependency-type: direct:production   update-type: version-update:semver-major ...  Signed-off-by: dependabot[bot] <support@github.com>  * Apply suggestions from code review  * .  ---------  Signed-off-by: dependabot[bot] <support@github.com> Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com> Co-authored-by: Cory Miller <13227161+cory-miller@users.noreply.github.com>",.github/workflows/licensed.yml,1,1,2,jobs: runs-on: ubuntu-latest name: Check licenses steps: - - uses: actions/checkout@v3 + - uses: actions/checkout@v4 - run: npm ci - run: npm run licensed-check \ No newline at end of file
actions/checkout,b80ff79f1755d06ba70441c368a6fe801f5f3a62,dependabot[bot],2024-05-20 18:25:59,"Bump actions/checkout from 3 to 4 (#1697)  * Bump actions/checkout from 3 to 4  Bumps [actions/checkout](https://github.com/actions/checkout) from 3 to 4. - [Release notes](https://github.com/actions/checkout/releases) - [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md) - [Commits](https://github.com/actions/checkout/compare/v3...v4)  --- updated-dependencies: - dependency-name: actions/checkout   dependency-type: direct:production   update-type: version-update:semver-major ...  Signed-off-by: dependabot[bot] <support@github.com>  * Apply suggestions from code review  * .  ---------  Signed-off-by: dependabot[bot] <support@github.com> Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com> Co-authored-by: Cory Miller <13227161+cory-miller@users.noreply.github.com>",.github/workflows/test.yml,10,10,20,jobs: - uses: actions/setup-node@v4 with: node-version: 20.x - - uses: actions/checkout@v3 + - uses: actions/checkout@v4 - run: npm ci - run: npm run build - run: npm run format-check jobs: steps: # Clone this repo - name: Checkout - uses: actions/checkout@v4.1.1 + uses: actions/checkout@v4 # Basic checkout - name: Checkout basic jobs: steps: # Clone this repo - name: Checkout - uses: actions/checkout@v3 + uses: actions/checkout@v4 # Basic checkout using git - name: Checkout basic jobs: steps: # Clone this repo - name: Checkout - uses: actions/checkout@v3 + uses: actions/checkout@v4 # Basic checkout using git - name: Checkout basic jobs: steps: # Clone this repo - name: Checkout - uses: actions/checkout@v3 + uses: actions/checkout@v4 with: - path: v3 + path: v4 # Basic checkout using git - name: Checkout basic - uses: ./v3 + uses: ./v4 with: ref: test-data/v2/basic - name: Verify basic jobs: git fetch --no-tags --depth=1 origin +refs/heads/main:refs/remotes/origin/main # needed to make checkout post cleanup succeed - - name: Fix Checkout v3 - uses: actions/checkout@v3 + - name: Fix Checkout v4 + uses: actions/checkout@v4 with: - path: v3 + path: v4
actions/checkout,b80ff79f1755d06ba70441c368a6fe801f5f3a62,dependabot[bot],2024-05-20 18:25:59,"Bump actions/checkout from 3 to 4 (#1697)  * Bump actions/checkout from 3 to 4  Bumps [actions/checkout](https://github.com/actions/checkout) from 3 to 4. - [Release notes](https://github.com/actions/checkout/releases) - [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md) - [Commits](https://github.com/actions/checkout/compare/v3...v4)  --- updated-dependencies: - dependency-name: actions/checkout   dependency-type: direct:production   update-type: version-update:semver-major ...  Signed-off-by: dependabot[bot] <support@github.com>  * Apply suggestions from code review  * .  ---------  Signed-off-by: dependabot[bot] <support@github.com> Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com> Co-authored-by: Cory Miller <13227161+cory-miller@users.noreply.github.com>",.github/workflows/update-main-version.yml,1,1,2,jobs: # Note this update workflow can also be used as a rollback tool. # For that reason it's best to pin `actions/checkout` to a known stable version # (typically about two releases back). - - uses: actions/checkout@v4.1.1 + - uses: actions/checkout@v4 with: fetch-depth: 0 - name: Git config
actions/checkout,b1ec3021b8fa02164da82ca1557d017d83b0e179,dependabot[bot],2024-05-20 13:56:19,"Bump the minor-npm-dependencies group across 1 directory with 4 updates (#1739)  Bumps the minor-npm-dependencies group with 4 updates in the / directory: [@types/node](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/HEAD/types/node)  [@typescript-eslint/eslint-plugin](https://github.com/typescript-eslint/typescript-eslint/tree/HEAD/packages/eslint-plugin)  [@typescript-eslint/parser](https://github.com/typescript-eslint/typescript-eslint/tree/HEAD/packages/parser) and [eslint-plugin-jest](https://github.com/jest-community/eslint-plugin-jest).   Updates `@types/node` from 20.12.7 to 20.12.12 - [Release notes](https://github.com/DefinitelyTyped/DefinitelyTyped/releases) - [Commits](https://github.com/DefinitelyTyped/DefinitelyTyped/commits/HEAD/types/node)  Updates `@typescript-eslint/eslint-plugin` from 7.7.1 to 7.9.0 - [Release notes](https://github.com/typescript-eslint/typescript-eslint/releases) - [Changelog](https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/CHANGELOG.md) - [Commits](https://github.com/typescript-eslint/typescript-eslint/commits/v7.9.0/packages/eslint-plugin)  Updates `@typescript-eslint/parser` from 7.7.1 to 7.9.0 - [Release notes](https://github.com/typescript-eslint/typescript-eslint/releases) - [Changelog](https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md) - [Commits](https://github.com/typescript-eslint/typescript-eslint/commits/v7.9.0/packages/parser)  Updates `eslint-plugin-jest` from 28.2.0 to 28.5.0 - [Release notes](https://github.com/jest-community/eslint-plugin-jest/releases) - [Changelog](https://github.com/jest-community/eslint-plugin-jest/blob/main/CHANGELOG.md) - [Commits](https://github.com/jest-community/eslint-plugin-jest/compare/v28.2.0...v28.5.0)  --- updated-dependencies: - dependency-name: ""@types/node""   dependency-type: direct:development   update-type: version-update:semver-patch   dependency-group: minor-npm-dependencies - dependency-name: ""@typescript-eslint/eslint-plugin""   dependency-type: direct:development   update-type: version-update:semver-minor   dependency-group: minor-npm-dependencies - dependency-name: ""@typescript-eslint/parser""   dependency-type: direct:development   update-type: version-update:semver-minor   dependency-group: minor-npm-dependencies - dependency-name: eslint-plugin-jest   dependency-type: direct:development   update-type: version-update:semver-minor   dependency-group: minor-npm-dependencies ...  Signed-off-by: dependabot[bot] <support@github.com> Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",package.json,4,4,8,"} ""devDependencies"": { ""@types/jest"": ""^29.5.12"" - ""@types/node"": ""^20.12.7"" + ""@types/node"": ""^20.12.12"" ""@types/uuid"": ""^9.0.8"" - ""@typescript-eslint/eslint-plugin"": ""^7.7.1"" - ""@typescript-eslint/parser"": ""^7.7.1"" + ""@typescript-eslint/eslint-plugin"": ""^7.9.0"" + ""@typescript-eslint/parser"": ""^7.9.0"" ""@vercel/ncc"": ""^0.38.1"" ""eslint"": ""^8.57.0"" ""eslint-plugin-github"": ""^4.10.2"" - ""eslint-plugin-jest"": ""^28.2.0"" + ""eslint-plugin-jest"": ""^28.5.0"" ""jest"": ""^29.7.0"" ""jest-circus"": ""^29.7.0"" ""js-yaml"": ""^4.1.0"""
actions/checkout,a5ac7e51b41094c92402da3b24376905380afc29,Cory Miller,2024-05-16 18:08:36,Update for 4.1.6 release (#1733),CHANGELOG.md,10,0,10,# Changelog +## v4.1.6 +* Check platform to set archive extension appropriately by @cory-miller in https://github.com/actions/checkout/pull/1732 + +## v4.1.5 +* Update NPM dependencies by @cory-miller in https://github.com/actions/checkout/pull/1703 +* Bump github/codeql-action from 2 to 3 by @dependabot in https://github.com/actions/checkout/pull/1694 +* Bump actions/setup-node from 1 to 4 by @dependabot in https://github.com/actions/checkout/pull/1696 +* Bump actions/upload-artifact from 2 to 4 by @dependabot in https://github.com/actions/checkout/pull/1695 +* README: Suggest `user.email` to be `41898282+github-actions[bot]@users.noreply.github.com` by @cory-miller in https://github.com/actions/checkout/pull/1707 + ## v4.1.4 - Disable `extensions.worktreeConfig` when disabling `sparse-checkout` by @jww3 in https://github.com/actions/checkout/pull/1692 - Add dependabot config by @cory-miller in https://github.com/actions/checkout/pull/1688
actions/checkout,a5ac7e51b41094c92402da3b24376905380afc29,Cory Miller,2024-05-16 18:08:36,Update for 4.1.6 release (#1733),package-lock.json,1,1,2,"{ ""name"": ""checkout"" - ""version"": ""4.1.4"" + ""version"": ""4.1.6"" ""lockfileVersion"": 3 ""requires"": true ""packages"": {"
actions/checkout,a5ac7e51b41094c92402da3b24376905380afc29,Cory Miller,2024-05-16 18:08:36,Update for 4.1.6 release (#1733),package.json,1,1,2,"{ ""name"": ""checkout"" - ""version"": ""4.1.4"" + ""version"": ""4.1.6"" ""description"": ""checkout action"" ""main"": ""lib/main.js"" ""scripts"": {"
actions/checkout,24ed1a352802348c9e4e8d13de9177fb95b537ba,Cory Miller,2024-05-16 17:40:36,Check platform for extension (#1732),dist/index.js,3,1,4,function downloadRepository(authToken owner repo ref commit repositoryPath // Write archive to disk core.info('Writing archive to disk'); const uniqueId = (0 uuid_1.v4)(); - const archivePath = path.join(repositoryPath `${uniqueId}.tar.gz`); + const archivePath = IS_WINDOWS + ? path.join(repositoryPath `${uniqueId}.zip`) + : path.join(repositoryPath `${uniqueId}.tar.gz`); yield fs.promises.writeFile(archivePath archiveData); archiveData = Buffer.from(''); // Free memory // Extract archive
actions/checkout,24ed1a352802348c9e4e8d13de9177fb95b537ba,Cory Miller,2024-05-16 17:40:36,Check platform for extension (#1732),src/github-api-helper.ts,3,1,4,export async function downloadRepository( // Write archive to disk core.info('Writing archive to disk') const uniqueId = uuid() - const archivePath = path.join(repositoryPath `${uniqueId}.tar.gz`) + const archivePath = IS_WINDOWS + ? path.join(repositoryPath `${uniqueId}.zip`) + : path.join(repositoryPath `${uniqueId}.tar.gz`) await fs.promises.writeFile(archivePath archiveData) archiveData = Buffer.from('') // Free memory
actions/checkout,44c2b7a8a4ea60a981eaca3cf939b5f4305c123b,Cory Miller,2024-04-30 15:50:54,"README: Suggest `user.email` to be `41898282+github-actions[bot]@users.noreply.github.com` (#1707)  * README: Set `user.email` to GitHub Actions Bot  * Update workflow to use proper bot GitHub Bot email  * Prefix `user.email` with `41898282+`  To match squash merge user  else showing as two different users  see: https://github.com/SocketDev/socket-sdk-js/commit/b0948d0da0cfb5b240c69d063cc34a6399abce48  * Update README.md  ---------  Co-authored-by: Pelle Wessman <pelle@kodfabrik.se>",.github/workflows/update-main-version.yml,2,2,4,"jobs: fetch-depth: 0 - name: Git config run: | - git config user.name github-actions - git config user.email github-actions@github.com + git config user.name ""github-actions[bot]"" + git config user.email ""41898282+github-actions[bot]@users.noreply.github.com"" - name: Tag new target run: git tag -f ${{ github.event.inputs.major_version }} ${{ github.event.inputs.target }} - name: Push new tag"
actions/checkout,44c2b7a8a4ea60a981eaca3cf939b5f4305c123b,Cory Miller,2024-04-30 15:50:54,"README: Suggest `user.email` to be `41898282+github-actions[bot]@users.noreply.github.com` (#1707)  * README: Set `user.email` to GitHub Actions Bot  * Update workflow to use proper bot GitHub Bot email  * Prefix `user.email` with `41898282+`  To match squash merge user  else showing as two different users  see: https://github.com/SocketDev/socket-sdk-js/commit/b0948d0da0cfb5b240c69d063cc34a6399abce48  * Update README.md  ---------  Co-authored-by: Pelle Wessman <pelle@kodfabrik.se>",README.md,3,2,5,"jobs: - uses: actions/checkout@v4 - run: | date > generated.txt - git config user.name github-actions - git config user.email github-actions@github.com + # Note: the following account information will not work on GHES + git config user.name ""github-actions[bot]"" + git config user.email ""41898282+github-actions[bot]@users.noreply.github.com"" git add . git commit -m ""generated"" git push"
actions/checkout,8459bc0c7e3759cdf591f513d9f141a95fef0a8f,dependabot[bot],2024-04-24 16:39:59,"Bump actions/upload-artifact from 2 to 4 (#1695)  Bumps [actions/upload-artifact](https://github.com/actions/upload-artifact) from 2 to 4. - [Release notes](https://github.com/actions/upload-artifact/releases) - [Commits](https://github.com/actions/upload-artifact/compare/v2...v4)  --- updated-dependencies: - dependency-name: actions/upload-artifact   dependency-type: direct:production   update-type: version-update:semver-major ...  Signed-off-by: dependabot[bot] <support@github.com> Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",.github/workflows/check-dist.yml,1,1,2,jobs: fi # If dist/ was different than expected upload the expected version as an artifact - - uses: actions/upload-artifact@v2 + - uses: actions/upload-artifact@v4 if: ${{ failure() && steps.diff.conclusion == 'failure' }} with: name: dist
actions/checkout,3f603f6d5e9f40714f97b2f017aa0df2a443192a,dependabot[bot],2024-04-24 16:34:46,"Bump actions/setup-node from 1 to 4 (#1696)  Bumps [actions/setup-node](https://github.com/actions/setup-node) from 1 to 4. - [Release notes](https://github.com/actions/setup-node/releases) - [Commits](https://github.com/actions/setup-node/compare/v1...v4)  --- updated-dependencies: - dependency-name: actions/setup-node   dependency-type: direct:production   update-type: version-update:semver-major ...  Signed-off-by: dependabot[bot] <support@github.com> Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",.github/workflows/check-dist.yml,1,1,2,jobs: - uses: actions/checkout@v3 - name: Set Node.js 20.x - uses: actions/setup-node@v1 + uses: actions/setup-node@v4 with: node-version: 20.x
actions/checkout,3f603f6d5e9f40714f97b2f017aa0df2a443192a,dependabot[bot],2024-04-24 16:34:46,"Bump actions/setup-node from 1 to 4 (#1696)  Bumps [actions/setup-node](https://github.com/actions/setup-node) from 1 to 4. - [Release notes](https://github.com/actions/setup-node/releases) - [Commits](https://github.com/actions/setup-node/compare/v1...v4)  --- updated-dependencies: - dependency-name: actions/setup-node   dependency-type: direct:production   update-type: version-update:semver-major ...  Signed-off-by: dependabot[bot] <support@github.com> Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",.github/workflows/test.yml,1,1,2,jobs: build: runs-on: ubuntu-latest steps: - - uses: actions/setup-node@v1 + - uses: actions/setup-node@v4 with: node-version: 20.x - uses: actions/checkout@v3
actions/checkout,fd084cde189b7b76ec305d52e27be545a0172823,dependabot[bot],2024-04-24 16:33:41,"Bump github/codeql-action from 2 to 3 (#1694)  Bumps [github/codeql-action](https://github.com/github/codeql-action) from 2 to 3. - [Release notes](https://github.com/github/codeql-action/releases) - [Changelog](https://github.com/github/codeql-action/blob/main/CHANGELOG.md) - [Commits](https://github.com/github/codeql-action/compare/v2...v3)  --- updated-dependencies: - dependency-name: github/codeql-action   dependency-type: direct:production   update-type: version-update:semver-major ...  Signed-off-by: dependabot[bot] <support@github.com> Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",.github/workflows/codeql-analysis.yml,2,2,4,jobs: uses: actions/checkout@v3 - name: Initialize CodeQL - uses: github/codeql-action/init@v2 + uses: github/codeql-action/init@v3 with: languages: ${{ matrix.language }} # If you wish to specify custom queries you can do so here or in a config file. jobs: - run: rm -rf dist # We want code scanning to analyze lib instead (individual .js files) - name: Perform CodeQL Analysis - uses: github/codeql-action/analyze@v2 + uses: github/codeql-action/analyze@v3
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/@actions/core.dep.yml,1,1,2,"--- name: ""@actions/core"" -version: 1.10.0 +version: 1.10.1 type: npm summary: Actions core lib homepage: https://github.com/actions/toolkit/tree/main/packages/core"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/@actions/exec.dep.yml,4,2,6,"--- name: ""@actions/exec"" -version: 1.0.1 +version: 1.1.1 type: npm summary: Actions exec lib -homepage: https://github.com/actions/toolkit/tree/master/packages/exec +homepage: https://github.com/actions/toolkit/tree/main/packages/exec license: mit licenses: - sources: LICENSE.md text: |- + The MIT License (MIT) + Copyright 2019 GitHub Permission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files (the ""Software"") to deal in the Software without restriction including without limitation the rights to use copy modify merge publish distribute sublicense and/or sell copies of the Software and to permit persons to whom the Software is furnished to do so subject to the following conditions:"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/@actions/github.dep.yml,1,1,2,"--- name: ""@actions/github"" -version: 5.1.1 +version: 6.0.0 type: npm summary: Actions github lib homepage: https://github.com/actions/toolkit/tree/main/packages/github"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/@actions/http-client.dep.yml,1,1,2,"--- name: ""@actions/http-client"" -version: 2.1.0 +version: 2.2.1 type: npm summary: Actions Http Client homepage: https://github.com/actions/toolkit/tree/main/packages/http-client"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/@actions/tool-cache.dep.yml,10,20,30,"--- name: ""@actions/tool-cache"" -version: 1.1.2 +version: 2.0.1 type: npm summary: Actions tool-cache lib -homepage: https://github.com/actions/toolkit/tree/master/packages/exec +homepage: https://github.com/actions/toolkit/tree/main/packages/tool-cache license: mit licenses: -- sources: Auto-generated MIT license text - text: | - MIT License +- sources: LICENSE.md + text: |- + The MIT License (MIT) - Permission is hereby granted free of charge to any person obtaining a copy - of this software and associated documentation files (the ""Software"") to deal - in the Software without restriction including without limitation the rights - to use copy modify merge publish distribute sublicense and/or sell - copies of the Software and to permit persons to whom the Software is - furnished to do so subject to the following conditions: + Copyright 2019 GitHub - The above copyright notice and this permission notice shall be included in all - copies or substantial portions of the Software. + Permission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files (the ""Software"") to deal in the Software without restriction including without limitation the rights to use copy modify merge publish distribute sublicense and/or sell copies of the Software and to permit persons to whom the Software is furnished to do so subject to the following conditions: - THE SOFTWARE IS PROVIDED ""AS IS"" WITHOUT WARRANTY OF ANY KIND EXPRESS OR - IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY - FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE - AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER - LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM - OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE - SOFTWARE. + The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. + + THE SOFTWARE IS PROVIDED ""AS IS"" WITHOUT WARRANTY OF ANY KIND EXPRESS OR IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. notices: []"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/@fastify/busboy.dep.yml,13,14,27,"--- -name: function-bind -version: 1.1.1 +name: ""@fastify/busboy"" +version: 2.1.1 type: npm -summary: Implementation of Function.prototype.bind -homepage: https://github.com/Raynos/function-bind +summary: A streaming parser for HTML form data for node.js +homepage: license: mit licenses: - sources: LICENSE - text: |+ - Copyright (c) 2013 Raynos. + text: |- + Copyright Brian White. All rights reserved. Permission is hereby granted free of charge to any person obtaining a copy - of this software and associated documentation files (the ""Software"") to deal - in the Software without restriction including without limitation the rights - to use copy modify merge publish distribute sublicense and/or sell - copies of the Software and to permit persons to whom the Software is + of this software and associated documentation files (the ""Software"") to + deal in the Software without restriction including without limitation the + rights to use copy modify merge publish distribute sublicense and/or + sell copies of the Software and to permit persons to whom the Software is furnished to do so subject to the following conditions: The above copyright notice and this permission notice shall be included in licenses: IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER - LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM - OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN - THE SOFTWARE. - + LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING + FROM OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS + IN THE SOFTWARE. notices: []"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/@octokit/auth-token.dep.yml,1,1,2,"--- name: ""@octokit/auth-token"" -version: 2.5.0 +version: 4.0.0 type: npm summary: GitHub API token authentication for browsers and Node.js homepage:"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/@octokit/core.dep.yml,1,1,2,"--- name: ""@octokit/core"" -version: 3.6.0 +version: 5.2.0 type: npm summary: Extendable client for GitHub's REST & GraphQL APIs homepage:"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/@octokit/endpoint.dep.yml,1,1,2,"--- name: ""@octokit/endpoint"" -version: 6.0.12 +version: 9.0.5 type: npm summary: Turns REST API endpoints into generic request options homepage:"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/@octokit/graphql.dep.yml,1,1,2,"--- name: ""@octokit/graphql"" -version: 4.8.0 +version: 7.1.0 type: npm summary: GitHub GraphQL API client for browsers and Node homepage:"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/@octokit/openapi-types-20.0.0.dep.yml,1,1,2,"--- name: ""@octokit/openapi-types"" -version: 12.11.0 +version: 20.0.0 type: npm summary: Generated TypeScript definitions based on GitHub's OpenAPI spec for api.github.com homepage:"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/@octokit/openapi-types-22.1.0.dep.yml,20,0,20,"+--- +name: ""@octokit/openapi-types"" +version: 22.1.0 +type: npm +summary: Generated TypeScript definitions based on GitHub's OpenAPI spec for api.github.com +homepage: +license: mit +licenses: +- sources: LICENSE + text: |- + Copyright 2020 Gregor Martynus + + Permission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files (the ""Software"") to deal in the Software without restriction including without limitation the rights to use copy modify merge publish distribute sublicense and/or sell copies of the Software and to permit persons to whom the Software is furnished to do so subject to the following conditions: + + The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. + + THE SOFTWARE IS PROVIDED ""AS IS"" WITHOUT WARRANTY OF ANY KIND EXPRESS OR IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. +- sources: README.md + text: ""[MIT](LICENSE)"" +notices: []"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/@octokit/plugin-paginate-rest.dep.yml,1,1,2,"--- name: ""@octokit/plugin-paginate-rest"" -version: 2.21.3 +version: 9.2.1 type: npm summary: Octokit plugin to paginate REST API endpoint responses homepage:"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/@octokit/plugin-rest-endpoint-methods.dep.yml,1,1,2,"--- name: ""@octokit/plugin-rest-endpoint-methods"" -version: 5.16.2 +version: 10.4.1 type: npm summary: Octokit plugin adding one method for all of api.github.com REST API endpoints homepage:"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/@octokit/request-error.dep.yml,1,1,2,"--- name: ""@octokit/request-error"" -version: 2.1.0 +version: 5.1.0 type: npm summary: Error class for Octokit request errors homepage:"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/@octokit/request.dep.yml,1,1,2,"--- name: ""@octokit/request"" -version: 5.6.3 +version: 8.4.0 type: npm summary: Send parameterized requests to GitHub's APIs with sensible defaults in browsers and Node"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/@octokit/types-12.6.0.dep.yml,1,1,2,"--- name: ""@octokit/types"" -version: 6.41.0 +version: 12.6.0 type: npm summary: Shared TypeScript definitions for Octokit projects homepage:"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/@octokit/types-13.4.1.dep.yml,20,0,20,"+--- +name: ""@octokit/types"" +version: 13.4.1 +type: npm +summary: Shared TypeScript definitions for Octokit projects +homepage: +license: mit +licenses: +- sources: LICENSE + text: | + MIT License Copyright (c) 2019 Octokit contributors + + Permission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files (the ""Software"") to deal in the Software without restriction including without limitation the rights to use copy modify merge publish distribute sublicense and/or sell copies of the Software and to permit persons to whom the Software is furnished to do so subject to the following conditions: + + The above copyright notice and this permission notice (including the next paragraph) shall be included in all copies or substantial portions of the Software. + + THE SOFTWARE IS PROVIDED ""AS IS"" WITHOUT WARRANTY OF ANY KIND EXPRESS OR IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. +- sources: README.md + text: ""[MIT](LICENSE)"" +notices: []"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/call-bind.dep.yml,0,32,32,"---- -name: call-bind -version: 1.0.2 -type: npm -summary: Robustly `.call.bind()` a function -homepage: https://github.com/ljharb/call-bind#readme -license: mit -licenses: -- sources: LICENSE - text: | - MIT License - - Copyright (c) 2020 Jordan Harband - - Permission is hereby granted free of charge to any person obtaining a copy - of this software and associated documentation files (the ""Software"") to deal - in the Software without restriction including without limitation the rights - to use copy modify merge publish distribute sublicense and/or sell - copies of the Software and to permit persons to whom the Software is - furnished to do so subject to the following conditions: - - The above copyright notice and this permission notice shall be included in all - copies or substantial portions of the Software. - - THE SOFTWARE IS PROVIDED ""AS IS"" WITHOUT WARRANTY OF ANY KIND EXPRESS OR - IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY - FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE - AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER - LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM - OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE - SOFTWARE. -notices: []"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/get-intrinsic.dep.yml,0,33,33,"---- -name: get-intrinsic -version: 1.1.1 -type: npm -summary: Get and robustly cache all JS language-level intrinsics at first require - time -homepage: https://github.com/ljharb/get-intrinsic#readme -license: mit -licenses: -- sources: LICENSE - text: | - MIT License - - Copyright (c) 2020 Jordan Harband - - Permission is hereby granted free of charge to any person obtaining a copy - of this software and associated documentation files (the ""Software"") to deal - in the Software without restriction including without limitation the rights - to use copy modify merge publish distribute sublicense and/or sell - copies of the Software and to permit persons to whom the Software is - furnished to do so subject to the following conditions: - - The above copyright notice and this permission notice shall be included in all - copies or substantial portions of the Software. - - THE SOFTWARE IS PROVIDED ""AS IS"" WITHOUT WARRANTY OF ANY KIND EXPRESS OR - IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY - FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE - AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER - LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM - OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE - SOFTWARE. -notices: []"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/has.dep.yml,0,33,33,"---- -name: has -version: 1.0.3 -type: npm -summary: Object.prototype.hasOwnProperty.call shortcut -homepage: https://github.com/tarruda/has -license: mit -licenses: -- sources: LICENSE-MIT - text: | - Copyright (c) 2013 Thiago de Arruda - - Permission is hereby granted free of charge to any person - obtaining a copy of this software and associated documentation - files (the ""Software"") to deal in the Software without - restriction including without limitation the rights to use - copy modify merge publish distribute sublicense and/or sell - copies of the Software and to permit persons to whom the - Software is furnished to do so subject to the following - conditions: - - The above copyright notice and this permission notice shall be - included in all copies or substantial portions of the Software. - - THE SOFTWARE IS PROVIDED ""AS IS"" WITHOUT WARRANTY OF ANY KIND - EXPRESS OR IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES - OF MERCHANTABILITY FITNESS FOR A PARTICULAR PURPOSE AND - NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT - HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER LIABILITY - WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING - FROM OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR - OTHER DEALINGS IN THE SOFTWARE. -notices: []"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/is-plain-object.dep.yml,0,40,40,"---- -name: is-plain-object -version: 5.0.0 -type: npm -summary: Returns true if an object was created by the `Object` constructor or Object.create(null). -homepage: https://github.com/jonschlinkert/is-plain-object -license: mit -licenses: -- sources: LICENSE - text: | - The MIT License (MIT) - - Copyright (c) 2014-2017 Jon Schlinkert. - - Permission is hereby granted free of charge to any person obtaining a copy - of this software and associated documentation files (the ""Software"") to deal - in the Software without restriction including without limitation the rights - to use copy modify merge publish distribute sublicense and/or sell - copies of the Software and to permit persons to whom the Software is - furnished to do so subject to the following conditions: - - The above copyright notice and this permission notice shall be included in - all copies or substantial portions of the Software. - - THE SOFTWARE IS PROVIDED ""AS IS"" WITHOUT WARRANTY OF ANY KIND EXPRESS OR - IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY - FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE - AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER - LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM - OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN - THE SOFTWARE. -- sources: README.md - text: |- - Copyright © 2019 [Jon Schlinkert](https://github.com/jonschlinkert). - Released under the [MIT License](LICENSE). - - *** - - _This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme) v0.8.0 on April 28 2019._ -notices: []"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/object-inspect.dep.yml,0,51,51,"---- -name: object-inspect -version: 1.11.0 -type: npm -summary: string representations of objects in node and the browser -homepage: https://github.com/inspect-js/object-inspect -license: mit -licenses: -- sources: LICENSE - text: | - MIT License - - Copyright (c) 2013 James Halliday - - Permission is hereby granted free of charge to any person obtaining a copy - of this software and associated documentation files (the ""Software"") to deal - in the Software without restriction including without limitation the rights - to use copy modify merge publish distribute sublicense and/or sell - copies of the Software and to permit persons to whom the Software is - furnished to do so subject to the following conditions: - - The above copyright notice and this permission notice shall be included in all - copies or substantial portions of the Software. - - THE SOFTWARE IS PROVIDED ""AS IS"" WITHOUT WARRANTY OF ANY KIND EXPRESS OR - IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY - FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE - AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER - LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM - OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE - SOFTWARE. -- sources: readme.markdown - text: |- - MIT - - [1]: https://npmjs.org/package/object-inspect - [2]: https://versionbadg.es/inspect-js/object-inspect.svg - [5]: https://david-dm.org/inspect-js/object-inspect.svg - [6]: https://david-dm.org/inspect-js/object-inspect - [7]: https://david-dm.org/inspect-js/object-inspect/dev-status.svg - [8]: https://david-dm.org/inspect-js/object-inspect#info=devDependencies - [11]: https://nodei.co/npm/object-inspect.png?downloads=true&stars=true - [license-image]: https://img.shields.io/npm/l/object-inspect.svg - [license-url]: LICENSE - [downloads-image]: https://img.shields.io/npm/dm/object-inspect.svg - [downloads-url]: https://npm-stat.com/charts.html?package=object-inspect - [codecov-image]: https://codecov.io/gh/inspect-js/object-inspect/branch/main/graphs/badge.svg - [codecov-url]: https://app.codecov.io/gh/inspect-js/object-inspect/ - [actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/inspect-js/object-inspect - [actions-url]: https://github.com/inspect-js/object-inspect/actions -notices: []"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/qs.dep.yml,0,40,40,"---- -name: qs -version: 6.11.0 -type: npm -summary: A querystring parser that supports nesting and arrays with a depth limit -homepage: https://github.com/ljharb/qs -license: bsd-3-clause -licenses: -- sources: LICENSE.md - text: | - BSD 3-Clause License - - Copyright (c) 2014 Nathan LaFreniere and other [contributors](https://github.com/ljharb/qs/graphs/contributors) - All rights reserved. - - Redistribution and use in source and binary forms with or without - modification are permitted provided that the following conditions are met: - - 1. Redistributions of source code must retain the above copyright notice this - list of conditions and the following disclaimer. - - 2. Redistributions in binary form must reproduce the above copyright notice - this list of conditions and the following disclaimer in the documentation - and/or other materials provided with the distribution. - - 3. Neither the name of the copyright holder nor the names of its - contributors may be used to endorse or promote products derived from - this software without specific prior written permission. - - THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" - AND ANY EXPRESS OR IMPLIED WARRANTIES INCLUDING BUT NOT LIMITED TO THE - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE - DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE - FOR ANY DIRECT INDIRECT INCIDENTAL SPECIAL EXEMPLARY OR CONSEQUENTIAL - DAMAGES (INCLUDING BUT NOT LIMITED TO PROCUREMENT OF SUBSTITUTE GOODS OR - SERVICES; LOSS OF USE DATA OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER - CAUSED AND ON ANY THEORY OF LIABILITY WHETHER IN CONTRACT STRICT LIABILITY - OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE - OF THIS SOFTWARE EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. -notices: []"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/semver.dep.yml,1,1,2,--- name: semver -version: 6.3.0 +version: 6.3.1 type: npm summary: The semantic version parser used by npm. homepage:
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/side-channel.dep.yml,0,32,32,"---- -name: side-channel -version: 1.0.4 -type: npm -summary: Store information about any JS value in a side channel. Uses WeakMap if available. -homepage: https://github.com/ljharb/side-channel#readme -license: mit -licenses: -- sources: LICENSE - text: | - MIT License - - Copyright (c) 2019 Jordan Harband - - Permission is hereby granted free of charge to any person obtaining a copy - of this software and associated documentation files (the ""Software"") to deal - in the Software without restriction including without limitation the rights - to use copy modify merge publish distribute sublicense and/or sell - copies of the Software and to permit persons to whom the Software is - furnished to do so subject to the following conditions: - - The above copyright notice and this permission notice shall be included in all - copies or substantial portions of the Software. - - THE SOFTWARE IS PROVIDED ""AS IS"" WITHOUT WARRANTY OF ANY KIND EXPRESS OR - IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY - FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE - AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER - LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM - OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE - SOFTWARE. -notices: []"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/tr46.dep.yml,0,30,30,"---- -name: tr46 -version: 0.0.3 -type: npm -summary: An implementation of the Unicode TR46 spec -homepage: https://github.com/Sebmaster/tr46.js#readme -license: mit -licenses: -- sources: Auto-generated MIT license text - text: | - MIT License - - Permission is hereby granted free of charge to any person obtaining a copy - of this software and associated documentation files (the ""Software"") to deal - in the Software without restriction including without limitation the rights - to use copy modify merge publish distribute sublicense and/or sell - copies of the Software and to permit persons to whom the Software is - furnished to do so subject to the following conditions: - - The above copyright notice and this permission notice shall be included in all - copies or substantial portions of the Software. - - THE SOFTWARE IS PROVIDED ""AS IS"" WITHOUT WARRANTY OF ANY KIND EXPRESS OR - IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY - FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE - AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER - LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM - OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE - SOFTWARE. -notices: []"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/underscore.dep.yml,0,33,33,"---- -name: underscore -version: 1.13.1 -type: npm -summary: JavaScript's functional programming helper library. -homepage: https://underscorejs.org -license: mit -licenses: -- sources: LICENSE - text: | - Copyright (c) 2009-2021 Jeremy Ashkenas Julian Gonggrijp and DocumentCloud and Investigative Reporters & Editors - - Permission is hereby granted free of charge to any person - obtaining a copy of this software and associated documentation - files (the ""Software"") to deal in the Software without - restriction including without limitation the rights to use - copy modify merge publish distribute sublicense and/or sell - copies of the Software and to permit persons to whom the - Software is furnished to do so subject to the following - conditions: - - The above copyright notice and this permission notice shall be - included in all copies or substantial portions of the Software. - - THE SOFTWARE IS PROVIDED ""AS IS"" WITHOUT WARRANTY OF ANY KIND - EXPRESS OR IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES - OF MERCHANTABILITY FITNESS FOR A PARTICULAR PURPOSE AND - NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT - HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER LIABILITY - WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING - FROM OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR - OTHER DEALINGS IN THE SOFTWARE. -notices: []"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/undici.dep.yml,7,5,12,"--- -name: has-symbols -version: 1.0.2 +name: undici +version: 5.28.4 type: npm -summary: Determine if the JS environment has Symbol support. Supports spec or shams. -homepage: https://github.com/inspect-js/has-symbols#readme +summary: An HTTP/1.1 client written from scratch for Node.js +homepage: https://undici.nodejs.org license: mit licenses: - sources: LICENSE text: | MIT License - Copyright (c) 2016 Jordan Harband + Copyright (c) Matteo Collina and Undici contributors Permission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files (the ""Software"") to deal licenses: LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. +- sources: README.md + text: MIT notices: []"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/universal-user-agent.dep.yml,1,1,2,--- name: universal-user-agent -version: 6.0.0 +version: 6.0.1 type: npm summary: Get a user agent string in both browser and node homepage:
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/uuid-3.4.0.dep.yml,2,2,4,--- name: uuid -version: 3.3.3 +version: 3.4.0 type: npm summary: RFC4122 (v1 v4 and v5) UUIDs -homepage: https://github.com/kelektiv/node-uuid#readme +homepage: license: mit licenses: - sources: LICENSE.md
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/uuid-9.0.1.dep.yml,20,0,20,"+--- +name: uuid +version: 9.0.1 +type: npm +summary: RFC4122 (v1 v4 and v5) UUIDs +homepage: +license: mit +licenses: +- sources: LICENSE.md + text: | + The MIT License (MIT) + + Copyright (c) 2010-2020 Robert Kieffer and other contributors + + Permission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files (the ""Software"") to deal in the Software without restriction including without limitation the rights to use copy modify merge publish distribute sublicense and/or sell copies of the Software and to permit persons to whom the Software is furnished to do so subject to the following conditions: + + The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. + + THE SOFTWARE IS PROVIDED ""AS IS"" WITHOUT WARRANTY OF ANY KIND EXPRESS OR IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. +notices: []"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/webidl-conversions.dep.yml,0,23,23,"---- -name: webidl-conversions -version: 3.0.1 -type: npm -summary: Implements the WebIDL algorithms for converting to and from JavaScript values -homepage: https://github.com/jsdom/webidl-conversions#readme -license: bsd-2-clause -licenses: -- sources: LICENSE.md - text: | - # The BSD 2-Clause License - - Copyright (c) 2014 Domenic Denicola - All rights reserved. - - Redistribution and use in source and binary forms with or without modification are permitted provided that the following conditions are met: - - 1. Redistributions of source code must retain the above copyright notice this list of conditions and the following disclaimer. - - 2. Redistributions in binary form must reproduce the above copyright notice this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - - THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT INDIRECT INCIDENTAL SPECIAL EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE DATA OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY WHETHER IN CONTRACT STRICT LIABILITY OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. -notices: []"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",.licenses/npm/whatwg-url.dep.yml,0,32,32,"---- -name: whatwg-url -version: 5.0.0 -type: npm -summary: An implementation of the WHATWG URL Standard's URL API and parsing machinery -homepage: https://github.com/jsdom/whatwg-url#readme -license: mit -licenses: -- sources: LICENSE.txt - text: | - The MIT License (MIT) - - Copyright (c) 2015–2016 Sebastian Mayr - - Permission is hereby granted free of charge to any person obtaining a copy - of this software and associated documentation files (the ""Software"") to deal - in the Software without restriction including without limitation the rights - to use copy modify merge publish distribute sublicense and/or sell - copies of the Software and to permit persons to whom the Software is - furnished to do so subject to the following conditions: - - The above copyright notice and this permission notice shall be included in - all copies or substantial portions of the Software. - - THE SOFTWARE IS PROVIDED ""AS IS"" WITHOUT WARRANTY OF ANY KIND EXPRESS OR - IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY - FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE - AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER - LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM - OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN - THE SOFTWARE. -notices: []"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",__test__/git-auth-helper.test.ts,4,4,8,describe('git-auth-helper tests' () => { // Mock fs.promises.readFile const realReadFile = fs.promises.readFile - jest.spyOn(fs.promises 'readFile').mockImplementation( - async (file: any options: any): Promise<Buffer> => { + jest + .spyOn(fs.promises 'readFile') + .mockImplementation(async (file: any options: any): Promise<Buffer> => { const userKnownHostsPath = path.join( os.homedir() '.ssh' describe('git-auth-helper tests' () => { } return await realReadFile(file options) - } - ) + }) // Act const authHelper = gitAuthHelper.createAuthHelper(git settings)
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",__test__/ref-helper.test.ts,2,2,4,let git: IGitCommandManager describe('ref-helper tests' () => { beforeEach(() => { - git = ({} as unknown) as IGitCommandManager + git = {} as unknown as IGitCommandManager }) it('getCheckoutInfo requires git' async () => { - const git = (null as unknown) as IGitCommandManager + const git = null as unknown as IGitCommandManager try { await refHelper.getCheckoutInfo(git 'refs/heads/my/branch' commit) throw new Error('Should not reach here')
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",__test__/retry-helper.test.ts,1,1,2,describe('retry-helper tests' () => { it('all attempts fail succeeds' async () => { let attempts = 0 - let error: Error = (null as unknown) as Error + let error: Error = null as unknown as Error try { await retryHelper.execute(() => { throw new Error(`some error ${++attempts}`)
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",jest.config.js,1,0,1,module.exports = { clearMocks: true + fakeTimers: {} moduleFileExtensions: ['js' 'ts'] testEnvironment: 'node' testMatch: ['**/*.test.ts']
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",package.json,20,20,40,"} ""homepage"": ""https://github.com/actions/checkout#readme"" ""dependencies"": { - ""@actions/core"": ""^1.10.0"" - ""@actions/exec"": ""^1.0.1"" - ""@actions/github"": ""^5.0.0"" + ""@actions/core"": ""^1.10.1"" + ""@actions/exec"": ""^1.1.1"" + ""@actions/github"": ""^6.0.0"" ""@actions/io"": ""^1.1.3"" - ""@actions/tool-cache"": ""^1.1.2"" - ""uuid"": ""^3.3.3"" + ""@actions/tool-cache"": ""^2.0.1"" + ""uuid"": ""^9.0.1"" } ""devDependencies"": { - ""@types/jest"": ""^27.0.2"" - ""@types/node"": ""^20.5.3"" - ""@types/uuid"": ""^3.4.6"" - ""@typescript-eslint/eslint-plugin"": ""^5.45.0"" - ""@typescript-eslint/parser"": ""^5.45.0"" - ""@vercel/ncc"": ""^0.36.1"" - ""eslint"": ""^7.32.0"" - ""eslint-plugin-github"": ""^4.3.2"" - ""eslint-plugin-jest"": ""^25.7.0"" - ""jest"": ""^27.3.0"" - ""jest-circus"": ""^27.3.0"" - ""js-yaml"": ""^3.13.1"" - ""prettier"": ""^1.19.1"" - ""ts-jest"": ""^27.0.7"" - ""typescript"": ""^4.4.4"" + ""@types/jest"": ""^29.5.12"" + ""@types/node"": ""^20.12.7"" + ""@types/uuid"": ""^9.0.8"" + ""@typescript-eslint/eslint-plugin"": ""^7.7.1"" + ""@typescript-eslint/parser"": ""^7.7.1"" + ""@vercel/ncc"": ""^0.38.1"" + ""eslint"": ""^8.57.0"" + ""eslint-plugin-github"": ""^4.10.2"" + ""eslint-plugin-jest"": ""^28.2.0"" + ""jest"": ""^29.7.0"" + ""jest-circus"": ""^29.7.0"" + ""js-yaml"": ""^4.1.0"" + ""prettier"": ""^3.2.5"" + ""ts-jest"": ""^29.1.2"" + ""typescript"": ""^5.4.5"" } }"
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",src/fs-helper.ts,9,6,15,export function directoryExistsSync(path: string required?: boolean): boolean { } throw new Error( - `Encountered an error when checking whether path '${path}' exists: ${(error as any) - ?.message ?? error}` + `Encountered an error when checking whether path '${path}' exists: ${ + (error as any)?.message ?? error + }` ) } export function existsSync(path: string): boolean { } throw new Error( - `Encountered an error when checking whether path '${path}' exists: ${(error as any) - ?.message ?? error}` + `Encountered an error when checking whether path '${path}' exists: ${ + (error as any)?.message ?? error + }` ) } export function fileExistsSync(path: string): boolean { } throw new Error( - `Encountered an error when checking whether path '${path}' exists: ${(error as any) - ?.message ?? error}` + `Encountered an error when checking whether path '${path}' exists: ${ + (error as any)?.message ?? error + }` ) }
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",src/git-auth-helper.ts,2,2,4,import * as path from 'path' import * as regexpHelper from './regexp-helper' import * as stateHelper from './state-helper' import * as urlHelper from './url-helper' -import {default as uuid} from 'uuid/v4' +import {v4 as uuid} from 'uuid' import {IGitCommandManager} from './git-command-manager' import {IGitSourceSettings} from './git-source-settings' class GitAuthHelper { gitSourceSettings: IGitSourceSettings | undefined ) { this.git = gitCommandManager - this.settings = gitSourceSettings || (({} as unknown) as IGitSourceSettings) + this.settings = gitSourceSettings || ({} as unknown as IGitSourceSettings) // Token auth header const serverUrl = urlHelper.getServerUrl(this.settings.githubServerUrl)
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",src/github-api-helper.ts,1,1,2,import * as io from '@actions/io' import * as path from 'path' import * as retryHelper from './retry-helper' import * as toolCache from '@actions/tool-cache' -import {default as uuid} from 'uuid/v4' +import {v4 as uuid} from 'uuid' import {getServerApiUrl} from './url-helper' const IS_WINDOWS = process.platform === 'win32'
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",src/input-helper.ts,3,2,5,import * as workflowContextHelper from './workflow-context-helper' import {IGitSourceSettings} from './git-source-settings' export async function getInputs(): Promise<IGitSourceSettings> { - const result = ({} as unknown) as IGitSourceSettings + const result = {} as unknown as IGitSourceSettings // GitHub workspace let githubWorkspacePath = process.env['GITHUB_WORKSPACE'] export async function getInputs(): Promise<IGitSourceSettings> { (core.getInput('persist-credentials') || 'false').toUpperCase() === 'TRUE' // Workflow organization ID - result.workflowOrganizationId = await workflowContextHelper.getOrganizationId() + result.workflowOrganizationId = + await workflowContextHelper.getOrganizationId() // Set safe.directory in git global config. result.setSafeDirectory =
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",src/misc/generate-docs.ts,1,1,2,function updateUsage( } // Load the action.yml - const actionYaml = yaml.safeLoad(fs.readFileSync(actionYamlPath).toString()) + const actionYaml = yaml.load(fs.readFileSync(actionYamlPath).toString()) // Load the README const originalReadme = fs.readFileSync(readmePath).toString()
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",src/ref-helper.ts,1,1,2,export async function getCheckoutInfo( throw new Error('Args ref and commit cannot both be empty') } - const result = ({} as unknown) as ICheckoutInfo + const result = {} as unknown as ICheckoutInfo const upperRef = (ref || '').toUpperCase() // SHA only
actions/checkout,9c1e94e0ad997d618b6113a2171b055037589028,Cory Miller,2024-04-24 16:04:10,"Update NPM dependencies (#1703)  * Update dependencies manually * Format files * Update licenses",src/workflow-context-helper.ts,3,2,5,export async function getOrganizationId(): Promise<number | undefined> { return id as number } catch (err) { core.debug( - `Unable to load organization ID from GITHUB_EVENT_PATH: ${(err as any) - .message || err}` + `Unable to load organization ID from GITHUB_EVENT_PATH: ${ + (err as any).message || err + }` ) } }
actions/checkout,0ad4b8fadaa221de15dcec353f45205ec38ea70b,John Wesley Walker III,2024-04-24 13:29:05,"Prep Release v4.1.4 (#1704)  * Update package.json and package-lock.json to reflect v4.1.4 * Update CHANGELOG",CHANGELOG.md,11,0,11,# Changelog +## v4.1.4 +- Disable `extensions.worktreeConfig` when disabling `sparse-checkout` by @jww3 in https://github.com/actions/checkout/pull/1692 +- Add dependabot config by @cory-miller in https://github.com/actions/checkout/pull/1688 +- Bump the minor-actions-dependencies group with 2 updates by @dependabot in https://github.com/actions/checkout/pull/1693 +- Bump word-wrap from 1.2.3 to 1.2.5 by @dependabot in https://github.com/actions/checkout/pull/1643 + +## v4.1.3 +- Check git version before attempting to disable `sparse-checkout` by @jww3 in https://github.com/actions/checkout/pull/1656 +- Add SSH user parameter by @cory-miller in https://github.com/actions/checkout/pull/1685 +- Update `actions/checkout` version in `update-main-version.yml` by @jww3 in https://github.com/actions/checkout/pull/1650 + ## v4.1.2 - Fix: Disable sparse checkout whenever `sparse-checkout` option is not present @dscho in https://github.com/actions/checkout/pull/1598
actions/checkout,0ad4b8fadaa221de15dcec353f45205ec38ea70b,John Wesley Walker III,2024-04-24 13:29:05,"Prep Release v4.1.4 (#1704)  * Update package.json and package-lock.json to reflect v4.1.4 * Update CHANGELOG",package-lock.json,2,2,4,"{ ""name"": ""checkout"" - ""version"": ""4.1.3"" + ""version"": ""4.1.4"" ""lockfileVersion"": 2 ""requires"": true ""packages"": { """": { ""name"": ""checkout"" - ""version"": ""4.1.3"" + ""version"": ""4.1.4"" ""license"": ""MIT"" ""dependencies"": { ""@actions/core"": ""^1.10.0"""
actions/checkout,0ad4b8fadaa221de15dcec353f45205ec38ea70b,John Wesley Walker III,2024-04-24 13:29:05,"Prep Release v4.1.4 (#1704)  * Update package.json and package-lock.json to reflect v4.1.4 * Update CHANGELOG",package.json,1,1,2,"{ ""name"": ""checkout"" - ""version"": ""4.1.3"" + ""version"": ""4.1.4"" ""description"": ""checkout action"" ""main"": ""lib/main.js"" ""scripts"": {"
actions/checkout,43045ae669be728bd34ed56fcd1a230c0dc4d8e2,John Wesley Walker III,2024-04-23 20:07:43,Disable `extensions.worktreeConfig` when disabling `sparse-checkout` (#1692),.github/workflows/test.yml,3,3,6,"on: - releases/* -# Note that when you see patterns like ""ref: test-data/v2/basic"" within this workflow +# Note that when you see patterns like ""ref: test-data/v2/basic"" within this workflow # these refer to ""test-data"" branches on this actions/checkout repo. # (For example test-data/v2/basic -> https://github.com/actions/checkout/tree/test-data/v2/basic) jobs: steps: # Clone this repo - name: Checkout - uses: actions/checkout@v3 + uses: actions/checkout@v4.1.1 # Basic checkout - name: Checkout basic jobs: path: basic - name: Verify basic run: __test__/verify-basic.sh --archive - + test-git-container: runs-on: ubuntu-latest container: bitnami/git:latest"
actions/checkout,43045ae669be728bd34ed56fcd1a230c0dc4d8e2,John Wesley Walker III,2024-04-23 20:07:43,Disable `extensions.worktreeConfig` when disabling `sparse-checkout` (#1692),__test__/verify-basic.sh,14,0,14,"else exit 1 fi + # Verify that sparse-checkout is disabled. + SPARSE_CHECKOUT_ENABLED=$(git -C ./basic config --local --get-all core.sparseCheckout) + if [ ""$SPARSE_CHECKOUT_ENABLED"" != """" ]; then + echo ""Expected sparse-checkout to be disabled (discovered: $SPARSE_CHECKOUT_ENABLED)"" + exit 1 + fi + + # Verify git configuration shows worktreeConfig is effectively disabled + WORKTREE_CONFIG_ENABLED=$(git -C ./basic config --local --get-all extensions.worktreeConfig) + if [[ ""$WORKTREE_CONFIG_ENABLED"" != """" ]]; then + echo ""Expected extensions.worktreeConfig (boolean) to be disabled in git config. This could be an artifact of sparse checkout functionality."" + exit 1 + fi + # Verify auth token cd basic git fetch --no-tags --depth=1 origin +refs/heads/main:refs/remotes/origin/main"
actions/checkout,43045ae669be728bd34ed56fcd1a230c0dc4d8e2,John Wesley Walker III,2024-04-23 20:07:43,Disable `extensions.worktreeConfig` when disabling `sparse-checkout` (#1692),dist/index.js,2,0,2,class GitCommandManager { disableSparseCheckout() { return __awaiter(this void 0 void 0 function* () { yield this.execGit(['sparse-checkout' 'disable']); + // Disabling 'sparse-checkout` leaves behind an undesirable side-effect in config (even in a pristine environment). + yield this.tryConfigUnset('extensions.worktreeConfig' false); }); } sparseCheckout(sparseCheckout) {
actions/checkout,43045ae669be728bd34ed56fcd1a230c0dc4d8e2,John Wesley Walker III,2024-04-23 20:07:43,Disable `extensions.worktreeConfig` when disabling `sparse-checkout` (#1692),src/git-command-manager.ts,2,0,2,class GitCommandManager { async disableSparseCheckout(): Promise<void> { await this.execGit(['sparse-checkout' 'disable']) + // Disabling 'sparse-checkout` leaves behind an undesirable side-effect in config (even in a pristine environment). + await this.tryConfigUnset('extensions.worktreeConfig' false) } async sparseCheckout(sparseCheckout: string[]): Promise<void> {
actions/checkout,37b082107ba410260a3aaddf93122e04801ce631,dependabot[bot],2024-04-23 17:14:23,"Bump the minor-actions-dependencies group with 2 updates (#1693)  Bumps the minor-actions-dependencies group with 2 updates: [docker/login-action](https://github.com/docker/login-action) and [docker/build-push-action](https://github.com/docker/build-push-action).   Updates `docker/login-action` from 3.0.0 to 3.1.0 - [Release notes](https://github.com/docker/login-action/releases) - [Commits](https://github.com/docker/login-action/compare/v3.0.0...v3.1.0)  Updates `docker/build-push-action` from 5.1.0 to 5.3.0 - [Release notes](https://github.com/docker/build-push-action/releases) - [Commits](https://github.com/docker/build-push-action/compare/v5.1.0...v5.3.0)  --- updated-dependencies: - dependency-name: docker/login-action   dependency-type: direct:production   update-type: version-update:semver-minor   dependency-group: minor-actions-dependencies - dependency-name: docker/build-push-action   dependency-type: direct:production   update-type: version-update:semver-minor   dependency-group: minor-actions-dependencies ...  Signed-off-by: dependabot[bot] <support@github.com> Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",.github/workflows/update-test-ubuntu-git.yml,2,2,4,jobs: # Use `docker/login-action` to log in to GHCR.io. # Once published the packages are scoped to the account defined here. - name: Log in to the ghcr.io container registry - uses: docker/login-action@v3.0.0 + uses: docker/login-action@v3.1.0 with: registry: ${{ env.REGISTRY }} username: ${{ github.actor }} jobs: # Use `docker/build-push-action` to build (and optionally publish) the image. - name: Build Docker Image (with optional Push) - uses: docker/build-push-action@v5.1.0 + uses: docker/build-push-action@v5.3.0 with: context: . file: images/test-ubuntu-git.Dockerfile
actions/checkout,9839dc14a02ddc6b6995e69eb3ecb98132fc8b6b,Cory Miller,2024-04-23 17:02:51,"Add dependabot config (#1688)  * Add dependabot config * Group minor and patch updates for NPM and GH Actions",.github/dependabot.yml,20,0,20,"+--- +version: 2 + +updates: +- package-ecosystem: ""npm"" + directory: ""/"" + schedule: + interval: ""weekly"" + groups: + minor-npm-dependencies: + # NPM: Only group minor and patch updates (we want to carefully review major updates) + update-types: [minor patch] +- package-ecosystem: ""github-actions"" + directory: ""/"" + schedule: + interval: ""weekly"" + groups: + minor-actions-dependencies: + # GitHub Actions: Only group minor and patch updates (we want to carefully review major updates) + update-types: [minor patch]"
actions/checkout,9b4c13b0bfa31b4514c14f74b5a166c2708f43c6,dependabot[bot],2024-04-23 10:52:06,"Bump word-wrap from 1.2.3 to 1.2.5 (#1643)  Bumps [word-wrap](https://github.com/jonschlinkert/word-wrap) from 1.2.3 to 1.2.5. - [Release notes](https://github.com/jonschlinkert/word-wrap/releases) - [Commits](https://github.com/jonschlinkert/word-wrap/compare/1.2.3...1.2.5)  --- updated-dependencies: - dependency-name: word-wrap   dependency-type: indirect ...  Signed-off-by: dependabot[bot] <support@github.com> Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",package-lock.json,6,6,12,"} } ""node_modules/word-wrap"": { - ""version"": ""1.2.3"" - ""resolved"": ""https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.3.tgz"" - ""integrity"": ""sha512-Hz/mrNwitNRh/HUAtM/VT/5VH+ygD6DV7mYKZAtHOrbs8U7lvPS6xf7EJKMF0uW1KJCl0H701g3ZGus+muE5vQ=="" + ""version"": ""1.2.5"" + ""resolved"": ""https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz"" + ""integrity"": ""sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA=="" ""dev"": true ""engines"": { ""node"": "">=0.10.0"" } } ""word-wrap"": { - ""version"": ""1.2.3"" - ""resolved"": ""https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.3.tgz"" - ""integrity"": ""sha512-Hz/mrNwitNRh/HUAtM/VT/5VH+ygD6DV7mYKZAtHOrbs8U7lvPS6xf7EJKMF0uW1KJCl0H701g3ZGus+muE5vQ=="" + ""version"": ""1.2.5"" + ""resolved"": ""https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz"" + ""integrity"": ""sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA=="" ""dev"": true } ""wrap-ansi"": {"
actions/checkout,1d96c772d19495a3b5c517cd2bc0cb401ea0529f,Cory Miller,2024-04-18 19:29:55,"Add SSH user parameter (#1685)  * Add a configurable SSH user  * Update docs with param  * Indentation of readme  * formatting woes  * Update src/url-helper.ts  Co-authored-by: Josh Gross <joshmgross@github.com>  * Update action.yml  Co-authored-by: Josh Gross <joshmgross@github.com>  * Update genfiles  ---------  Co-authored-by: Josh Gross <joshmgross@github.com>",README.md,5,0,5,Please refer to the [release page](https://github.com/actions/checkout/releases/ # Default: true ssh-strict: '' + # The user to use when connecting to the remote SSH host. By default 'git' is + # used. + # Default: git + ssh-user: '' + # Whether to configure the token or SSH key with the local git config # Default: true persist-credentials: ''
actions/checkout,1d96c772d19495a3b5c517cd2bc0cb401ea0529f,Cory Miller,2024-04-18 19:29:55,"Add SSH user parameter (#1685)  * Add a configurable SSH user  * Update docs with param  * Indentation of readme  * formatting woes  * Update src/url-helper.ts  Co-authored-by: Josh Gross <joshmgross@github.com>  * Update action.yml  Co-authored-by: Josh Gross <joshmgross@github.com>  * Update genfiles  ---------  Co-authored-by: Josh Gross <joshmgross@github.com>",__test__/git-auth-helper.test.ts,1,0,1,async function setup(testName: string): Promise<void> { sshKey: sshPath ? 'some ssh private key' : '' sshKnownHosts: '' sshStrict: true + sshUser: '' workflowOrganizationId: 123456 setSafeDirectory: true githubServerUrl: githubServerUrl
actions/checkout,1d96c772d19495a3b5c517cd2bc0cb401ea0529f,Cory Miller,2024-04-18 19:29:55,"Add SSH user parameter (#1685)  * Add a configurable SSH user  * Update docs with param  * Indentation of readme  * formatting woes  * Update src/url-helper.ts  Co-authored-by: Josh Gross <joshmgross@github.com>  * Update action.yml  Co-authored-by: Josh Gross <joshmgross@github.com>  * Update genfiles  ---------  Co-authored-by: Josh Gross <joshmgross@github.com>",action.yml,4,0,4,inputs: and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to configure additional hosts. default: true + ssh-user: + description: > + The user to use when connecting to the remote SSH host. By default 'git' is used. + default: git persist-credentials: description: 'Whether to configure the token or SSH key with the local git config' default: true
actions/checkout,1d96c772d19495a3b5c517cd2bc0cb401ea0529f,Cory Miller,2024-04-18 19:29:55,"Add SSH user parameter (#1685)  * Add a configurable SSH user  * Update docs with param  * Indentation of readme  * formatting woes  * Update src/url-helper.ts  Co-authored-by: Josh Gross <joshmgross@github.com>  * Update action.yml  Co-authored-by: Josh Gross <joshmgross@github.com>  * Update genfiles  ---------  Co-authored-by: Josh Gross <joshmgross@github.com>",dist/index.js,3,1,4,"function getInputs() { result.sshKnownHosts = core.getInput('ssh-known-hosts'); result.sshStrict = (core.getInput('ssh-strict') || 'true').toUpperCase() === 'TRUE'; + result.sshUser = core.getInput('ssh-user'); // Persist credentials result.persistCredentials = (core.getInput('persist-credentials') || 'false').toUpperCase() === 'TRUE'; function getFetchUrl(settings) { const encodedOwner = encodeURIComponent(settings.repositoryOwner); const encodedName = encodeURIComponent(settings.repositoryName); if (settings.sshKey) { - return `git@${serviceUrl.hostname}:${encodedOwner}/${encodedName}.git`; + const user = settings.sshUser.length > 0 ? settings.sshUser : 'git'; + return `${user}@${serviceUrl.hostname}:${encodedOwner}/${encodedName}.git`; } // ""origin"" is SCHEME://HOSTNAME[:PORT] return `${serviceUrl.origin}/${encodedOwner}/${encodedName}`;"
actions/checkout,1d96c772d19495a3b5c517cd2bc0cb401ea0529f,Cory Miller,2024-04-18 19:29:55,"Add SSH user parameter (#1685)  * Add a configurable SSH user  * Update docs with param  * Indentation of readme  * formatting woes  * Update src/url-helper.ts  Co-authored-by: Josh Gross <joshmgross@github.com>  * Update action.yml  Co-authored-by: Josh Gross <joshmgross@github.com>  * Update genfiles  ---------  Co-authored-by: Josh Gross <joshmgross@github.com>",src/git-source-settings.ts,5,0,5,export interface IGitSourceSettings { */ sshStrict: boolean + /** + * The SSH user to login as + */ + sshUser: string + /** * Indicates whether to persist the credentials on disk to enable scripting authenticated git commands */
actions/checkout,1d96c772d19495a3b5c517cd2bc0cb401ea0529f,Cory Miller,2024-04-18 19:29:55,"Add SSH user parameter (#1685)  * Add a configurable SSH user  * Update docs with param  * Indentation of readme  * formatting woes  * Update src/url-helper.ts  Co-authored-by: Josh Gross <joshmgross@github.com>  * Update action.yml  Co-authored-by: Josh Gross <joshmgross@github.com>  * Update genfiles  ---------  Co-authored-by: Josh Gross <joshmgross@github.com>",src/input-helper.ts,1,0,1,export async function getInputs(): Promise<IGitSourceSettings> { result.sshKnownHosts = core.getInput('ssh-known-hosts') result.sshStrict = (core.getInput('ssh-strict') || 'true').toUpperCase() === 'TRUE' + result.sshUser = core.getInput('ssh-user') // Persist credentials result.persistCredentials =
actions/checkout,1d96c772d19495a3b5c517cd2bc0cb401ea0529f,Cory Miller,2024-04-18 19:29:55,"Add SSH user parameter (#1685)  * Add a configurable SSH user  * Update docs with param  * Indentation of readme  * formatting woes  * Update src/url-helper.ts  Co-authored-by: Josh Gross <joshmgross@github.com>  * Update action.yml  Co-authored-by: Josh Gross <joshmgross@github.com>  * Update genfiles  ---------  Co-authored-by: Josh Gross <joshmgross@github.com>",src/url-helper.ts,2,1,3,"export function getFetchUrl(settings: IGitSourceSettings): string { const encodedOwner = encodeURIComponent(settings.repositoryOwner) const encodedName = encodeURIComponent(settings.repositoryName) if (settings.sshKey) { - return `git@${serviceUrl.hostname}:${encodedOwner}/${encodedName}.git` + const user = settings.sshUser.length > 0 ? settings.sshUser : 'git' + return `${user}@${serviceUrl.hostname}:${encodedOwner}/${encodedName}.git` } // ""origin"" is SCHEME://HOSTNAME[:PORT]"
actions/checkout,cd7d8d697e10461458bc61a30d094dc601a8b017,John Wesley Walker III,2024-03-14 14:40:14,"Check git version before attempting to disable `sparse-checkout` (#1656)  * Check git version before attempting to disable `sparse-checkout` * Bump `MinimumGitSparseCheckoutVersion` to 2.28 due to #1386 * Initial prep for release 4.1.3",__test__/git-auth-helper.test.ts,2,1,3,async function setup(testName: string): Promise<void> { ) tryDisableAutomaticGarbageCollection: jest.fn() tryGetFetchUrl: jest.fn() - tryReset: jest.fn() + tryReset: jest.fn() + version: jest.fn() } settings = {
actions/checkout,cd7d8d697e10461458bc61a30d094dc601a8b017,John Wesley Walker III,2024-03-14 14:40:14,"Check git version before attempting to disable `sparse-checkout` (#1656)  * Check git version before attempting to disable `sparse-checkout` * Bump `MinimumGitSparseCheckoutVersion` to 2.28 due to #1386 * Initial prep for release 4.1.3",__test__/git-directory-helper.test.ts,2,1,3,async function setup(testName: string): Promise<void> { }) tryReset: jest.fn(async () => { return true - }) + }) + version: jest.fn() } }
actions/checkout,cd7d8d697e10461458bc61a30d094dc601a8b017,John Wesley Walker III,2024-03-14 14:40:14,"Check git version before attempting to disable `sparse-checkout` (#1656)  * Check git version before attempting to disable `sparse-checkout` * Bump `MinimumGitSparseCheckoutVersion` to 2.28 due to #1386 * Initial prep for release 4.1.3",package-lock.json,2,2,4,"{ ""name"": ""checkout"" - ""version"": ""4.1.2"" + ""version"": ""4.1.3"" ""lockfileVersion"": 2 ""requires"": true ""packages"": { """": { ""name"": ""checkout"" - ""version"": ""4.1.2"" + ""version"": ""4.1.3"" ""license"": ""MIT"" ""dependencies"": { ""@actions/core"": ""^1.10.0"""
actions/checkout,cd7d8d697e10461458bc61a30d094dc601a8b017,John Wesley Walker III,2024-03-14 14:40:14,"Check git version before attempting to disable `sparse-checkout` (#1656)  * Check git version before attempting to disable `sparse-checkout` * Bump `MinimumGitSparseCheckoutVersion` to 2.28 due to #1386 * Initial prep for release 4.1.3",package.json,1,1,2,"{ ""name"": ""checkout"" - ""version"": ""4.1.2"" + ""version"": ""4.1.3"" ""description"": ""checkout action"" ""main"": ""lib/main.js"" ""scripts"": {"
actions/checkout,cd7d8d697e10461458bc61a30d094dc601a8b017,John Wesley Walker III,2024-03-14 14:40:14,"Check git version before attempting to disable `sparse-checkout` (#1656)  * Check git version before attempting to disable `sparse-checkout` * Bump `MinimumGitSparseCheckoutVersion` to 2.28 due to #1386 * Initial prep for release 4.1.3",src/git-source-provider.ts,9,2,11,import * as path from 'path' import * as refHelper from './ref-helper' import * as stateHelper from './state-helper' import * as urlHelper from './url-helper' -import {IGitCommandManager} from './git-command-manager' +import { + MinimumGitSparseCheckoutVersion + IGitCommandManager +} from './git-command-manager' import {IGitSourceSettings} from './git-source-settings' export async function getSource(settings: IGitSourceSettings): Promise<void> { export async function getSource(settings: IGitSourceSettings): Promise<void> { // Sparse checkout if (!settings.sparseCheckout) { - await git.disableSparseCheckout() + let gitVersion = await git.version() + // no need to disable sparse-checkout if the installed git runtime doesn't even support it. + if (gitVersion.checkMinimum(MinimumGitSparseCheckoutVersion)) { + await git.disableSparseCheckout() + } } else { core.startGroup('Setting up sparse checkout') if (settings.sparseCheckoutConeMode) {
actions/checkout,8410ad0602e1e429cee44a835ae9f77f654a6694,John Wesley Walker III,2024-03-12 11:39:30,Update `actions/checkout` version in `update-main-version.yml` (#1650),.github/workflows/update-main-version.yml,4,1,5,jobs: tag: runs-on: ubuntu-latest steps: - - uses: actions/checkout@v3 + # Note this update workflow can also be used as a rollback tool. + # For that reason it's best to pin `actions/checkout` to a known stable version + # (typically about two releases back). + - uses: actions/checkout@v4.1.1 with: fetch-depth: 0 - name: Git config
actions/checkout,9bb56186c3b09b4f86b1c65136769dd318469633,John Wesley Walker III,2024-03-12 11:11:01,"Prep for release of  v4.1.2  (#1649)  * Add v4.1.2 and v4.1.1 to CHANGELOG.md * Bump version in package.json to 4.1.2 * Ran `npm i` to regenerate package-lock.json",CHANGELOG.md,7,0,7,# Changelog +## v4.1.2 +- Fix: Disable sparse checkout whenever `sparse-checkout` option is not present @dscho in https://github.com/actions/checkout/pull/1598 + +## v4.1.1 +- Correct link to GitHub Docs by @peterbe in https://github.com/actions/checkout/pull/1511 +- Link to release page from what's new section by @cory-miller in https://github.com/actions/checkout/pull/1514 + ## v4.1.0 - [Add support for partial checkout filters](https://github.com/actions/checkout/pull/1396)
actions/checkout,9bb56186c3b09b4f86b1c65136769dd318469633,John Wesley Walker III,2024-03-12 11:11:01,"Prep for release of  v4.1.2  (#1649)  * Add v4.1.2 and v4.1.1 to CHANGELOG.md * Bump version in package.json to 4.1.2 * Ran `npm i` to regenerate package-lock.json",package-lock.json,2,2,4,"{ ""name"": ""checkout"" - ""version"": ""4.1.0"" + ""version"": ""4.1.2"" ""lockfileVersion"": 2 ""requires"": true ""packages"": { """": { ""name"": ""checkout"" - ""version"": ""4.1.0"" + ""version"": ""4.1.2"" ""license"": ""MIT"" ""dependencies"": { ""@actions/core"": ""^1.10.0"""
actions/checkout,9bb56186c3b09b4f86b1c65136769dd318469633,John Wesley Walker III,2024-03-12 11:11:01,"Prep for release of  v4.1.2  (#1649)  * Add v4.1.2 and v4.1.1 to CHANGELOG.md * Bump version in package.json to 4.1.2 * Ran `npm i` to regenerate package-lock.json",package.json,2,2,4,"{ ""name"": ""checkout"" - ""version"": ""4.1.0"" + ""version"": ""4.1.2"" ""description"": ""checkout action"" ""main"": ""lib/main.js"" ""scripts"": { ""ts-jest"": ""^27.0.7"" ""typescript"": ""^4.4.4"" } -} \ No newline at end of file +}"
actions/checkout,b32f140b0c872d58512e0a66172253c302617b90,John Wesley Walker III,2024-02-22 13:38:58,"Warn on attempts to publish `test-ubuntu-git` from non-main branch. (#1623)  * Warn on attempts to publish test-ubuntu-git from non-main branch. * Rename build step to clarify that Push is optional.",.github/workflows/update-test-ubuntu-git.yml,5,1,6,"jobs: # Use `date` with a custom format to achieve the key=value format GITHUB_OUTPUT expects. run: date -u ""+now=%Y%m%d.%H%M%S.%3NZ"" >> ""$GITHUB_OUTPUT"" + - name: Issue Image Publish Warning + if: ${{ inputs.publish && github.ref_name != 'main' }} + run: echo ""::warning::test-ubuntu-git images can only be published from the actions/checkout 'main' branch. Workflow will continue with push/publish disabled."" + # Use `docker/build-push-action` to build (and optionally publish) the image. - - name: Build and push Docker image + - name: Build Docker Image (with optional Push) uses: docker/build-push-action@v5.1.0 with: context: ."
actions/checkout,2650dbd060003e3b5ae211e4358852f336b682a7,John Wesley Walker III,2024-02-22 09:59:35,"Give `test-ubuntu-git` its own `README` (#1620)  * Give `test-ubuntu-git` its own `README` * Refined title and description in `test-ubuntu-git.Dockerfile` * nit accepted:  Remove double space  ---------  Co-authored-by: Ferenc Hammerl <31069338+fhammerl@users.noreply.github.com>",images/test-ubuntu-git.Dockerfile,3,1,4,"FROM ubuntu:latest RUN apt update RUN apt install -y git -LABEL org.opencontainers.image.description=""Ubuntu image with git pre-installed"" +LABEL org.opencontainers.image.title=""Ubuntu + git (validation image)"" +LABEL org.opencontainers.image.description=""Ubuntu image with git pre-installed. Intended primarily for testing `actions/checkout` during CI/CD workflows."" +LABEL org.opencontainers.image.documentation=""https://github.com/actions/checkout/tree/main/images/test-ubuntu-git.md"" LABEL org.opencontainers.image.licenses=MIT"
actions/checkout,2650dbd060003e3b5ae211e4358852f336b682a7,John Wesley Walker III,2024-02-22 09:59:35,"Give `test-ubuntu-git` its own `README` (#1620)  * Give `test-ubuntu-git` its own `README` * Refined title and description in `test-ubuntu-git.Dockerfile` * nit accepted:  Remove double space  ---------  Co-authored-by: Ferenc Hammerl <31069338+fhammerl@users.noreply.github.com>",images/test-ubuntu-git.md,15,0,15,+# `test-ubuntu-git` Container Image + +[![Publish test-ubuntu-git Container](https://github.com/actions/checkout/actions/workflows/update-test-ubuntu-git.yml/badge.svg)](https://github.com/actions/checkout/actions/workflows/update-test-ubuntu-git.yml) + +## Purpose + +`test-ubuntu-git` is a container image hosted on the GitHub Container Registry `ghcr.io`. + +It is intended primarily for testing the [`actions/checkout` repository](https://github.com/actions/checkout) as part of `actions/checkout`'s CI/CD workflows. + +The composition of `test-ubuntu-git` is intentionally minimal. It is comprised of [git](https://git-scm.com/) installed on top of a [base-level ubuntu image](https://hub.docker.com/_/ubuntu/tags). + +# License + +`test-ubuntu-git` is released under the [MIT License](/LICENSE).
actions/checkout,aadec899646c8e0f34c52d9219c2faac36626b55,Johannes Schindelin,2024-02-21 12:56:19,"Explicitly disable sparse checkout unless asked for (#1598)  When a worktree is reused by actions/checkout and the first time sparse checkout was enabled  we need to ensure that the second time it is only a sparse checkout if explicitly asked for. Otherwise  we need to disable the sparse checkout so that a full checkout is the outcome of this Action.  ## Details * If no `sparse-checkout` parameter is specified  disable it  This should allow users to reuse existing folders when running `actions/checkout` where a previous run asked for a sparse checkout but the current run does not ask for a sparse checkout.  This fixes https://github.com/actions/checkout/issues/1475  There are use cases in particular with non-ephemeral (self-hosted) runners where an existing worktree (that has been initialized as a sparse checkout) is reused in subsequent CI runs (where `actions/checkout` is run _without_ any `sparse-checkout` parameter).  In these scenarios  we need to make sure that the sparse checkout is disabled before checking out the files.  ### Also includes:  * npm run build * ci: verify that an existing sparse checkout can be made unsparse * Added a clarifying comment about test branches. * `test-proxy` now uses newly-minted `test-ubuntu-git` container image from ghcr.io  ---------  Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de> Co-authored-by: John Wesley Walker III <81404201+jww3@users.noreply.github.com>",.github/workflows/test.yml,17,2,19,"on: - main - releases/* + +# Note that when you see patterns like ""ref: test-data/v2/basic"" within this workflow +# these refer to ""test-data"" branches on this actions/checkout repo. +# (For example test-data/v2/basic -> https://github.com/actions/checkout/tree/test-data/v2/basic) + jobs: build: runs-on: ubuntu-latest jobs: - name: Verify sparse checkout run: __test__/verify-sparse-checkout.sh + # Disabled sparse checkout in existing checkout + - name: Disabled sparse checkout + uses: ./ + with: + path: sparse-checkout + + - name: Verify disabled sparse checkout + shell: bash + run: set -x && ls -l sparse-checkout/src/git-command-manager.ts + # Sparse checkout (non-cone mode) - name: Sparse checkout (non-cone mode) uses: ./ jobs: test-proxy: runs-on: ubuntu-latest container: - image: alpine/git:latest + image: ghcr.io/actions/test-ubuntu-git:main.20240221.114913.703z options: --dns 127.0.0.1 services: squid-proxy: jobs: - name: Fix Checkout v3 uses: actions/checkout@v3 with: - path: v3 \ No newline at end of file + path: v3"
actions/checkout,aadec899646c8e0f34c52d9219c2faac36626b55,Johannes Schindelin,2024-02-21 12:56:19,"Explicitly disable sparse checkout unless asked for (#1598)  When a worktree is reused by actions/checkout and the first time sparse checkout was enabled  we need to ensure that the second time it is only a sparse checkout if explicitly asked for. Otherwise  we need to disable the sparse checkout so that a full checkout is the outcome of this Action.  ## Details * If no `sparse-checkout` parameter is specified  disable it  This should allow users to reuse existing folders when running `actions/checkout` where a previous run asked for a sparse checkout but the current run does not ask for a sparse checkout.  This fixes https://github.com/actions/checkout/issues/1475  There are use cases in particular with non-ephemeral (self-hosted) runners where an existing worktree (that has been initialized as a sparse checkout) is reused in subsequent CI runs (where `actions/checkout` is run _without_ any `sparse-checkout` parameter).  In these scenarios  we need to make sure that the sparse checkout is disabled before checking out the files.  ### Also includes:  * npm run build * ci: verify that an existing sparse checkout can be made unsparse * Added a clarifying comment about test branches. * `test-proxy` now uses newly-minted `test-ubuntu-git` container image from ghcr.io  ---------  Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de> Co-authored-by: John Wesley Walker III <81404201+jww3@users.noreply.github.com>",__test__/git-auth-helper.test.ts,1,0,1,async function setup(testName: string): Promise<void> { branchDelete: jest.fn() branchExists: jest.fn() branchList: jest.fn() + disableSparseCheckout: jest.fn() sparseCheckout: jest.fn() sparseCheckoutNonConeMode: jest.fn() checkout: jest.fn()
actions/checkout,aadec899646c8e0f34c52d9219c2faac36626b55,Johannes Schindelin,2024-02-21 12:56:19,"Explicitly disable sparse checkout unless asked for (#1598)  When a worktree is reused by actions/checkout and the first time sparse checkout was enabled  we need to ensure that the second time it is only a sparse checkout if explicitly asked for. Otherwise  we need to disable the sparse checkout so that a full checkout is the outcome of this Action.  ## Details * If no `sparse-checkout` parameter is specified  disable it  This should allow users to reuse existing folders when running `actions/checkout` where a previous run asked for a sparse checkout but the current run does not ask for a sparse checkout.  This fixes https://github.com/actions/checkout/issues/1475  There are use cases in particular with non-ephemeral (self-hosted) runners where an existing worktree (that has been initialized as a sparse checkout) is reused in subsequent CI runs (where `actions/checkout` is run _without_ any `sparse-checkout` parameter).  In these scenarios  we need to make sure that the sparse checkout is disabled before checking out the files.  ### Also includes:  * npm run build * ci: verify that an existing sparse checkout can be made unsparse * Added a clarifying comment about test branches. * `test-proxy` now uses newly-minted `test-ubuntu-git` container image from ghcr.io  ---------  Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de> Co-authored-by: John Wesley Walker III <81404201+jww3@users.noreply.github.com>",__test__/git-directory-helper.test.ts,1,0,1,async function setup(testName: string): Promise<void> { branchList: jest.fn(async () => { return [] }) + disableSparseCheckout: jest.fn() sparseCheckout: jest.fn() sparseCheckoutNonConeMode: jest.fn() checkout: jest.fn()
actions/checkout,aadec899646c8e0f34c52d9219c2faac36626b55,Johannes Schindelin,2024-02-21 12:56:19,"Explicitly disable sparse checkout unless asked for (#1598)  When a worktree is reused by actions/checkout and the first time sparse checkout was enabled  we need to ensure that the second time it is only a sparse checkout if explicitly asked for. Otherwise  we need to disable the sparse checkout so that a full checkout is the outcome of this Action.  ## Details * If no `sparse-checkout` parameter is specified  disable it  This should allow users to reuse existing folders when running `actions/checkout` where a previous run asked for a sparse checkout but the current run does not ask for a sparse checkout.  This fixes https://github.com/actions/checkout/issues/1475  There are use cases in particular with non-ephemeral (self-hosted) runners where an existing worktree (that has been initialized as a sparse checkout) is reused in subsequent CI runs (where `actions/checkout` is run _without_ any `sparse-checkout` parameter).  In these scenarios  we need to make sure that the sparse checkout is disabled before checking out the files.  ### Also includes:  * npm run build * ci: verify that an existing sparse checkout can be made unsparse * Added a clarifying comment about test branches. * `test-proxy` now uses newly-minted `test-ubuntu-git` container image from ghcr.io  ---------  Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de> Co-authored-by: John Wesley Walker III <81404201+jww3@users.noreply.github.com>",dist/index.js,9,1,10,class GitCommandManager { return result; }); } + disableSparseCheckout() { + return __awaiter(this void 0 void 0 function* () { + yield this.execGit(['sparse-checkout' 'disable']); + }); + } sparseCheckout(sparseCheckout) { return __awaiter(this void 0 void 0 function* () { yield this.execGit(['sparse-checkout' 'set' ...sparseCheckout]); function getSource(settings) { core.endGroup(); } // Sparse checkout - if (settings.sparseCheckout) { + if (!settings.sparseCheckout) { + yield git.disableSparseCheckout(); + } + else { core.startGroup('Setting up sparse checkout'); if (settings.sparseCheckoutConeMode) { yield git.sparseCheckout(settings.sparseCheckout);
actions/checkout,aadec899646c8e0f34c52d9219c2faac36626b55,Johannes Schindelin,2024-02-21 12:56:19,"Explicitly disable sparse checkout unless asked for (#1598)  When a worktree is reused by actions/checkout and the first time sparse checkout was enabled  we need to ensure that the second time it is only a sparse checkout if explicitly asked for. Otherwise  we need to disable the sparse checkout so that a full checkout is the outcome of this Action.  ## Details * If no `sparse-checkout` parameter is specified  disable it  This should allow users to reuse existing folders when running `actions/checkout` where a previous run asked for a sparse checkout but the current run does not ask for a sparse checkout.  This fixes https://github.com/actions/checkout/issues/1475  There are use cases in particular with non-ephemeral (self-hosted) runners where an existing worktree (that has been initialized as a sparse checkout) is reused in subsequent CI runs (where `actions/checkout` is run _without_ any `sparse-checkout` parameter).  In these scenarios  we need to make sure that the sparse checkout is disabled before checking out the files.  ### Also includes:  * npm run build * ci: verify that an existing sparse checkout can be made unsparse * Added a clarifying comment about test branches. * `test-proxy` now uses newly-minted `test-ubuntu-git` container image from ghcr.io  ---------  Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de> Co-authored-by: John Wesley Walker III <81404201+jww3@users.noreply.github.com>",src/git-command-manager.ts,5,0,5,export interface IGitCommandManager { branchDelete(remote: boolean branch: string): Promise<void> branchExists(remote: boolean pattern: string): Promise<boolean> branchList(remote: boolean): Promise<string[]> + disableSparseCheckout(): Promise<void> sparseCheckout(sparseCheckout: string[]): Promise<void> sparseCheckoutNonConeMode(sparseCheckout: string[]): Promise<void> checkout(ref: string startPoint: string): Promise<void> class GitCommandManager { return result } + async disableSparseCheckout(): Promise<void> { + await this.execGit(['sparse-checkout' 'disable']) + } + async sparseCheckout(sparseCheckout: string[]): Promise<void> { await this.execGit(['sparse-checkout' 'set' ...sparseCheckout]) }
actions/checkout,aadec899646c8e0f34c52d9219c2faac36626b55,Johannes Schindelin,2024-02-21 12:56:19,"Explicitly disable sparse checkout unless asked for (#1598)  When a worktree is reused by actions/checkout and the first time sparse checkout was enabled  we need to ensure that the second time it is only a sparse checkout if explicitly asked for. Otherwise  we need to disable the sparse checkout so that a full checkout is the outcome of this Action.  ## Details * If no `sparse-checkout` parameter is specified  disable it  This should allow users to reuse existing folders when running `actions/checkout` where a previous run asked for a sparse checkout but the current run does not ask for a sparse checkout.  This fixes https://github.com/actions/checkout/issues/1475  There are use cases in particular with non-ephemeral (self-hosted) runners where an existing worktree (that has been initialized as a sparse checkout) is reused in subsequent CI runs (where `actions/checkout` is run _without_ any `sparse-checkout` parameter).  In these scenarios  we need to make sure that the sparse checkout is disabled before checking out the files.  ### Also includes:  * npm run build * ci: verify that an existing sparse checkout can be made unsparse * Added a clarifying comment about test branches. * `test-proxy` now uses newly-minted `test-ubuntu-git` container image from ghcr.io  ---------  Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de> Co-authored-by: John Wesley Walker III <81404201+jww3@users.noreply.github.com>",src/git-source-provider.ts,3,1,4,export async function getSource(settings: IGitSourceSettings): Promise<void> { } // Sparse checkout - if (settings.sparseCheckout) { + if (!settings.sparseCheckout) { + await git.disableSparseCheckout() + } else { core.startGroup('Setting up sparse checkout') if (settings.sparseCheckoutConeMode) { await git.sparseCheckout(settings.sparseCheckout)
kubernetes/kubernetes,3a53784ecbe4bed2aa0cbc159acbb56add05eef9,Kubernetes Prow Robot,2025-10-07 15:55:02,Merge pull request #133876 from kei01234kei/make_v1_version_fist_priotiry_inresource  make v1 resource version first priority in resource,api/discovery/apis__resource.k8s.io__v1.json,4,4,8,"""name"": ""deviceclasses"" ""namespaced"": false ""singularName"": ""deviceclass"" - ""storageVersionHash"": ""weQRMT6DeYM="" + ""storageVersionHash"": ""Yk2PTc1Ybxk="" ""verbs"": [ ""create"" ""delete"" ""name"": ""resourceclaims"" ""namespaced"": true ""singularName"": ""resourceclaim"" - ""storageVersionHash"": ""EJAWH5WrAYg="" + ""storageVersionHash"": ""wgAZaHcZxUg="" ""verbs"": [ ""create"" ""delete"" ""name"": ""resourceclaimtemplates"" ""namespaced"": true ""singularName"": ""resourceclaimtemplate"" - ""storageVersionHash"": ""24m0okHrUtk="" + ""storageVersionHash"": ""TuzjC49aUfM="" ""verbs"": [ ""create"" ""delete"" ""name"": ""resourceslices"" ""namespaced"": false ""singularName"": ""resourceslice"" - ""storageVersionHash"": ""z6Bc9vgk6yE="" + ""storageVersionHash"": ""KsC072WgaEY="" ""verbs"": [ ""create"" ""delete"""
kubernetes/kubernetes,3a53784ecbe4bed2aa0cbc159acbb56add05eef9,Kubernetes Prow Robot,2025-10-07 15:55:02,Merge pull request #133876 from kei01234kei/make_v1_version_fist_priotiry_inresource  make v1 resource version first priority in resource,api/discovery/apis__resource.k8s.io__v1beta1.json,4,4,8,"""name"": ""deviceclasses"" ""namespaced"": false ""singularName"": ""deviceclass"" - ""storageVersionHash"": ""weQRMT6DeYM="" + ""storageVersionHash"": ""Yk2PTc1Ybxk="" ""verbs"": [ ""create"" ""delete"" ""name"": ""resourceclaims"" ""namespaced"": true ""singularName"": ""resourceclaim"" - ""storageVersionHash"": ""EJAWH5WrAYg="" + ""storageVersionHash"": ""wgAZaHcZxUg="" ""verbs"": [ ""create"" ""delete"" ""name"": ""resourceclaimtemplates"" ""namespaced"": true ""singularName"": ""resourceclaimtemplate"" - ""storageVersionHash"": ""24m0okHrUtk="" + ""storageVersionHash"": ""TuzjC49aUfM="" ""verbs"": [ ""create"" ""delete"" ""name"": ""resourceslices"" ""namespaced"": false ""singularName"": ""resourceslice"" - ""storageVersionHash"": ""z6Bc9vgk6yE="" + ""storageVersionHash"": ""KsC072WgaEY="" ""verbs"": [ ""create"" ""delete"""
kubernetes/kubernetes,3a53784ecbe4bed2aa0cbc159acbb56add05eef9,Kubernetes Prow Robot,2025-10-07 15:55:02,Merge pull request #133876 from kei01234kei/make_v1_version_fist_priotiry_inresource  make v1 resource version first priority in resource,api/discovery/apis__resource.k8s.io__v1beta2.json,4,4,8,"""name"": ""deviceclasses"" ""namespaced"": false ""singularName"": ""deviceclass"" - ""storageVersionHash"": ""weQRMT6DeYM="" + ""storageVersionHash"": ""Yk2PTc1Ybxk="" ""verbs"": [ ""create"" ""delete"" ""name"": ""resourceclaims"" ""namespaced"": true ""singularName"": ""resourceclaim"" - ""storageVersionHash"": ""EJAWH5WrAYg="" + ""storageVersionHash"": ""wgAZaHcZxUg="" ""verbs"": [ ""create"" ""delete"" ""name"": ""resourceclaimtemplates"" ""namespaced"": true ""singularName"": ""resourceclaimtemplate"" - ""storageVersionHash"": ""24m0okHrUtk="" + ""storageVersionHash"": ""TuzjC49aUfM="" ""verbs"": [ ""create"" ""delete"" ""name"": ""resourceslices"" ""namespaced"": false ""singularName"": ""resourceslice"" - ""storageVersionHash"": ""z6Bc9vgk6yE="" + ""storageVersionHash"": ""KsC072WgaEY="" ""verbs"": [ ""create"" ""delete"""
kubernetes/kubernetes,3a53784ecbe4bed2aa0cbc159acbb56add05eef9,Kubernetes Prow Robot,2025-10-07 15:55:02,Merge pull request #133876 from kei01234kei/make_v1_version_fist_priotiry_inresource  make v1 resource version first priority in resource,pkg/apis/resource/install/install.go,1,2,3,func Install(scheme *runtime.Scheme) { utilruntime.Must(v1beta1.AddToScheme(scheme)) utilruntime.Must(v1beta2.AddToScheme(scheme)) utilruntime.Must(v1.AddToScheme(scheme)) - // TODO (https://github.com/kubernetes/kubernetes/issues/133131): put v1 first in 1.35 - utilruntime.Must(scheme.SetVersionPriority(v1beta2.SchemeGroupVersion v1.SchemeGroupVersion v1beta1.SchemeGroupVersion v1alpha3.SchemeGroupVersion)) + utilruntime.Must(scheme.SetVersionPriority(v1.SchemeGroupVersion v1beta2.SchemeGroupVersion v1beta1.SchemeGroupVersion v1alpha3.SchemeGroupVersion)) }
kubernetes/kubernetes,3a53784ecbe4bed2aa0cbc159acbb56add05eef9,Kubernetes Prow Robot,2025-10-07 15:55:02,Merge pull request #133876 from kei01234kei/make_v1_version_fist_priotiry_inresource  make v1 resource version first priority in resource,pkg/controlplane/storageversionhashdata/data.go,4,4,8,"var GVRToStorageVersionHash = map[string]string{ ""rbac.authorization.k8s.io/v1/clusterroles"": ""bYE5ZWDrJ44="" ""rbac.authorization.k8s.io/v1/rolebindings"": ""eGsCzGH6b1g="" ""rbac.authorization.k8s.io/v1/roles"": ""7FuwZcIIItM="" - ""resource.k8s.io/v1/deviceclasses"": ""weQRMT6DeYM="" - ""resource.k8s.io/v1/resourceclaims"": ""EJAWH5WrAYg="" - ""resource.k8s.io/v1/resourceclaimtemplates"": ""24m0okHrUtk="" - ""resource.k8s.io/v1/resourceslices"": ""z6Bc9vgk6yE="" + ""resource.k8s.io/v1/deviceclasses"": ""Yk2PTc1Ybxk="" + ""resource.k8s.io/v1/resourceclaims"": ""wgAZaHcZxUg="" + ""resource.k8s.io/v1/resourceclaimtemplates"": ""TuzjC49aUfM="" + ""resource.k8s.io/v1/resourceslices"": ""KsC072WgaEY="" ""scheduling.k8s.io/v1/priorityclasses"": ""1QwjyaZjj3Y="" ""storage.k8s.io/v1/csidrivers"": ""hL6j/rwBV5w="" ""storage.k8s.io/v1/csinodes"": ""Pe62DkZtjuo="""
kubernetes/kubernetes,ad82c3d39f5e9f21e173ffeb8aa57953a0da4601,Kubernetes Prow Robot,2025-10-06 22:42:59,Merge pull request #134391 from lalitc375/k8s-uuid  Add DV for uids in resourceClaim Status,pkg/apis/resource/validation/validation.go,3,3,6,"func validateUID(uid string fldPath *field.Path) field.ErrorList { } else if len(uid) != 36 || uid != strings.ToLower(uid) { allErrs = append(allErrs field.Invalid(fldPath uid ""uid must be in RFC 4122 normalized form `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx` with lowercase hexadecimal characters"")) } - return allErrs + return allErrs.WithOrigin(""format=k8s-uuid"") } // ValidateResourceClaim validates a ResourceClaim. func validateDeviceRequestAllocationResult(result resource.DeviceRequestAllocati allErrs = append(allErrs validateDeviceName(result.Device fldPath.Child(""device""))...) allErrs = append(allErrs validateDeviceBindingParameters(result.BindingConditions result.BindingFailureConditions fldPath)...) if result.ShareID != nil { - allErrs = append(allErrs validateUID(string(*result.ShareID) fldPath.Child(""shareID""))...) + allErrs = append(allErrs validateUID(string(*result.ShareID) fldPath.Child(""shareID"")).MarkCoveredByDeclarative()...) } return allErrs } func validateDeviceStatus(device resource.AllocatedDeviceStatus fldPath *field. allErrs = append(allErrs validatePoolName(device.Pool fldPath.Child(""pool""))...) allErrs = append(allErrs validateDeviceName(device.Device fldPath.Child(""device""))...) if device.ShareID != nil { - allErrs = append(allErrs validateUID(*device.ShareID fldPath.Child(""shareID""))...) + allErrs = append(allErrs validateUID(*device.ShareID fldPath.Child(""shareID"")).MarkCoveredByDeclarative()...) } deviceID := structured.MakeDeviceID(device.Driver device.Pool device.Device) sharedDeviceID := structured.MakeSharedDeviceID(deviceID (*types.UID)(device.ShareID))"
kubernetes/kubernetes,ad82c3d39f5e9f21e173ffeb8aa57953a0da4601,Kubernetes Prow Robot,2025-10-06 22:42:59,Merge pull request #134391 from lalitc375/k8s-uuid  Add DV for uids in resourceClaim Status,pkg/apis/resource/validation/validation_resourceclaim_test.go,4,4,8,"func TestValidateClaimStatusUpdate(t *testing.T) { } ""invalid-add-allocated-status-invalid-share-id"": { wantFailures: field.ErrorList{ - field.Invalid(field.NewPath(""status"" ""devices"").Index(0).Child(""shareID"") badLengthShareIDStr ""error validating uid: invalid UUID length: 1"") - field.Invalid(field.NewPath(""status"" ""devices"").Index(1).Child(""shareID"") badFormatShareIDStr ""uid must be in RFC 4122 normalized form `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx` with lowercase hexadecimal characters"") - field.Invalid(field.NewPath(""status"" ""allocation"" ""devices"" ""results"").Index(0).Child(""shareID"") badLengthShareIDStr ""error validating uid: invalid UUID length: 1"") - field.Invalid(field.NewPath(""status"" ""allocation"" ""devices"" ""results"").Index(1).Child(""shareID"") badFormatShareIDStr ""uid must be in RFC 4122 normalized form `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx` with lowercase hexadecimal characters"") + field.Invalid(field.NewPath(""status"" ""devices"").Index(0).Child(""shareID"") badLengthShareIDStr ""error validating uid: invalid UUID length: 1"").MarkCoveredByDeclarative() + field.Invalid(field.NewPath(""status"" ""devices"").Index(1).Child(""shareID"") badFormatShareIDStr ""uid must be in RFC 4122 normalized form `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx` with lowercase hexadecimal characters"").MarkCoveredByDeclarative() + field.Invalid(field.NewPath(""status"" ""allocation"" ""devices"" ""results"").Index(0).Child(""shareID"") badLengthShareIDStr ""error validating uid: invalid UUID length: 1"").MarkCoveredByDeclarative() + field.Invalid(field.NewPath(""status"" ""allocation"" ""devices"" ""results"").Index(1).Child(""shareID"") badFormatShareIDStr ""uid must be in RFC 4122 normalized form `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx` with lowercase hexadecimal characters"").MarkCoveredByDeclarative() } oldClaim: testClaim(goodName goodNS validClaimSpec) update: func(claim *resource.ResourceClaim) *resource.ResourceClaim {"
kubernetes/kubernetes,ad82c3d39f5e9f21e173ffeb8aa57953a0da4601,Kubernetes Prow Robot,2025-10-06 22:42:59,Merge pull request #134391 from lalitc375/k8s-uuid  Add DV for uids in resourceClaim Status,staging/src/k8s.io/api/resource/v1/generated.proto,4,0,4,message AllocatedDeviceStatus { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid optional string shareID = 7; // Conditions contains the latest observation of the device's state. message DeviceRequestAllocationResult { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid optional string shareID = 9; // ConsumedCapacity tracks the amount of capacity consumed per device as part of the claim request.
kubernetes/kubernetes,ad82c3d39f5e9f21e173ffeb8aa57953a0da4601,Kubernetes Prow Robot,2025-10-06 22:42:59,Merge pull request #134391 from lalitc375/k8s-uuid  Add DV for uids in resourceClaim Status,staging/src/k8s.io/api/resource/v1/types.go,4,0,4,"type DeviceRequestAllocationResult struct { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid ShareID *types.UID `json:""shareID omitempty"" protobuf:""bytes 9 opt name=shareID""` // ConsumedCapacity tracks the amount of capacity consumed per device as part of the claim request. type AllocatedDeviceStatus struct { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid ShareID *string `json:""shareID omitempty"" protobuf:""bytes 7 opt name=shareID""` // Conditions contains the latest observation of the device's state."
kubernetes/kubernetes,ad82c3d39f5e9f21e173ffeb8aa57953a0da4601,Kubernetes Prow Robot,2025-10-06 22:42:59,Merge pull request #134391 from lalitc375/k8s-uuid  Add DV for uids in resourceClaim Status,staging/src/k8s.io/api/resource/v1beta1/generated.proto,4,0,4,message AllocatedDeviceStatus { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid optional string shareID = 7; // Conditions contains the latest observation of the device's state. message DeviceRequestAllocationResult { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid optional string shareID = 9; // ConsumedCapacity tracks the amount of capacity consumed per device as part of the claim request.
kubernetes/kubernetes,ad82c3d39f5e9f21e173ffeb8aa57953a0da4601,Kubernetes Prow Robot,2025-10-06 22:42:59,Merge pull request #134391 from lalitc375/k8s-uuid  Add DV for uids in resourceClaim Status,staging/src/k8s.io/api/resource/v1beta1/types.go,4,0,4,"type DeviceRequestAllocationResult struct { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid ShareID *types.UID `json:""shareID omitempty"" protobuf:""bytes 9 opt name=shareID""` // ConsumedCapacity tracks the amount of capacity consumed per device as part of the claim request. type AllocatedDeviceStatus struct { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid ShareID *string `json:""shareID omitempty"" protobuf:""bytes 7 opt name=shareID""` // Conditions contains the latest observation of the device's state."
kubernetes/kubernetes,ad82c3d39f5e9f21e173ffeb8aa57953a0da4601,Kubernetes Prow Robot,2025-10-06 22:42:59,Merge pull request #134391 from lalitc375/k8s-uuid  Add DV for uids in resourceClaim Status,staging/src/k8s.io/api/resource/v1beta2/generated.proto,4,0,4,message AllocatedDeviceStatus { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid optional string shareID = 7; // Conditions contains the latest observation of the device's state. message DeviceRequestAllocationResult { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid optional string shareID = 9; // ConsumedCapacity tracks the amount of capacity consumed per device as part of the claim request.
kubernetes/kubernetes,ad82c3d39f5e9f21e173ffeb8aa57953a0da4601,Kubernetes Prow Robot,2025-10-06 22:42:59,Merge pull request #134391 from lalitc375/k8s-uuid  Add DV for uids in resourceClaim Status,staging/src/k8s.io/api/resource/v1beta2/types.go,4,0,4,"type DeviceRequestAllocationResult struct { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid ShareID *types.UID `json:""shareID omitempty"" protobuf:""bytes 9 opt name=shareID""` // ConsumedCapacity tracks the amount of capacity consumed per device as part of the claim request. type AllocatedDeviceStatus struct { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid ShareID *string `json:""shareID omitempty"" protobuf:""bytes 7 opt name=shareID""` // Conditions contains the latest observation of the device's state."
kubernetes/kubernetes,9343d041209560f487cdf9121d5400a5685fa27a,Kubernetes Prow Robot,2025-10-06 21:53:06,Merge pull request #134408 from yongruilin/vg_resourceclaim  feat(validation-gen): add path normalization options & migration k8s:maxItem on ResourceClaimSpec fields,pkg/apis/resource/validation/validation.go,4,4,8,"func validateDeviceRequest(request resource.DeviceRequest fldPath *field.Path func(subRequest resource.DeviceSubRequest) (string string) { return subRequest.Name ""name"" } - fldPath.Child(""firstAvailable""))...) + fldPath.Child(""firstAvailable"") sizeCovered)...) } if request.Exactly != nil { func validateSelectorSlice(selectors []resource.DeviceSelector fldPath *field.P func(selector resource.DeviceSelector fldPath *field.Path) field.ErrorList { return validateSelector(selector fldPath stored) } - fldPath) + fldPath sizeCovered) } func validateSelector(selector resource.DeviceSelector fldPath *field.Path stored bool) field.ErrorList { func validateDeviceConstraint(constraint resource.DeviceConstraint fldPath *fie func(name string fldPath *field.Path) field.ErrorList { return validateRequestNameRef(name fldPath requestNames) } - stringKey fldPath.Child(""requests""))...) + stringKey fldPath.Child(""requests"") sizeCovered)...) if constraint.MatchAttribute != nil { allErrs = append(allErrs validateFullyQualifiedName(*constraint.MatchAttribute fldPath.Child(""matchAttribute""))...) } else if constraint.DistinctAttribute != nil { func validateDeviceClaimConfiguration(config resource.DeviceClaimConfiguration allErrs = append(allErrs validateSet(config.Requests resource.DeviceRequestsMaxSize func(name string fldPath *field.Path) field.ErrorList { return validateRequestNameRef(name fldPath requestNames) - } stringKey fldPath.Child(""requests""))...) + } stringKey fldPath.Child(""requests"") sizeCovered)...) allErrs = append(allErrs validateDeviceConfiguration(config.DeviceConfiguration fldPath stored)...) return allErrs }"
kubernetes/kubernetes,9343d041209560f487cdf9121d5400a5685fa27a,Kubernetes Prow Robot,2025-10-06 21:53:06,Merge pull request #134408 from yongruilin/vg_resourceclaim  feat(validation-gen): add path normalization options & migration k8s:maxItem on ResourceClaimSpec fields,pkg/apis/resource/validation/validation_resourceclaim_test.go,1,1,2,"func TestValidateClaim(t *testing.T) { } ""prioritized-list-too-many-subrequests"": { wantFailures: field.ErrorList{ - field.TooMany(field.NewPath(""spec"" ""devices"" ""requests"").Index(0).Child(""firstAvailable"") 9 8) + field.TooMany(field.NewPath(""spec"" ""devices"" ""requests"").Index(0).Child(""firstAvailable"") 9 8).MarkCoveredByDeclarative() } claim: func() *resource.ResourceClaim { claim := testClaim(goodName goodNS validClaimSpec)"
kubernetes/kubernetes,9343d041209560f487cdf9121d5400a5685fa27a,Kubernetes Prow Robot,2025-10-06 21:53:06,Merge pull request #134408 from yongruilin/vg_resourceclaim  feat(validation-gen): add path normalization options & migration k8s:maxItem on ResourceClaimSpec fields,pkg/registry/resource/resourceclaim/strategy.go,12,2,14,"package resourceclaim import ( ""context"" ""errors"" + ""regexp"" ""sigs.k8s.io/structured-merge-diff/v6/fieldpath"" type resourceclaimStrategy struct { nsClient v1.NamespaceInterface } +var resourceClaimNormalizationRules = []field.NormalizationRule{ + { + // The ""exactly"" struct was added in v1beta2. In earlier API + // versions its fields were directly part of the DeviceRequest. + Regexp: regexp.MustCompile(`spec\.devices\.requests\[(\d+)\]\.selectors`) + Replacement: ""spec.devices.requests[$1].exactly.selectors"" + } +} + // NewStrategy is the default logic that applies when creating and updating ResourceClaim objects. func NewStrategy(nsClient v1.NamespaceInterface) *resourceclaimStrategy { return &resourceclaimStrategy{ func (s *resourceclaimStrategy) Validate(ctx context.Context obj runtime.Object allErrs := resourceutils.AuthorizedForAdmin(ctx claim.Spec.Devices.Requests claim.Namespace s.nsClient) allErrs = append(allErrs validation.ValidateResourceClaim(claim)...) - return rest.ValidateDeclarativelyWithMigrationChecks(ctx legacyscheme.Scheme claim nil allErrs operation.Create) + return rest.ValidateDeclarativelyWithMigrationChecks(ctx legacyscheme.Scheme claim nil allErrs operation.Create rest.WithNormalizationRules(resourceClaimNormalizationRules)) } func (*resourceclaimStrategy) WarningsOnCreate(ctx context.Context obj runtime.Object) []string { func (s *resourceclaimStrategy) ValidateUpdate(ctx context.Context obj old run // AuthorizedForAdmin isn't needed here because the spec is immutable. errorList := validation.ValidateResourceClaim(newClaim) errorList = append(errorList validation.ValidateResourceClaimUpdate(newClaim oldClaim)...) - return rest.ValidateDeclarativelyWithMigrationChecks(ctx legacyscheme.Scheme newClaim oldClaim errorList operation.Update) + return rest.ValidateDeclarativelyWithMigrationChecks(ctx legacyscheme.Scheme newClaim oldClaim errorList operation.Update rest.WithNormalizationRules(resourceClaimNormalizationRules)) } func (*resourceclaimStrategy) WarningsOnUpdate(ctx context.Context obj old runtime.Object) []string {"
kubernetes/kubernetes,9343d041209560f487cdf9121d5400a5685fa27a,Kubernetes Prow Robot,2025-10-06 21:53:06,Merge pull request #134408 from yongruilin/vg_resourceclaim  feat(validation-gen): add path normalization options & migration k8s:maxItem on ResourceClaimSpec fields,staging/src/k8s.io/api/resource/v1/generated.proto,6,0,6,message DeviceClaimConfiguration { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated string requests = 1; optional DeviceConfiguration deviceConfiguration = 2; message DeviceConstraint { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated string requests = 1; // MatchAttribute requires that all devices in question have this message DeviceRequest { // // +optional // +oneOf=deviceRequestType + // +k8s:optional optional ExactDeviceRequest exactly = 2; // FirstAvailable contains subrequests of which exactly one will be message DeviceRequest { // +oneOf=deviceRequestType // +listType=atomic // +featureGate=DRAPrioritizedList + // +k8s:maxItems=8 repeated DeviceSubRequest firstAvailable = 3; } message DeviceSubRequest { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated DeviceSelector selectors = 3; // AllocationMode and its related fields define how devices are allocated message ExactDeviceRequest { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated DeviceSelector selectors = 2; // AllocationMode and its related fields define how devices are allocated
kubernetes/kubernetes,9343d041209560f487cdf9121d5400a5685fa27a,Kubernetes Prow Robot,2025-10-06 21:53:06,Merge pull request #134408 from yongruilin/vg_resourceclaim  feat(validation-gen): add path normalization options & migration k8s:maxItem on ResourceClaimSpec fields,staging/src/k8s.io/api/resource/v1/types.go,6,0,6,"type DeviceRequest struct { // // +optional // +oneOf=deviceRequestType + // +k8s:optional Exactly *ExactDeviceRequest `json:""exactly omitempty"" protobuf:""bytes 2 name=exactly""` // FirstAvailable contains subrequests of which exactly one will be type DeviceRequest struct { // +oneOf=deviceRequestType // +listType=atomic // +featureGate=DRAPrioritizedList + // +k8s:maxItems=8 FirstAvailable []DeviceSubRequest `json:""firstAvailable omitempty"" protobuf:""bytes 3 name=firstAvailable""` } type ExactDeviceRequest struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Selectors []DeviceSelector `json:""selectors omitempty"" protobuf:""bytes 2 name=selectors""` // AllocationMode and its related fields define how devices are allocated type DeviceSubRequest struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Selectors []DeviceSelector `json:""selectors omitempty"" protobuf:""bytes 3 name=selectors""` // AllocationMode and its related fields define how devices are allocated type DeviceConstraint struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Requests []string `json:""requests omitempty"" protobuf:""bytes 1 opt name=requests""` // MatchAttribute requires that all devices in question have this type DeviceClaimConfiguration struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Requests []string `json:""requests omitempty"" protobuf:""bytes 1 opt name=requests""` DeviceConfiguration `json:"" inline"" protobuf:""bytes 2 name=deviceConfiguration""`"
kubernetes/kubernetes,9343d041209560f487cdf9121d5400a5685fa27a,Kubernetes Prow Robot,2025-10-06 21:53:06,Merge pull request #134408 from yongruilin/vg_resourceclaim  feat(validation-gen): add path normalization options & migration k8s:maxItem on ResourceClaimSpec fields,staging/src/k8s.io/api/resource/v1beta1/generated.proto,6,0,6,message DeviceClaimConfiguration { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated string requests = 1; optional DeviceConfiguration deviceConfiguration = 2; message DeviceConstraint { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated string requests = 1; // MatchAttribute requires that all devices in question have this message DeviceRequest { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated DeviceSelector selectors = 3; // AllocationMode and its related fields define how devices are allocated message DeviceRequest { // +oneOf=deviceRequestType // +listType=atomic // +featureGate=DRAPrioritizedList + // +k8s:maxItems=8 repeated DeviceSubRequest firstAvailable = 7; // If specified the request's tolerations. message DeviceRequestAllocationResult { // +optional // +listType=atomic // +featureGate=DRADeviceTaints + // +k8s:maxItems=16 repeated DeviceToleration tolerations = 6; // BindingConditions contains a copy of the BindingConditions message DeviceSubRequest { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated DeviceSelector selectors = 3; // AllocationMode and its related fields define how devices are allocated
kubernetes/kubernetes,9343d041209560f487cdf9121d5400a5685fa27a,Kubernetes Prow Robot,2025-10-06 21:53:06,Merge pull request #134408 from yongruilin/vg_resourceclaim  feat(validation-gen): add path normalization options & migration k8s:maxItem on ResourceClaimSpec fields,staging/src/k8s.io/api/resource/v1beta1/types.go,6,0,6,"type DeviceRequest struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Selectors []DeviceSelector `json:""selectors omitempty"" protobuf:""bytes 3 name=selectors""` // AllocationMode and its related fields define how devices are allocated type DeviceRequest struct { // +oneOf=deviceRequestType // +listType=atomic // +featureGate=DRAPrioritizedList + // +k8s:maxItems=8 FirstAvailable []DeviceSubRequest `json:""firstAvailable omitempty"" protobuf:""bytes 7 name=firstAvailable""` // If specified the request's tolerations. type DeviceSubRequest struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Selectors []DeviceSelector `json:""selectors omitempty"" protobuf:""bytes 3 name=selectors""` // AllocationMode and its related fields define how devices are allocated type DeviceConstraint struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Requests []string `json:""requests omitempty"" protobuf:""bytes 1 opt name=requests""` // MatchAttribute requires that all devices in question have this type DeviceClaimConfiguration struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Requests []string `json:""requests omitempty"" protobuf:""bytes 1 opt name=requests""` DeviceConfiguration `json:"" inline"" protobuf:""bytes 2 name=deviceConfiguration""` type DeviceRequestAllocationResult struct { // +optional // +listType=atomic // +featureGate=DRADeviceTaints + // +k8s:maxItems=16 Tolerations []DeviceToleration `json:""tolerations omitempty"" protobuf:""bytes 6 opt name=tolerations""` // BindingConditions contains a copy of the BindingConditions"
kubernetes/kubernetes,9343d041209560f487cdf9121d5400a5685fa27a,Kubernetes Prow Robot,2025-10-06 21:53:06,Merge pull request #134408 from yongruilin/vg_resourceclaim  feat(validation-gen): add path normalization options & migration k8s:maxItem on ResourceClaimSpec fields,staging/src/k8s.io/api/resource/v1beta2/generated.proto,6,0,6,message DeviceClaimConfiguration { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated string requests = 1; optional DeviceConfiguration deviceConfiguration = 2; message DeviceConstraint { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated string requests = 1; // MatchAttribute requires that all devices in question have this message DeviceRequest { // // +optional // +oneOf=deviceRequestType + // +k8s:optional optional ExactDeviceRequest exactly = 2; // FirstAvailable contains subrequests of which exactly one will be message DeviceRequest { // +oneOf=deviceRequestType // +listType=atomic // +featureGate=DRAPrioritizedList + // +k8s:maxItems=8 repeated DeviceSubRequest firstAvailable = 3; } message DeviceSubRequest { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated DeviceSelector selectors = 3; // AllocationMode and its related fields define how devices are allocated message ExactDeviceRequest { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated DeviceSelector selectors = 2; // AllocationMode and its related fields define how devices are allocated
kubernetes/kubernetes,9343d041209560f487cdf9121d5400a5685fa27a,Kubernetes Prow Robot,2025-10-06 21:53:06,Merge pull request #134408 from yongruilin/vg_resourceclaim  feat(validation-gen): add path normalization options & migration k8s:maxItem on ResourceClaimSpec fields,staging/src/k8s.io/api/resource/v1beta2/types.go,6,0,6,"type DeviceRequest struct { // // +optional // +oneOf=deviceRequestType + // +k8s:optional Exactly *ExactDeviceRequest `json:""exactly omitempty"" protobuf:""bytes 2 name=exactly""` // FirstAvailable contains subrequests of which exactly one will be type DeviceRequest struct { // +oneOf=deviceRequestType // +listType=atomic // +featureGate=DRAPrioritizedList + // +k8s:maxItems=8 FirstAvailable []DeviceSubRequest `json:""firstAvailable omitempty"" protobuf:""bytes 3 name=firstAvailable""` } type ExactDeviceRequest struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Selectors []DeviceSelector `json:""selectors omitempty"" protobuf:""bytes 2 name=selectors""` // AllocationMode and its related fields define how devices are allocated type DeviceSubRequest struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Selectors []DeviceSelector `json:""selectors omitempty"" protobuf:""bytes 3 name=selectors""` // AllocationMode and its related fields define how devices are allocated type DeviceConstraint struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Requests []string `json:""requests omitempty"" protobuf:""bytes 1 opt name=requests""` // MatchAttribute requires that all devices in question have this type DeviceClaimConfiguration struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Requests []string `json:""requests omitempty"" protobuf:""bytes 1 opt name=requests""` DeviceConfiguration `json:"" inline"" protobuf:""bytes 2 name=deviceConfiguration""`"
kubernetes/kubernetes,9343d041209560f487cdf9121d5400a5685fa27a,Kubernetes Prow Robot,2025-10-06 21:53:06,Merge pull request #134408 from yongruilin/vg_resourceclaim  feat(validation-gen): add path normalization options & migration k8s:maxItem on ResourceClaimSpec fields,staging/src/k8s.io/apiserver/pkg/registry/rest/validate_test.go,22,2,24,"func TestGatherDeclarativeValidationMismatches(t *testing.T) { errB := field.Invalid(minReadySecondsPath -1 ""covered error B"").WithOrigin(""minimum"") coveredErrB := field.Invalid(minReadySecondsPath -1 ""covered error B"").WithOrigin(""minimum"") errBWithDiffDetail := field.Invalid(minReadySecondsPath -1 ""covered error B - different detail"").WithOrigin(""minimum"") + errBWithDiffPath := field.Invalid(field.NewPath(""spec"").Child(""fakeminReadySeconds"") -1 ""covered error B"").WithOrigin(""minimum"") coveredErrB.CoveredByDeclarative = true errC := field.Invalid(replicasPath nil ""covered error C"").WithOrigin(""minimum"") coveredErrC := field.Invalid(replicasPath nil ""covered error C"").WithOrigin(""minimum"") func TestGatherDeclarativeValidationMismatches(t *testing.T) { takeover bool expectMismatches bool expectDetailsContaining []string + normalizedRules []field.NormalizationRule }{ { name: ""Declarative and imperative return 0 errors - no mismatch"" func TestGatherDeclarativeValidationMismatches(t *testing.T) { expectMismatches: false expectDetailsContaining: []string{} } + { + name: ""Field normalization errors don't match - mismatch"" + imperativeErrors: field.ErrorList{ + coveredErrB + } + declarativeErrors: field.ErrorList{ + errBWithDiffPath + } + normalizedRules: []field.NormalizationRule{ + { + Regexp: regexp.MustCompile(`spec.fakeminReadySeconds`) + Replacement: ""spec.minReadySeconds"" + } + } + takeover: false + expectMismatches: false + expectDetailsContaining: []string{} + } } for _ tc := range testCases { t.Run(tc.name func(t *testing.T) { - details := gatherDeclarativeValidationMismatches(tc.imperativeErrors tc.declarativeErrors tc.takeover) + details := gatherDeclarativeValidationMismatches(tc.imperativeErrors tc.declarativeErrors tc.takeover tc.normalizedRules) // Check if mismatches were found if expected if tc.expectMismatches && len(details) == 0 { t.Errorf(""Expected mismatches but got none"") func TestCompareDeclarativeErrorsAndEmitMismatches(t *testing.T) { defer klog.LogToStderr(true) ctx := context.Background() - compareDeclarativeErrorsAndEmitMismatches(ctx tc.imperativeErrs tc.declarativeErrs tc.takeover ""test_validationIdentifier"") + compareDeclarativeErrorsAndEmitMismatches(ctx tc.imperativeErrs tc.declarativeErrs tc.takeover ""test_validationIdentifier"" nil) klog.Flush() logOutput := buf.String()"
kubernetes/kubernetes,fd1ea25e9a2c22a2f038635d4e58eb766b099cc6,Kubernetes Prow Robot,2025-10-06 21:52:58,Merge pull request #134389 from thockin/takeover-130780  Add resourcequota WarningsOnCreate when request > limits,pkg/registry/core/resourcequota/strategy.go,29,1,30,"package resourcequota import ( ""context"" + ""fmt"" ""k8s.io/apimachinery/pkg/runtime"" ""k8s.io/apimachinery/pkg/util/validation/field"" func (resourcequotaStrategy) Validate(ctx context.Context obj runtime.Object) f return validation.ValidateResourceQuota(resourcequota) } +// all known resource names that we want to check for request <= limit +var knownResourceNames = []api.ResourceName{ + api.ResourceCPU + api.ResourceMemory + api.ResourceStorage + api.ResourceEphemeralStorage +} + // WarningsOnCreate returns warnings for the creation of the given object. func (resourcequotaStrategy) WarningsOnCreate(ctx context.Context obj runtime.Object) []string { - return nil + resourcequota := obj.(*api.ResourceQuota) + var allWarnings []string + for _ resourceName := range knownResourceNames { + requestResourceName := api.ResourceName(fmt.Sprintf(""requests.%s"" resourceName)) + request requestOK := resourcequota.Spec.Hard[requestResourceName] + if !requestOK && (resourceName == api.ResourceCPU || resourceName == api.ResourceMemory) { + // try the bare name for cpu and memory + request requestOK = resourcequota.Spec.Hard[resourceName] + if requestOK { + requestResourceName = resourceName + } + } + limitResourceName := api.ResourceName(fmt.Sprintf(""limits.%s"" resourceName)) + limit limitOK := resourcequota.Spec.Hard[limitResourceName] + if requestOK && limitOK && request.Cmp(limit) > 0 { + allWarnings = append(allWarnings fmt.Sprintf(""ResourceQuota %s (%s) should be less than %s (%s)"" + requestResourceName request.String() limitResourceName limit.String())) + } + } + return allWarnings } // Canonicalize normalizes the object after validation."
kubernetes/kubernetes,4ca286819a96d20df31ce6868c879ddb6f6d2c6d,Lalit Chauhan,2025-10-02 21:36:37,Add DV for uids in resourceClaim Status,pkg/apis/resource/validation/validation.go,3,3,6,"func validateUID(uid string fldPath *field.Path) field.ErrorList { } else if len(uid) != 36 || uid != strings.ToLower(uid) { allErrs = append(allErrs field.Invalid(fldPath uid ""uid must be in RFC 4122 normalized form `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx` with lowercase hexadecimal characters"")) } - return allErrs + return allErrs.WithOrigin(""format=k8s-uuid"") } // ValidateResourceClaim validates a ResourceClaim. func validateDeviceRequestAllocationResult(result resource.DeviceRequestAllocati allErrs = append(allErrs validateDeviceName(result.Device fldPath.Child(""device""))...) allErrs = append(allErrs validateDeviceBindingParameters(result.BindingConditions result.BindingFailureConditions fldPath)...) if result.ShareID != nil { - allErrs = append(allErrs validateUID(string(*result.ShareID) fldPath.Child(""shareID""))...) + allErrs = append(allErrs validateUID(string(*result.ShareID) fldPath.Child(""shareID"")).MarkCoveredByDeclarative()...) } return allErrs } func validateDeviceStatus(device resource.AllocatedDeviceStatus fldPath *field. allErrs = append(allErrs validatePoolName(device.Pool fldPath.Child(""pool""))...) allErrs = append(allErrs validateDeviceName(device.Device fldPath.Child(""device""))...) if device.ShareID != nil { - allErrs = append(allErrs validateUID(*device.ShareID fldPath.Child(""shareID""))...) + allErrs = append(allErrs validateUID(*device.ShareID fldPath.Child(""shareID"")).MarkCoveredByDeclarative()...) } deviceID := structured.MakeDeviceID(device.Driver device.Pool device.Device) sharedDeviceID := structured.MakeSharedDeviceID(deviceID (*types.UID)(device.ShareID))"
kubernetes/kubernetes,4ca286819a96d20df31ce6868c879ddb6f6d2c6d,Lalit Chauhan,2025-10-02 21:36:37,Add DV for uids in resourceClaim Status,pkg/apis/resource/validation/validation_resourceclaim_test.go,4,4,8,"func TestValidateClaimStatusUpdate(t *testing.T) { } ""invalid-add-allocated-status-invalid-share-id"": { wantFailures: field.ErrorList{ - field.Invalid(field.NewPath(""status"" ""devices"").Index(0).Child(""shareID"") badLengthShareIDStr ""error validating uid: invalid UUID length: 1"") - field.Invalid(field.NewPath(""status"" ""devices"").Index(1).Child(""shareID"") badFormatShareIDStr ""uid must be in RFC 4122 normalized form `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx` with lowercase hexadecimal characters"") - field.Invalid(field.NewPath(""status"" ""allocation"" ""devices"" ""results"").Index(0).Child(""shareID"") badLengthShareIDStr ""error validating uid: invalid UUID length: 1"") - field.Invalid(field.NewPath(""status"" ""allocation"" ""devices"" ""results"").Index(1).Child(""shareID"") badFormatShareIDStr ""uid must be in RFC 4122 normalized form `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx` with lowercase hexadecimal characters"") + field.Invalid(field.NewPath(""status"" ""devices"").Index(0).Child(""shareID"") badLengthShareIDStr ""error validating uid: invalid UUID length: 1"").MarkCoveredByDeclarative() + field.Invalid(field.NewPath(""status"" ""devices"").Index(1).Child(""shareID"") badFormatShareIDStr ""uid must be in RFC 4122 normalized form `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx` with lowercase hexadecimal characters"").MarkCoveredByDeclarative() + field.Invalid(field.NewPath(""status"" ""allocation"" ""devices"" ""results"").Index(0).Child(""shareID"") badLengthShareIDStr ""error validating uid: invalid UUID length: 1"").MarkCoveredByDeclarative() + field.Invalid(field.NewPath(""status"" ""allocation"" ""devices"" ""results"").Index(1).Child(""shareID"") badFormatShareIDStr ""uid must be in RFC 4122 normalized form `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx` with lowercase hexadecimal characters"").MarkCoveredByDeclarative() } oldClaim: testClaim(goodName goodNS validClaimSpec) update: func(claim *resource.ResourceClaim) *resource.ResourceClaim {"
kubernetes/kubernetes,4ca286819a96d20df31ce6868c879ddb6f6d2c6d,Lalit Chauhan,2025-10-02 21:36:37,Add DV for uids in resourceClaim Status,staging/src/k8s.io/api/resource/v1/generated.proto,4,0,4,message AllocatedDeviceStatus { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid optional string shareID = 7; // Conditions contains the latest observation of the device's state. message DeviceRequestAllocationResult { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid optional string shareID = 9; // ConsumedCapacity tracks the amount of capacity consumed per device as part of the claim request.
kubernetes/kubernetes,4ca286819a96d20df31ce6868c879ddb6f6d2c6d,Lalit Chauhan,2025-10-02 21:36:37,Add DV for uids in resourceClaim Status,staging/src/k8s.io/api/resource/v1/types.go,4,0,4,"type DeviceRequestAllocationResult struct { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid ShareID *types.UID `json:""shareID omitempty"" protobuf:""bytes 9 opt name=shareID""` // ConsumedCapacity tracks the amount of capacity consumed per device as part of the claim request. type AllocatedDeviceStatus struct { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid ShareID *string `json:""shareID omitempty"" protobuf:""bytes 7 opt name=shareID""` // Conditions contains the latest observation of the device's state."
kubernetes/kubernetes,4ca286819a96d20df31ce6868c879ddb6f6d2c6d,Lalit Chauhan,2025-10-02 21:36:37,Add DV for uids in resourceClaim Status,staging/src/k8s.io/api/resource/v1beta1/generated.proto,4,0,4,message AllocatedDeviceStatus { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid optional string shareID = 7; // Conditions contains the latest observation of the device's state. message DeviceRequestAllocationResult { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid optional string shareID = 9; // ConsumedCapacity tracks the amount of capacity consumed per device as part of the claim request.
kubernetes/kubernetes,4ca286819a96d20df31ce6868c879ddb6f6d2c6d,Lalit Chauhan,2025-10-02 21:36:37,Add DV for uids in resourceClaim Status,staging/src/k8s.io/api/resource/v1beta1/types.go,4,0,4,"type DeviceRequestAllocationResult struct { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid ShareID *types.UID `json:""shareID omitempty"" protobuf:""bytes 9 opt name=shareID""` // ConsumedCapacity tracks the amount of capacity consumed per device as part of the claim request. type AllocatedDeviceStatus struct { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid ShareID *string `json:""shareID omitempty"" protobuf:""bytes 7 opt name=shareID""` // Conditions contains the latest observation of the device's state."
kubernetes/kubernetes,4ca286819a96d20df31ce6868c879ddb6f6d2c6d,Lalit Chauhan,2025-10-02 21:36:37,Add DV for uids in resourceClaim Status,staging/src/k8s.io/api/resource/v1beta2/generated.proto,4,0,4,message AllocatedDeviceStatus { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid optional string shareID = 7; // Conditions contains the latest observation of the device's state. message DeviceRequestAllocationResult { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid optional string shareID = 9; // ConsumedCapacity tracks the amount of capacity consumed per device as part of the claim request.
kubernetes/kubernetes,4ca286819a96d20df31ce6868c879ddb6f6d2c6d,Lalit Chauhan,2025-10-02 21:36:37,Add DV for uids in resourceClaim Status,staging/src/k8s.io/api/resource/v1beta2/types.go,4,0,4,"type DeviceRequestAllocationResult struct { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid ShareID *types.UID `json:""shareID omitempty"" protobuf:""bytes 9 opt name=shareID""` // ConsumedCapacity tracks the amount of capacity consumed per device as part of the claim request. type AllocatedDeviceStatus struct { // // +optional // +featureGate=DRAConsumableCapacity + // +k8s:optional + // +k8s:format=k8s-uuid ShareID *string `json:""shareID omitempty"" protobuf:""bytes 7 opt name=shareID""` // Conditions contains the latest observation of the device's state."
kubernetes/kubernetes,439a3c4f3577f837b273e07e443fbdf19e14b6a7,Kubernetes Prow Robot,2025-10-06 19:12:59,Merge pull request #134074 from rutigs/master  Record SyncTerminatingPod error and set error status on span when non-nil err returned,pkg/kubelet/kubelet.go,15,6,21,"func (kl *Kubelet) SyncPod(ctx context.Context updateType kubetypes.SyncPodType // during eviction). This method is not guaranteed to be called if a pod is force deleted from the // configuration and the kubelet is restarted - SyncTerminatingRuntimePod handles those orphaned // pods. -func (kl *Kubelet) SyncTerminatingPod(_ context.Context pod *v1.Pod podStatus *kubecontainer.PodStatus gracePeriod *int64 podStatusFn func(*v1.PodStatus)) error { +func (kl *Kubelet) SyncTerminatingPod(_ context.Context pod *v1.Pod podStatus *kubecontainer.PodStatus gracePeriod *int64 podStatusFn func(*v1.PodStatus)) (err error) { // TODO(#113606): connect this with the incoming context parameter which comes from the pod worker. // Currently using that context causes test failures. - ctx otelSpan := kl.tracer.Start(context.Background() ""syncTerminatingPod"" trace.WithAttributes( + ctx := context.Background() + + logger := klog.FromContext(ctx) + klog.V(4).InfoS(""SyncTerminatingPod enter"" ""pod"" klog.KObj(pod) ""podUID"" pod.UID) + + ctx otelSpan := kl.tracer.Start(ctx ""syncTerminatingPod"" trace.WithAttributes( semconv.K8SPodUIDKey.String(string(pod.UID)) attribute.String(""k8s.pod"" klog.KObj(pod).String()) semconv.K8SPodNameKey.String(pod.Name) semconv.K8SNamespaceNameKey.String(pod.Namespace) )) - logger := klog.FromContext(ctx) - defer otelSpan.End() - klog.V(4).InfoS(""SyncTerminatingPod enter"" ""pod"" klog.KObj(pod) ""podUID"" pod.UID) - defer klog.V(4).InfoS(""SyncTerminatingPod exit"" ""pod"" klog.KObj(pod) ""podUID"" pod.UID) + defer func() { + if err != nil { + otelSpan.RecordError(err) + otelSpan.SetStatus(codes.Error err.Error()) + } + otelSpan.End() + klog.V(4).InfoS(""SyncTerminatingPod exit"" ""pod"" klog.KObj(pod) ""podUID"" pod.UID) + }() apiPodStatus := kl.generateAPIPodStatus(pod podStatus false) if podStatusFn != nil {"
kubernetes/kubernetes,da05e3ccc786c6787ee1f45a1e925d55c61ced60,Kubernetes Prow Robot,2025-10-06 18:21:08,Merge pull request #134369 from rbiamru/add-nodeconformance-mirror-pod  test/e2e_node: mark MirrorPod update tests as [NodeConformance],test/e2e_node/mirror_pod_test.go,3,3,6,"var _ = SIGDescribe(""MirrorPod (Pod Generation)"" func() { } 2*time.Minute time.Second*4).Should(gomega.Succeed()) }) - f.It(""mirror pod: update activeDeadlineSeconds"" func(ctx context.Context) { + f.It(""mirror pod: update activeDeadlineSeconds"" f.WithNodeConformance() func(ctx context.Context) { ginkgo.By(""get mirror pod uid"") pod err := f.ClientSet.CoreV1().Pods(ns).Get(ctx mirrorPodName metav1.GetOptions{}) framework.ExpectNoError(err) var _ = SIGDescribe(""MirrorPod (Pod Generation)"" func() { gomega.Expect(pod.Status.ObservedGeneration).To(gomega.BeEquivalentTo(int64(0))) }) - f.It(""mirror pod: update container image"" func(ctx context.Context) { + f.It(""mirror pod: update container image"" f.WithNodeConformance() func(ctx context.Context) { ginkgo.By(""get mirror pod uid"") pod err := f.ClientSet.CoreV1().Pods(ns).Get(ctx mirrorPodName metav1.GetOptions{}) framework.ExpectNoError(err) var _ = SIGDescribe(""MirrorPod (Pod Generation)"" func() { gomega.Expect(pod.Status.ObservedGeneration).To(gomega.BeEquivalentTo(int64(0))) }) - f.It(""mirror pod: update initContainer image"" func(ctx context.Context) { + f.It(""mirror pod: update initContainer image"" f.WithNodeConformance() func(ctx context.Context) { ginkgo.By(""get mirror pod uid"") pod err := f.ClientSet.CoreV1().Pods(ns).Get(ctx mirrorPodName metav1.GetOptions{}) framework.ExpectNoError(err)"
kubernetes/kubernetes,f74a7458d945e27b78cac0f83d1d3f24cbf9170b,Kubernetes Prow Robot,2025-10-06 18:21:00,Merge pull request #134173 from toVersus/test/deflake-sidecar-e2e  deflake e2e: ensure pod with sidecars restarts in correct order after node reboot,test/e2e_node/container_lifecycle_test.go,4,4,8,"var _ = SIGDescribe(feature.SidecarContainers framework.WithSerial() ""Containe f.NamespacePodSecurityLevel = admissionapi.LevelPrivileged ginkgo.When(""A node running restartable init containers reboots"" func() { - ginkgo.It(""should restart the containers in right order with the proper phase after the node reboot"" func(ctx context.Context) { + ginkgo.It(""should restart the containers in right order after the node reboot"" func(ctx context.Context) { init1 := ""init-1"" restartableInit2 := ""restartable-init-2"" init3 := ""init-3"" var _ = SIGDescribe(feature.SidecarContainers framework.WithSerial() ""Containe }) framework.ExpectNoError(err) - ginkgo.By(""Waiting for the pod to run after re-initialization"") - err = e2epod.WaitForPodRunningInNamespace(ctx f.ClientSet pod) - framework.ExpectNoError(err) + ginkgo.By(""Waiting for regular container to start running"") + err = e2epod.WaitForContainerRunning(ctx f.ClientSet pod.Namespace pod.Name regular1 f.Timeouts.PodStart) + framework.ExpectNoError(err ""regular container %q should be running"" regular1) ginkgo.By(""Parsing results"") pod err = client.Get(ctx pod.Name metav1.GetOptions{})"
kubernetes/kubernetes,6965075ebd8eab5b1adf230cedc50da99d8343e4,yongruilin,2025-10-06 16:41:10,Address feedback: simpliy errormatcher instantiation,pkg/api/testing/validation.go,1,6,7,func verifyValidationEquivalence(t *testing.T expectedErrs field.ErrorList run var imperativeErrs field.ErrorList // The errOutputMatcher is used to verify the output matches the expected errors in test cases. - errOutputMatcher := field.ErrorMatcher{}.ByType().ByOrigin() - if len(opt.NormalizationRules) > 0 { - errOutputMatcher = errOutputMatcher.ByFieldNormalized(opt.NormalizationRules) - } else { - errOutputMatcher = errOutputMatcher.ByField() - } + errOutputMatcher := field.ErrorMatcher{}.ByType().ByOrigin().ByFieldNormalized(opt.NormalizationRules) // We only need to test both gate enabled and disabled together because // 1) the DeclarativeValidationTakeover won't take effect if DeclarativeValidation is disabled.
kubernetes/kubernetes,6965075ebd8eab5b1adf230cedc50da99d8343e4,yongruilin,2025-10-06 16:41:10,Address feedback: simpliy errormatcher instantiation,staging/src/k8s.io/apiserver/pkg/registry/rest/validate.go,1,6,7,"func gatherDeclarativeValidationMismatches(imperativeErrs declarativeErrs field if takeover { recommendation = ""Consider disabling the DeclarativeValidationTakeover feature gate to keep data persisted in etcd consistent with prior versions of Kubernetes."" } - fuzzyMatcher := field.ErrorMatcher{}.ByType().ByOrigin().RequireOriginWhenInvalid() - if len(normalizationRules) > 0 { - fuzzyMatcher = fuzzyMatcher.ByFieldNormalized(normalizationRules) - } else { - fuzzyMatcher = fuzzyMatcher.ByField() - } + fuzzyMatcher := field.ErrorMatcher{}.ByType().ByOrigin().RequireOriginWhenInvalid().ByFieldNormalized(normalizationRules) exactMatcher := field.ErrorMatcher{}.Exactly() // Dedupe imperative errors of exact error matches as they are"
kubernetes/kubernetes,6138a68f4e8e4a4c9851f23cd800ca126e0a89dd,yongruilin,2025-10-06 16:36:57,fix(validation): Mark covered errors in TestValidateClaim for better clarity,pkg/apis/resource/validation/validation_resourceclaim_test.go,1,1,2,"func TestValidateClaim(t *testing.T) { } ""prioritized-list-too-many-subrequests"": { wantFailures: field.ErrorList{ - field.TooMany(field.NewPath(""spec"" ""devices"" ""requests"").Index(0).Child(""firstAvailable"") 9 8) + field.TooMany(field.NewPath(""spec"" ""devices"" ""requests"").Index(0).Child(""firstAvailable"") 9 8).MarkCoveredByDeclarative() } claim: func() *resource.ResourceClaim { claim := testClaim(goodName goodNS validClaimSpec)"
kubernetes/kubernetes,763c01ef68f4ddd18cdcd78bfeb61170a90a2f96,yongruilin,2025-10-03 20:56:06,feat(validation): Add normalization rules for ResourceClaim validation,pkg/registry/resource/resourceclaim/strategy.go,12,2,14,"package resourceclaim import ( ""context"" ""errors"" + ""regexp"" ""sigs.k8s.io/structured-merge-diff/v6/fieldpath"" type resourceclaimStrategy struct { nsClient v1.NamespaceInterface } +var resourceClaimNormalizationRules = []field.NormalizationRule{ + { + // The ""exactly"" struct was added in v1beta2. In earlier API + // versions its fields were directly part of the DeviceRequest. + Regexp: regexp.MustCompile(`spec\.devices\.requests\[(\d+)\]\.selectors`) + Replacement: ""spec.devices.requests[$1].exactly.selectors"" + } +} + // NewStrategy is the default logic that applies when creating and updating ResourceClaim objects. func NewStrategy(nsClient v1.NamespaceInterface) *resourceclaimStrategy { return &resourceclaimStrategy{ func (s *resourceclaimStrategy) Validate(ctx context.Context obj runtime.Object allErrs := resourceutils.AuthorizedForAdmin(ctx claim.Spec.Devices.Requests claim.Namespace s.nsClient) allErrs = append(allErrs validation.ValidateResourceClaim(claim)...) - return rest.ValidateDeclarativelyWithMigrationChecks(ctx legacyscheme.Scheme claim nil allErrs operation.Create) + return rest.ValidateDeclarativelyWithMigrationChecks(ctx legacyscheme.Scheme claim nil allErrs operation.Create rest.WithNormalizationRules(resourceClaimNormalizationRules)) } func (*resourceclaimStrategy) WarningsOnCreate(ctx context.Context obj runtime.Object) []string { func (s *resourceclaimStrategy) ValidateUpdate(ctx context.Context obj old run // AuthorizedForAdmin isn't needed here because the spec is immutable. errorList := validation.ValidateResourceClaim(newClaim) errorList = append(errorList validation.ValidateResourceClaimUpdate(newClaim oldClaim)...) - return rest.ValidateDeclarativelyWithMigrationChecks(ctx legacyscheme.Scheme newClaim oldClaim errorList operation.Update) + return rest.ValidateDeclarativelyWithMigrationChecks(ctx legacyscheme.Scheme newClaim oldClaim errorList operation.Update rest.WithNormalizationRules(resourceClaimNormalizationRules)) } func (*resourceclaimStrategy) WarningsOnUpdate(ctx context.Context obj old runtime.Object) []string {"
kubernetes/kubernetes,37f067778e9ef714d02e5e901c25e83170144dc1,Kubernetes Prow Robot,2025-10-06 10:19:06,Merge pull request #134384 from tchap/kubectl-config-set-context-shorthand-namespace  kubectl config set-context: Add -n flag,staging/src/k8s.io/kubectl/pkg/cmd/config/set_context.go,1,1,2,"func NewCmdConfigSetContext(restClientGetter genericclioptions.RESTClientGetter cmd.Flags().BoolVar(&options.currContext ""current"" options.currContext ""Modify the current context"") cmd.Flags().Var(&options.cluster clientcmd.FlagClusterName clientcmd.FlagClusterName+"" for the context entry in kubeconfig"") cmd.Flags().Var(&options.authInfo clientcmd.FlagAuthInfoName clientcmd.FlagAuthInfoName+"" for the context entry in kubeconfig"") - cmd.Flags().Var(&options.namespace clientcmd.FlagNamespace clientcmd.FlagNamespace+"" for the context entry in kubeconfig"") + cmd.Flags().VarP(&options.namespace clientcmd.FlagNamespace ""n"" clientcmd.FlagNamespace+"" for the context entry in kubeconfig"") cmdutil.CheckErr(cmd.RegisterFlagCompletionFunc( ""namespace"" func(cmd *cobra.Command args []string toComplete string) ([]string cobra.ShellCompDirective) {"
kubernetes/kubernetes,37f067778e9ef714d02e5e901c25e83170144dc1,Kubernetes Prow Robot,2025-10-06 10:19:06,Merge pull request #134384 from tchap/kubectl-config-set-context-shorthand-namespace  kubectl config set-context: Add -n flag,test/cmd/delete.sh,2,2,4,"run_kubectl_delete_allnamespaces_tests() { kubectl delete configmap --dry-run=server -l deletetest=true --all-namespaces kubectl config set-context ""${CONTEXT}"" --namespace=""${ns_one}"" kube::test::get_object_assert 'configmap -l deletetest' ""{{range.items}}{{${id_field:?}}}:{{end}}"" 'one:' - kubectl config set-context ""${CONTEXT}"" --namespace=""${ns_two}"" + kubectl config set-context ""${CONTEXT}"" -n ""${ns_two}"" kube::test::get_object_assert 'configmap -l deletetest' ""{{range.items}}{{${id_field:?}}}:{{end}}"" 'two:' kubectl delete configmap -l deletetest=true --all-namespaces # no configmaps should be in either of those namespaces with label deletetest kubectl config set-context ""${CONTEXT}"" --namespace=""${ns_one}"" kube::test::get_object_assert 'configmap -l deletetest' ""{{range.items}}{{${id_field:?}}}:{{end}}"" '' - kubectl config set-context ""${CONTEXT}"" --namespace=""${ns_two}"" + kubectl config set-context ""${CONTEXT}"" -n ""${ns_two}"" kube::test::get_object_assert 'configmap -l deletetest' ""{{range.items}}{{${id_field:?}}}:{{end}}"" '' set +o nounset"
kubernetes/kubernetes,d03fab555f1fb77d5045f24bc4cce94ecde2bb98,Ondra Kupka,2025-10-02 15:26:18,kubectl config set-context: Add -n flag  This is simply a shorthand for --namespace as with other commands.,staging/src/k8s.io/kubectl/pkg/cmd/config/set_context.go,1,1,2,"func NewCmdConfigSetContext(restClientGetter genericclioptions.RESTClientGetter cmd.Flags().BoolVar(&options.currContext ""current"" options.currContext ""Modify the current context"") cmd.Flags().Var(&options.cluster clientcmd.FlagClusterName clientcmd.FlagClusterName+"" for the context entry in kubeconfig"") cmd.Flags().Var(&options.authInfo clientcmd.FlagAuthInfoName clientcmd.FlagAuthInfoName+"" for the context entry in kubeconfig"") - cmd.Flags().Var(&options.namespace clientcmd.FlagNamespace clientcmd.FlagNamespace+"" for the context entry in kubeconfig"") + cmd.Flags().VarP(&options.namespace clientcmd.FlagNamespace ""n"" clientcmd.FlagNamespace+"" for the context entry in kubeconfig"") cmdutil.CheckErr(cmd.RegisterFlagCompletionFunc( ""namespace"" func(cmd *cobra.Command args []string toComplete string) ([]string cobra.ShellCompDirective) {"
kubernetes/kubernetes,d03fab555f1fb77d5045f24bc4cce94ecde2bb98,Ondra Kupka,2025-10-02 15:26:18,kubectl config set-context: Add -n flag  This is simply a shorthand for --namespace as with other commands.,test/cmd/delete.sh,2,2,4,"run_kubectl_delete_allnamespaces_tests() { kubectl delete configmap --dry-run=server -l deletetest=true --all-namespaces kubectl config set-context ""${CONTEXT}"" --namespace=""${ns_one}"" kube::test::get_object_assert 'configmap -l deletetest' ""{{range.items}}{{${id_field:?}}}:{{end}}"" 'one:' - kubectl config set-context ""${CONTEXT}"" --namespace=""${ns_two}"" + kubectl config set-context ""${CONTEXT}"" -n ""${ns_two}"" kube::test::get_object_assert 'configmap -l deletetest' ""{{range.items}}{{${id_field:?}}}:{{end}}"" 'two:' kubectl delete configmap -l deletetest=true --all-namespaces # no configmaps should be in either of those namespaces with label deletetest kubectl config set-context ""${CONTEXT}"" --namespace=""${ns_one}"" kube::test::get_object_assert 'configmap -l deletetest' ""{{range.items}}{{${id_field:?}}}:{{end}}"" '' - kubectl config set-context ""${CONTEXT}"" --namespace=""${ns_two}"" + kubectl config set-context ""${CONTEXT}"" -n ""${ns_two}"" kube::test::get_object_assert 'configmap -l deletetest' ""{{range.items}}{{${id_field:?}}}:{{end}}"" '' set +o nounset"
kubernetes/kubernetes,4b9d59f14f77e35c8d3336d37b8e89e7a3bf8fab,Kubernetes Prow Robot,2025-10-05 18:28:58,Merge pull request #134425 from HirazawaUi/fix-wrong-message-1006  Fix incorrect error messages,test/e2e_node/terminate_pods_test.go,1,1,2,"var _ = SIGDescribe(""Terminate Pods"" func() { } } return false - } 20*time.Second 1*time.Second).Should(gomega.BeTrueBecause(""expected container to be ready"")) + } 20*time.Second 1*time.Second).Should(gomega.BeTrueBecause(""expected container to be not ready"")) err := client.Delete(context.Background() pod.Name metav1.DeleteOptions{})"
kubernetes/kubernetes,f9a893be37b025b4e84d7a41bc03e1b8e83d3834,HirazawaUi,2025-10-05 16:42:21,Fix incorrect error messages,test/e2e_node/terminate_pods_test.go,1,1,2,"var _ = SIGDescribe(""Terminate Pods"" func() { } } return false - } 20*time.Second 1*time.Second).Should(gomega.BeTrueBecause(""expected container to be ready"")) + } 20*time.Second 1*time.Second).Should(gomega.BeTrueBecause(""expected container to be not ready"")) err := client.Delete(context.Background() pod.Name metav1.DeleteOptions{})"
kubernetes/kubernetes,cafff6eadeb58cbf006c77017c341b8858eccd9b,Kubernetes Prow Robot,2025-10-04 15:42:57,Merge pull request #134409 from SergeyKanzhelev/remove-cpu-conversion-methods  remove cpuSharesToCPUWeight that is not used any longer,pkg/kubelet/cm/cgroup_manager_linux_test.go,0,43,43,"func TestParseSystemdToCgroupName(t *testing.T) { } } -func TestCpuSharesToCPUWeight(t *testing.T) { - testCases := []struct { - cpuShares uint64 - expectedCpuWeight uint64 - }{ - { - cpuShares: 2 - expectedCpuWeight: 1 - } - { - cpuShares: 3 - expectedCpuWeight: 1 - } - { - cpuShares: 4 - expectedCpuWeight: 1 - } - { - cpuShares: 28 - expectedCpuWeight: 1 - } - { - cpuShares: 29 - expectedCpuWeight: 2 - } - { - cpuShares: 245 - expectedCpuWeight: 10 - } - { - cpuShares: 262144 - expectedCpuWeight: 10000 - } - } - - for _ testCase := range testCases { - if actual := cpuSharesToCPUWeight(testCase.cpuShares); actual != testCase.expectedCpuWeight { - t.Errorf(""cpuShares: %v expectedCpuWeight: %v actualCpuWeight: %v"" - testCase.cpuShares testCase.expectedCpuWeight actual) - } - } -} - func TestCpuWeightToCPUShares(t *testing.T) { testCases := []struct { cpuWeight uint64"
kubernetes/kubernetes,cafff6eadeb58cbf006c77017c341b8858eccd9b,Kubernetes Prow Robot,2025-10-04 15:42:57,Merge pull request #134409 from SergeyKanzhelev/remove-cpu-conversion-methods  remove cpuSharesToCPUWeight that is not used any longer,pkg/kubelet/cm/cgroup_v2_manager_linux.go,0,6,6,func (c *cgroupV2impl) buildCgroupUnifiedPath(name CgroupName) string { return path.Join(cmutil.CgroupRoot cgroupFsAdaptedName) } -// Convert cgroup v1 cpu.shares value to cgroup v2 cpu.weight -// https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/2254-cgroup-v2#phase-1-convert-from-cgroups-v1-settings-to-v2 -func cpuSharesToCPUWeight(cpuShares uint64) uint64 { - return uint64((((cpuShares - 2) * 9999) / 262142) + 1) -} - // Convert cgroup v2 cpu.weight value to cgroup v1 cpu.shares // https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/2254-cgroup-v2#phase-1-convert-from-cgroups-v1-settings-to-v2 func cpuWeightToCPUShares(cpuWeight uint64) uint64 {
kubernetes/kubernetes,ae8ea8994ef8c9fac81f31d459ed120da3b122f3,yongruilin,2025-10-03 19:33:46,feat(validation): Enhance validation tests with normalization rules support,staging/src/k8s.io/apiserver/pkg/registry/rest/validate_test.go,22,2,24,"func TestGatherDeclarativeValidationMismatches(t *testing.T) { errB := field.Invalid(minReadySecondsPath -1 ""covered error B"").WithOrigin(""minimum"") coveredErrB := field.Invalid(minReadySecondsPath -1 ""covered error B"").WithOrigin(""minimum"") errBWithDiffDetail := field.Invalid(minReadySecondsPath -1 ""covered error B - different detail"").WithOrigin(""minimum"") + errBWithDiffPath := field.Invalid(field.NewPath(""spec"").Child(""fakeminReadySeconds"") -1 ""covered error B"").WithOrigin(""minimum"") coveredErrB.CoveredByDeclarative = true errC := field.Invalid(replicasPath nil ""covered error C"").WithOrigin(""minimum"") coveredErrC := field.Invalid(replicasPath nil ""covered error C"").WithOrigin(""minimum"") func TestGatherDeclarativeValidationMismatches(t *testing.T) { takeover bool expectMismatches bool expectDetailsContaining []string + normalizedRules []field.NormalizationRule }{ { name: ""Declarative and imperative return 0 errors - no mismatch"" func TestGatherDeclarativeValidationMismatches(t *testing.T) { expectMismatches: false expectDetailsContaining: []string{} } + { + name: ""Field normalization errors don't match - mismatch"" + imperativeErrors: field.ErrorList{ + coveredErrB + } + declarativeErrors: field.ErrorList{ + errBWithDiffPath + } + normalizedRules: []field.NormalizationRule{ + { + Regexp: regexp.MustCompile(`spec.fakeminReadySeconds`) + Replacement: ""spec.minReadySeconds"" + } + } + takeover: false + expectMismatches: false + expectDetailsContaining: []string{} + } } for _ tc := range testCases { t.Run(tc.name func(t *testing.T) { - details := gatherDeclarativeValidationMismatches(tc.imperativeErrors tc.declarativeErrors tc.takeover) + details := gatherDeclarativeValidationMismatches(tc.imperativeErrors tc.declarativeErrors tc.takeover tc.normalizedRules) // Check if mismatches were found if expected if tc.expectMismatches && len(details) == 0 { t.Errorf(""Expected mismatches but got none"") func TestCompareDeclarativeErrorsAndEmitMismatches(t *testing.T) { defer klog.LogToStderr(true) ctx := context.Background() - compareDeclarativeErrorsAndEmitMismatches(ctx tc.imperativeErrs tc.declarativeErrs tc.takeover ""test_validationIdentifier"") + compareDeclarativeErrorsAndEmitMismatches(ctx tc.imperativeErrs tc.declarativeErrs tc.takeover ""test_validationIdentifier"" nil) klog.Flush() logOutput := buf.String()"
kubernetes/kubernetes,7bbc7228aca7a7250f2e8a7ebd1e31f8f24631bf,yongruilin,2025-10-03 07:09:35,run update-codegen.sh,staging/src/k8s.io/api/resource/v1/generated.proto,6,0,6,message DeviceClaimConfiguration { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated string requests = 1; optional DeviceConfiguration deviceConfiguration = 2; message DeviceConstraint { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated string requests = 1; // MatchAttribute requires that all devices in question have this message DeviceRequest { // // +optional // +oneOf=deviceRequestType + // +k8s:optional optional ExactDeviceRequest exactly = 2; // FirstAvailable contains subrequests of which exactly one will be message DeviceRequest { // +oneOf=deviceRequestType // +listType=atomic // +featureGate=DRAPrioritizedList + // +k8s:maxItems=8 repeated DeviceSubRequest firstAvailable = 3; } message DeviceSubRequest { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated DeviceSelector selectors = 3; // AllocationMode and its related fields define how devices are allocated message ExactDeviceRequest { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated DeviceSelector selectors = 2; // AllocationMode and its related fields define how devices are allocated
kubernetes/kubernetes,7bbc7228aca7a7250f2e8a7ebd1e31f8f24631bf,yongruilin,2025-10-03 07:09:35,run update-codegen.sh,staging/src/k8s.io/api/resource/v1beta1/generated.proto,6,0,6,message DeviceClaimConfiguration { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated string requests = 1; optional DeviceConfiguration deviceConfiguration = 2; message DeviceConstraint { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated string requests = 1; // MatchAttribute requires that all devices in question have this message DeviceRequest { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated DeviceSelector selectors = 3; // AllocationMode and its related fields define how devices are allocated message DeviceRequest { // +oneOf=deviceRequestType // +listType=atomic // +featureGate=DRAPrioritizedList + // +k8s:maxItems=8 repeated DeviceSubRequest firstAvailable = 7; // If specified the request's tolerations. message DeviceRequestAllocationResult { // +optional // +listType=atomic // +featureGate=DRADeviceTaints + // +k8s:maxItems=16 repeated DeviceToleration tolerations = 6; // BindingConditions contains a copy of the BindingConditions message DeviceSubRequest { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated DeviceSelector selectors = 3; // AllocationMode and its related fields define how devices are allocated
kubernetes/kubernetes,7bbc7228aca7a7250f2e8a7ebd1e31f8f24631bf,yongruilin,2025-10-03 07:09:35,run update-codegen.sh,staging/src/k8s.io/api/resource/v1beta2/generated.proto,6,0,6,message DeviceClaimConfiguration { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated string requests = 1; optional DeviceConfiguration deviceConfiguration = 2; message DeviceConstraint { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated string requests = 1; // MatchAttribute requires that all devices in question have this message DeviceRequest { // // +optional // +oneOf=deviceRequestType + // +k8s:optional optional ExactDeviceRequest exactly = 2; // FirstAvailable contains subrequests of which exactly one will be message DeviceRequest { // +oneOf=deviceRequestType // +listType=atomic // +featureGate=DRAPrioritizedList + // +k8s:maxItems=8 repeated DeviceSubRequest firstAvailable = 3; } message DeviceSubRequest { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated DeviceSelector selectors = 3; // AllocationMode and its related fields define how devices are allocated message ExactDeviceRequest { // // +optional // +listType=atomic + // +k8s:maxItems=32 repeated DeviceSelector selectors = 2; // AllocationMode and its related fields define how devices are allocated
kubernetes/kubernetes,7366031541ac614176c5a86a88a73c446186baa6,yongruilin,2025-10-03 06:51:15,feat(dra): Add maxItems validation tags for ResourceClaim fields  This commit adds +k8s:maxItems tags to several slice fields within the ResourceClaimSpec across versions v1  v1beta1  and v1beta2.  The following fields under ResourceClaimSpec are now validated for their maximum number of items:  - DeviceRequest.FirstAvailable  - ExactDeviceRequest.Selectors  - DeviceSubRequest.Selectors  - DeviceConstraint.Requests  - DeviceClaimConfiguration.Requests,pkg/apis/resource/validation/validation.go,4,4,8,"func validateDeviceRequest(request resource.DeviceRequest fldPath *field.Path func(subRequest resource.DeviceSubRequest) (string string) { return subRequest.Name ""name"" } - fldPath.Child(""firstAvailable""))...) + fldPath.Child(""firstAvailable"") sizeCovered)...) } if request.Exactly != nil { func validateSelectorSlice(selectors []resource.DeviceSelector fldPath *field.P func(selector resource.DeviceSelector fldPath *field.Path) field.ErrorList { return validateSelector(selector fldPath stored) } - fldPath) + fldPath sizeCovered) } func validateSelector(selector resource.DeviceSelector fldPath *field.Path stored bool) field.ErrorList { func validateDeviceConstraint(constraint resource.DeviceConstraint fldPath *fie func(name string fldPath *field.Path) field.ErrorList { return validateRequestNameRef(name fldPath requestNames) } - stringKey fldPath.Child(""requests""))...) + stringKey fldPath.Child(""requests"") sizeCovered)...) if constraint.MatchAttribute != nil { allErrs = append(allErrs validateFullyQualifiedName(*constraint.MatchAttribute fldPath.Child(""matchAttribute""))...) } else if constraint.DistinctAttribute != nil { func validateDeviceClaimConfiguration(config resource.DeviceClaimConfiguration allErrs = append(allErrs validateSet(config.Requests resource.DeviceRequestsMaxSize func(name string fldPath *field.Path) field.ErrorList { return validateRequestNameRef(name fldPath requestNames) - } stringKey fldPath.Child(""requests""))...) + } stringKey fldPath.Child(""requests"") sizeCovered)...) allErrs = append(allErrs validateDeviceConfiguration(config.DeviceConfiguration fldPath stored)...) return allErrs }"
kubernetes/kubernetes,7366031541ac614176c5a86a88a73c446186baa6,yongruilin,2025-10-03 06:51:15,feat(dra): Add maxItems validation tags for ResourceClaim fields  This commit adds +k8s:maxItems tags to several slice fields within the ResourceClaimSpec across versions v1  v1beta1  and v1beta2.  The following fields under ResourceClaimSpec are now validated for their maximum number of items:  - DeviceRequest.FirstAvailable  - ExactDeviceRequest.Selectors  - DeviceSubRequest.Selectors  - DeviceConstraint.Requests  - DeviceClaimConfiguration.Requests,staging/src/k8s.io/api/resource/v1/types.go,6,0,6,"type DeviceRequest struct { // // +optional // +oneOf=deviceRequestType + // +k8s:optional Exactly *ExactDeviceRequest `json:""exactly omitempty"" protobuf:""bytes 2 name=exactly""` // FirstAvailable contains subrequests of which exactly one will be type DeviceRequest struct { // +oneOf=deviceRequestType // +listType=atomic // +featureGate=DRAPrioritizedList + // +k8s:maxItems=8 FirstAvailable []DeviceSubRequest `json:""firstAvailable omitempty"" protobuf:""bytes 3 name=firstAvailable""` } type ExactDeviceRequest struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Selectors []DeviceSelector `json:""selectors omitempty"" protobuf:""bytes 2 name=selectors""` // AllocationMode and its related fields define how devices are allocated type DeviceSubRequest struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Selectors []DeviceSelector `json:""selectors omitempty"" protobuf:""bytes 3 name=selectors""` // AllocationMode and its related fields define how devices are allocated type DeviceConstraint struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Requests []string `json:""requests omitempty"" protobuf:""bytes 1 opt name=requests""` // MatchAttribute requires that all devices in question have this type DeviceClaimConfiguration struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Requests []string `json:""requests omitempty"" protobuf:""bytes 1 opt name=requests""` DeviceConfiguration `json:"" inline"" protobuf:""bytes 2 name=deviceConfiguration""`"
kubernetes/kubernetes,7366031541ac614176c5a86a88a73c446186baa6,yongruilin,2025-10-03 06:51:15,feat(dra): Add maxItems validation tags for ResourceClaim fields  This commit adds +k8s:maxItems tags to several slice fields within the ResourceClaimSpec across versions v1  v1beta1  and v1beta2.  The following fields under ResourceClaimSpec are now validated for their maximum number of items:  - DeviceRequest.FirstAvailable  - ExactDeviceRequest.Selectors  - DeviceSubRequest.Selectors  - DeviceConstraint.Requests  - DeviceClaimConfiguration.Requests,staging/src/k8s.io/api/resource/v1beta1/types.go,6,0,6,"type DeviceRequest struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Selectors []DeviceSelector `json:""selectors omitempty"" protobuf:""bytes 3 name=selectors""` // AllocationMode and its related fields define how devices are allocated type DeviceRequest struct { // +oneOf=deviceRequestType // +listType=atomic // +featureGate=DRAPrioritizedList + // +k8s:maxItems=8 FirstAvailable []DeviceSubRequest `json:""firstAvailable omitempty"" protobuf:""bytes 7 name=firstAvailable""` // If specified the request's tolerations. type DeviceSubRequest struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Selectors []DeviceSelector `json:""selectors omitempty"" protobuf:""bytes 3 name=selectors""` // AllocationMode and its related fields define how devices are allocated type DeviceConstraint struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Requests []string `json:""requests omitempty"" protobuf:""bytes 1 opt name=requests""` // MatchAttribute requires that all devices in question have this type DeviceClaimConfiguration struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Requests []string `json:""requests omitempty"" protobuf:""bytes 1 opt name=requests""` DeviceConfiguration `json:"" inline"" protobuf:""bytes 2 name=deviceConfiguration""` type DeviceRequestAllocationResult struct { // +optional // +listType=atomic // +featureGate=DRADeviceTaints + // +k8s:maxItems=16 Tolerations []DeviceToleration `json:""tolerations omitempty"" protobuf:""bytes 6 opt name=tolerations""` // BindingConditions contains a copy of the BindingConditions"
kubernetes/kubernetes,7366031541ac614176c5a86a88a73c446186baa6,yongruilin,2025-10-03 06:51:15,feat(dra): Add maxItems validation tags for ResourceClaim fields  This commit adds +k8s:maxItems tags to several slice fields within the ResourceClaimSpec across versions v1  v1beta1  and v1beta2.  The following fields under ResourceClaimSpec are now validated for their maximum number of items:  - DeviceRequest.FirstAvailable  - ExactDeviceRequest.Selectors  - DeviceSubRequest.Selectors  - DeviceConstraint.Requests  - DeviceClaimConfiguration.Requests,staging/src/k8s.io/api/resource/v1beta2/types.go,6,0,6,"type DeviceRequest struct { // // +optional // +oneOf=deviceRequestType + // +k8s:optional Exactly *ExactDeviceRequest `json:""exactly omitempty"" protobuf:""bytes 2 name=exactly""` // FirstAvailable contains subrequests of which exactly one will be type DeviceRequest struct { // +oneOf=deviceRequestType // +listType=atomic // +featureGate=DRAPrioritizedList + // +k8s:maxItems=8 FirstAvailable []DeviceSubRequest `json:""firstAvailable omitempty"" protobuf:""bytes 3 name=firstAvailable""` } type ExactDeviceRequest struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Selectors []DeviceSelector `json:""selectors omitempty"" protobuf:""bytes 2 name=selectors""` // AllocationMode and its related fields define how devices are allocated type DeviceSubRequest struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Selectors []DeviceSelector `json:""selectors omitempty"" protobuf:""bytes 3 name=selectors""` // AllocationMode and its related fields define how devices are allocated type DeviceConstraint struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Requests []string `json:""requests omitempty"" protobuf:""bytes 1 opt name=requests""` // MatchAttribute requires that all devices in question have this type DeviceClaimConfiguration struct { // // +optional // +listType=atomic + // +k8s:maxItems=32 Requests []string `json:""requests omitempty"" protobuf:""bytes 1 opt name=requests""` DeviceConfiguration `json:"" inline"" protobuf:""bytes 2 name=deviceConfiguration""`"
kubernetes/kubernetes,5b7e96219f8afbb54b0462ace066fa4ac76e7abb,Sergey Kanzhelev,2025-10-03 22:50:07,remove cpuSharesToCPUWeight that is not used any longer,pkg/kubelet/cm/cgroup_manager_linux_test.go,0,43,43,"func TestParseSystemdToCgroupName(t *testing.T) { } } -func TestCpuSharesToCPUWeight(t *testing.T) { - testCases := []struct { - cpuShares uint64 - expectedCpuWeight uint64 - }{ - { - cpuShares: 2 - expectedCpuWeight: 1 - } - { - cpuShares: 3 - expectedCpuWeight: 1 - } - { - cpuShares: 4 - expectedCpuWeight: 1 - } - { - cpuShares: 28 - expectedCpuWeight: 1 - } - { - cpuShares: 29 - expectedCpuWeight: 2 - } - { - cpuShares: 245 - expectedCpuWeight: 10 - } - { - cpuShares: 262144 - expectedCpuWeight: 10000 - } - } - - for _ testCase := range testCases { - if actual := cpuSharesToCPUWeight(testCase.cpuShares); actual != testCase.expectedCpuWeight { - t.Errorf(""cpuShares: %v expectedCpuWeight: %v actualCpuWeight: %v"" - testCase.cpuShares testCase.expectedCpuWeight actual) - } - } -} - func TestCpuWeightToCPUShares(t *testing.T) { testCases := []struct { cpuWeight uint64"
kubernetes/kubernetes,5b7e96219f8afbb54b0462ace066fa4ac76e7abb,Sergey Kanzhelev,2025-10-03 22:50:07,remove cpuSharesToCPUWeight that is not used any longer,pkg/kubelet/cm/cgroup_v2_manager_linux.go,0,6,6,func (c *cgroupV2impl) buildCgroupUnifiedPath(name CgroupName) string { return path.Join(cmutil.CgroupRoot cgroupFsAdaptedName) } -// Convert cgroup v1 cpu.shares value to cgroup v2 cpu.weight -// https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/2254-cgroup-v2#phase-1-convert-from-cgroups-v1-settings-to-v2 -func cpuSharesToCPUWeight(cpuShares uint64) uint64 { - return uint64((((cpuShares - 2) * 9999) / 262142) + 1) -} - // Convert cgroup v2 cpu.weight value to cgroup v1 cpu.shares // https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/2254-cgroup-v2#phase-1-convert-from-cgroups-v1-settings-to-v2 func cpuWeightToCPUShares(cpuWeight uint64) uint64 {
kubernetes/kubernetes,ab7e45228f8238530ec1f11b0abf532f50e0ae45,Kubernetes Prow Robot,2025-10-03 21:22:58,Merge pull request #134400 from macsko/disable_async_api_calls_feature_gate  Disable SchedulerAsyncAPICalls feature gate due to a known regression in v1.34,pkg/features/kube_features.go,1,1,2,"var defaultVersionedKubernetesFeatureGates = map[featuregate.Feature]featuregate } SchedulerAsyncAPICalls: { - {Version: version.MustParse(""1.34"") Default: true PreRelease: featuregate.Beta} + {Version: version.MustParse(""1.34"") Default: false PreRelease: featuregate.Beta} } SchedulerAsyncPreemption: {"
kubernetes/kubernetes,ab7e45228f8238530ec1f11b0abf532f50e0ae45,Kubernetes Prow Robot,2025-10-03 21:22:58,Merge pull request #134400 from macsko/disable_async_api_calls_feature_gate  Disable SchedulerAsyncAPICalls feature gate due to a known regression in v1.34,pkg/scheduler/backend/api_dispatcher/api_dispatcher_test.go,6,4,10,"import ( metav1 ""k8s.io/apimachinery/pkg/apis/meta/v1"" ""k8s.io/apimachinery/pkg/types"" + utilfeature ""k8s.io/apiserver/pkg/util/feature"" clientset ""k8s.io/client-go/kubernetes"" ""k8s.io/client-go/kubernetes/fake"" + featuregatetesting ""k8s.io/component-base/featuregate/testing"" ""k8s.io/component-base/metrics/testutil"" ""k8s.io/klog/v2/ktesting"" fwk ""k8s.io/kube-scheduler/framework"" + ""k8s.io/kubernetes/pkg/features"" ""k8s.io/kubernetes/pkg/scheduler/metrics"" ) -func init() { +func registerAndResetMetrics(t *testing.T) { + featuregatetesting.SetFeatureGateDuringTest(t utilfeature.DefaultFeatureGate features.SchedulerAsyncAPICalls true) metrics.Register() -} -func resetMetrics() { metrics.AsyncAPICallsTotal.Reset() metrics.AsyncAPICallDuration.Reset() metrics.AsyncAPIPendingCalls.Reset() func (mac *mockAPICall) IsNoOp() bool { func TestAPIDispatcherLifecycle(t *testing.T) { // Reset all async API metrics - resetMetrics() + registerAndResetMetrics(t) logger _ := ktesting.NewTestContext(t)"
kubernetes/kubernetes,ab7e45228f8238530ec1f11b0abf532f50e0ae45,Kubernetes Prow Robot,2025-10-03 21:22:58,Merge pull request #134400 from macsko/disable_async_api_calls_feature_gate  Disable SchedulerAsyncAPICalls feature gate due to a known regression in v1.34,test/compatibility_lifecycle/reference/versioned_feature_list.yaml,1,1,2,"version: ""1.29"" - name: SchedulerAsyncAPICalls versionedSpecs: - - default: true + - default: false lockToDefault: false preRelease: Beta version: ""1.34"""
kubernetes/kubernetes,8c6fa3bd2f87efdd46e27483556213c5759e6bf4,Kubernetes Prow Robot,2025-10-03 20:32:56,Merge pull request #134398 from humblec/metrics-csi  correct metrics function comments,pkg/kubelet/metrics/metrics.go,4,4,8,"const ( // Metric for tracking garbage collected images ImageGarbageCollectedTotalKey = ""image_garbage_collected_total"" - // Metric for tracking aligment of compute resources + // Metric for tracking alignment of compute resources ContainerAlignedComputeResourcesNameKey = ""container_aligned_compute_resources_count"" ContainerAlignedComputeResourcesFailureNameKey = ""container_aligned_compute_resources_failure_count"" ContainerAlignedComputeResourcesScopeLabelKey = ""scope"" var ( } ) - // TopologyManagerAdmissionDuration is a Histogram that tracks the duration (in seconds) to serve a pod admission request. + // TopologyManagerAdmissionDuration is a Histogram that tracks the duration (in milliseconds) to serve a pod admission request. TopologyManagerAdmissionDuration = metrics.NewHistogram( &metrics.HistogramOpts{ Subsystem: KubeletSubsystem var ( StabilityLevel: metrics.ALPHA } ) - // OrphanPodCleanedVolumes is number of times that removeOrphanedPodVolumeDirs failed. + // OrphanPodCleanedVolumesErrors is the number of times that removeOrphanedPodVolumeDirs failed. OrphanPodCleanedVolumesErrors = metrics.NewGauge( &metrics.GaugeOpts{ Subsystem: KubeletSubsystem var ( []string{""reason""} ) - // ImageVolumeRequestedTotal trakcs the number of requested image volumes. + // ImageVolumeRequestedTotal tracks the number of requested image volumes. ImageVolumeRequestedTotal = metrics.NewCounter( &metrics.CounterOpts{ Subsystem: KubeletSubsystem"
kubernetes/kubernetes,8c6fa3bd2f87efdd46e27483556213c5759e6bf4,Kubernetes Prow Robot,2025-10-03 20:32:56,Merge pull request #134398 from humblec/metrics-csi  correct metrics function comments,pkg/volume/csi/csi_attacher.go,1,1,2,func (c *csiAttacher) MountDevice(spec *volume.Spec devicePath string deviceMo return nil } - //TODO (vladimirvivien) implement better AccessModes mapping between k8s and CSI + // TODO (vladimirvivien) implement better AccessModes mapping between k8s and CSI accessMode := v1.ReadWriteOnce if spec.PersistentVolume.Spec.AccessModes != nil { accessMode = spec.PersistentVolume.Spec.AccessModes[0]
kubernetes/kubernetes,8c6fa3bd2f87efdd46e27483556213c5759e6bf4,Kubernetes Prow Robot,2025-10-03 20:32:56,Merge pull request #134398 from humblec/metrics-csi  correct metrics function comments,pkg/volume/csi/csi_block.go,2,2,4,func (m *csiBlockMapper) SetUpDevice() (string error) { } } - //TODO (vladimirvivien) implement better AccessModes mapping between k8s and CSI + // TODO (vladimirvivien) implement better AccessModes mapping between k8s and CSI accessMode := v1.ReadWriteOnce if m.spec.PersistentVolume.Spec.AccessModes != nil { accessMode = m.spec.PersistentVolume.Spec.AccessModes[0] func (m *csiBlockMapper) MapPodDevice() (string error) { } } - //TODO (vladimirvivien) implement better AccessModes mapping between k8s and CSI + // TODO (vladimirvivien) implement better AccessModes mapping between k8s and CSI accessMode := v1.ReadWriteOnce if m.spec.PersistentVolume.Spec.AccessModes != nil { accessMode = m.spec.PersistentVolume.Spec.AccessModes[0]
kubernetes/kubernetes,8c6fa3bd2f87efdd46e27483556213c5759e6bf4,Kubernetes Prow Robot,2025-10-03 20:32:56,Merge pull request #134398 from humblec/metrics-csi  correct metrics function comments,pkg/volume/csi/csi_mounter.go,1,1,2,func (c *csiMountMgr) SetUpAt(dir string mounterArgs volume.MounterArgs) error secretRef = pvSrc.NodePublishSecretRef } - //TODO (vladimirvivien) implement better AccessModes mapping between k8s and CSI + // TODO (vladimirvivien) implement better AccessModes mapping between k8s and CSI if c.spec.PersistentVolume.Spec.AccessModes != nil { accessMode = c.spec.PersistentVolume.Spec.AccessModes[0] }
kubernetes/kubernetes,8c6fa3bd2f87efdd46e27483556213c5759e6bf4,Kubernetes Prow Robot,2025-10-03 20:32:56,Merge pull request #134398 from humblec/metrics-csi  correct metrics function comments,pkg/volume/volume.go,1,1,2,type Metrics struct { // and will not equal InodesUsed + InodesFree as the fs is shared. Inodes *resource.Quantity - // InodesFree represent the inodes available for the volume. For Volumes that share + // InodesFree represents the inodes available for the volume. For Volumes that share // a filesystem with the host (e.g. emptydir hostpath) this is the free inodes // on the underlying storage and is shared with host processes and other volumes InodesFree *resource.Quantity
kubernetes/kubernetes,8c6fa3bd2f87efdd46e27483556213c5759e6bf4,Kubernetes Prow Robot,2025-10-03 20:32:56,Merge pull request #134398 from humblec/metrics-csi  correct metrics function comments,pkg/volume/volume_linux.go,1,1,2,func readDirNames(dirname string) ([]string error) { // walkDeep can be used to traverse directories and has two minor differences // from filepath.Walk: // - List of files/dirs is not sorted for performance reasons -// - callback walkFunc is invoked on root directory after visiting children dirs and files +// - callback walkFunc is invoked on root directory after visiting child dirs and files func walkDeep(root string walkFunc filepath.WalkFunc) error { info err := os.Lstat(root) if err != nil {
kubernetes/kubernetes,8443187688845d8e3c21385b9689c1519280ad27,Tim Hockin,2025-10-02 21:51:58,Warn when quota request > limit,pkg/registry/core/resourcequota/strategy.go,23,15,38,"func (resourcequotaStrategy) Validate(ctx context.Context obj runtime.Object) f return validation.ValidateResourceQuota(resourcequota) } +// all known resource names that we want to check for request <= limit +var knownResourceNames = []api.ResourceName{ + api.ResourceCPU + api.ResourceMemory + api.ResourceStorage + api.ResourceEphemeralStorage +} + // WarningsOnCreate returns warnings for the creation of the given object. func (resourcequotaStrategy) WarningsOnCreate(ctx context.Context obj runtime.Object) []string { resourcequota := obj.(*api.ResourceQuota) - allWarnings := make([]string 0) - coreReosurces := []api.ResourceName{ - api.ResourceCPU api.ResourceMemory - api.ResourceStorage api.ResourceEphemeralStorage - } - for _ resourceName := range coreReosurces { - requestResourceName := fmt.Sprintf(""requests.%s"" resourceName) - requestResource requestOK := resourcequota.Spec.Hard[api.ResourceName(requestResourceName)] - if (resourceName == api.ResourceCPU || resourceName == api.ResourceMemory) && !requestOK { - requestResourceName = string(resourceName) - requestResource requestOK = resourcequota.Spec.Hard[api.ResourceName(requestResourceName)] + var allWarnings []string + for _ resourceName := range knownResourceNames { + requestResourceName := api.ResourceName(fmt.Sprintf(""requests.%s"" resourceName)) + request requestOK := resourcequota.Spec.Hard[requestResourceName] + if !requestOK && (resourceName == api.ResourceCPU || resourceName == api.ResourceMemory) { + // try the bare name for cpu and memory + request requestOK = resourcequota.Spec.Hard[resourceName] + if requestOK { + requestResourceName = resourceName + } } - limitResourceName := fmt.Sprintf(""limits.%s"" resourceName) - limitResource limitOK := resourcequota.Spec.Hard[api.ResourceName(limitResourceName)] - if requestOK && limitOK && requestResource.Cmp(limitResource) == 1 { - allWarnings = append(allWarnings fmt.Sprintf(""Create ResourceQuota requests.%s: %s should be less than limits.%s: %s"" resourceName requestResource.String() resourceName limitResource.String())) + limitResourceName := api.ResourceName(fmt.Sprintf(""limits.%s"" resourceName)) + limit limitOK := resourcequota.Spec.Hard[limitResourceName] + if requestOK && limitOK && request.Cmp(limit) > 0 { + allWarnings = append(allWarnings fmt.Sprintf(""ResourceQuota %s (%s) should be less than %s (%s)"" + requestResourceName request.String() limitResourceName limit.String())) } } return allWarnings"
kubernetes/kubernetes,79678dd39359b9bd617fe283d05fad2ca1c37094,rongfu.leng,2025-03-13 13:06:59,feat: add resourcequota WarningsOnCreate request less than limits  Signed-off-by: rongfu.leng <lenronfu@gmail.com>,pkg/registry/core/resourcequota/strategy.go,21,1,22,"package resourcequota import ( ""context"" + ""fmt"" ""k8s.io/apimachinery/pkg/runtime"" ""k8s.io/apimachinery/pkg/util/validation/field"" func (resourcequotaStrategy) Validate(ctx context.Context obj runtime.Object) f // WarningsOnCreate returns warnings for the creation of the given object. func (resourcequotaStrategy) WarningsOnCreate(ctx context.Context obj runtime.Object) []string { - return nil + resourcequota := obj.(*api.ResourceQuota) + allWarnings := make([]string 0) + coreReosurces := []api.ResourceName{ + api.ResourceCPU api.ResourceMemory + api.ResourceStorage api.ResourceEphemeralStorage + } + for _ resourceName := range coreReosurces { + requestResourceName := fmt.Sprintf(""requests.%s"" resourceName) + requestResource requestOK := resourcequota.Spec.Hard[api.ResourceName(requestResourceName)] + if (resourceName == api.ResourceCPU || resourceName == api.ResourceMemory) && !requestOK { + requestResourceName = string(resourceName) + requestResource requestOK = resourcequota.Spec.Hard[api.ResourceName(requestResourceName)] + } + limitResourceName := fmt.Sprintf(""limits.%s"" resourceName) + limitResource limitOK := resourcequota.Spec.Hard[api.ResourceName(limitResourceName)] + if requestOK && limitOK && requestResource.Cmp(limitResource) == 1 { + allWarnings = append(allWarnings fmt.Sprintf(""Create ResourceQuota requests.%s: %s should be less than limits.%s: %s"" resourceName requestResource.String() resourceName limitResource.String())) + } + } + return allWarnings } // Canonicalize normalizes the object after validation."
kubernetes/kubernetes,79678dd39359b9bd617fe283d05fad2ca1c37094,rongfu.leng,2025-03-13 13:06:59,feat: add resourcequota WarningsOnCreate request less than limits  Signed-off-by: rongfu.leng <lenronfu@gmail.com>,pkg/registry/core/resourcequota/strategy_test.go,73,0,73,"limitations under the License. package resourcequota import ( + ""context"" + ""reflect"" ""testing"" ""k8s.io/apimachinery/pkg/api/resource"" func TestResourceQuotaStrategy(t *testing.T) { t.Errorf(""ResourceQuota does not allow setting status on create"") } } + +func Test_WarningsOnCreate(t *testing.T) { + tests := []struct { + name string + args *api.ResourceQuota + wantWarnings []string + }{ + { + name: ""Empty Hard Spec"" + args: &api.ResourceQuota{} + wantWarnings: []string{} + } + { + name: ""Request less than limit"" + args: &api.ResourceQuota{ + Spec: api.ResourceQuotaSpec{ + Hard: api.ResourceList{ + api.ResourceName(""requests.cpu""): resource.MustParse(""500m"") + api.ResourceName(""limits.cpu""): resource.MustParse(""1"") + api.ResourceName(""requests.memory""): resource.MustParse(""1Gi"") + api.ResourceName(""limits.memory""): resource.MustParse(""2Gi"") + } + } + } + wantWarnings: []string{} + } + { + name: ""Request greater than limit"" + args: &api.ResourceQuota{ + Spec: api.ResourceQuotaSpec{ + Hard: api.ResourceList{ + api.ResourceName(""requests.cpu""): resource.MustParse(""2"") + api.ResourceName(""limits.cpu""): resource.MustParse(""1"") + api.ResourceName(""requests.memory""): resource.MustParse(""3Gi"") + api.ResourceName(""limits.memory""): resource.MustParse(""2Gi"") + } + } + } + wantWarnings: []string{ + ""Create ResourceQuota requests.cpu: 2 should be less than limits.cpu: 1"" + ""Create ResourceQuota requests.memory: 3Gi should be less than limits.memory: 2Gi"" + } + } + { + name: ""Request greater than limit and not requests"" + args: &api.ResourceQuota{ + Spec: api.ResourceQuotaSpec{ + Hard: api.ResourceList{ + api.ResourceName(""cpu""): resource.MustParse(""2"") + api.ResourceName(""limits.cpu""): resource.MustParse(""1"") + api.ResourceName(""memory""): resource.MustParse(""3Gi"") + api.ResourceName(""limits.memory""): resource.MustParse(""2Gi"") + } + } + } + wantWarnings: []string{ + ""Create ResourceQuota requests.cpu: 2 should be less than limits.cpu: 1"" + ""Create ResourceQuota requests.memory: 3Gi should be less than limits.memory: 2Gi"" + } + } + } + + for _ tt := range tests { + t.Run(tt.name func(t *testing.T) { + warnings := Strategy.WarningsOnCreate(context.Background() tt.args) + if !reflect.DeepEqual(warnings tt.wantWarnings) { + t.Errorf(""WarningsOnCreate() warnings = %v wantWarnings %v"" warnings tt.wantWarnings) + } + }) + } +}"
kubernetes/kubernetes,9624c3dcdc9a9e1286e8ca32d07d231e69ed2f0c,Kubernetes Prow Robot,2025-10-03 16:34:58,Merge pull request #134360 from ajaysundark/fix-node-swap-metric-time-stamp  Fix: Correct timestamp for node swap metrics,pkg/kubelet/metrics/collectors/resource_metrics.go,1,1,2,func (rc *resourceMetricsCollector) collectNodeSwapMetrics(ch chan<- metrics.Met return } - ch <- metrics.NewLazyMetricWithTimestamp(s.Memory.Time.Time + ch <- metrics.NewLazyMetricWithTimestamp(s.Swap.Time.Time metrics.NewLazyConstMetric(nodeSwapUsageDesc metrics.GaugeValue float64(*s.Swap.SwapUsageBytes))) }
kubernetes/kubernetes,9624c3dcdc9a9e1286e8ca32d07d231e69ed2f0c,Kubernetes Prow Robot,2025-10-03 16:34:58,Merge pull request #134360 from ajaysundark/fix-node-swap-metric-time-stamp  Fix: Correct timestamp for node swap metrics,pkg/kubelet/metrics/collectors/resource_metrics_test.go,39,0,39,"import ( func TestCollectResourceMetrics(t *testing.T) { // a static timestamp: 2021-06-23 05:11:18.302091597 +0800 staticTimestamp := time.Unix(0 1624396278302091597) + swapTimestamp := staticTimestamp.Add(10 * time.Second) testTime := metav1.NewTime(staticTimestamp) + swapTestTime := metav1.NewTime(swapTimestamp) interestedMetrics := []string{ ""scrape_error"" ""resource_scrape_error"" func TestCollectResourceMetrics(t *testing.T) { resource_scrape_error 0 ` } + { + name: ""node metrics with different timestamps"" + summary: &statsapi.Summary{ + Node: statsapi.NodeStats{ + CPU: &statsapi.CPUStats{ + Time: testTime + UsageCoreNanoSeconds: ptr.To[uint64](10000000000) + } + Memory: &statsapi.MemoryStats{ + Time: testTime + WorkingSetBytes: ptr.To[uint64](1000) + } + Swap: &statsapi.SwapStats{ + Time: swapTestTime + SwapUsageBytes: ptr.To[uint64](500) + } + } + } + summaryErr: nil + expectedMetrics: ` + # HELP node_cpu_usage_seconds_total [STABLE] Cumulative cpu time consumed by the node in core-seconds + # TYPE node_cpu_usage_seconds_total counter + node_cpu_usage_seconds_total 10 1624396278302 + # HELP node_memory_working_set_bytes [STABLE] Current working set of the node in bytes + # TYPE node_memory_working_set_bytes gauge + node_memory_working_set_bytes 1000 1624396278302 + # HELP node_swap_usage_bytes [ALPHA] Current swap usage of the node in bytes. Reported only on non-windows systems + # TYPE node_swap_usage_bytes gauge + node_swap_usage_bytes 500 1624396288302 + # HELP scrape_error [ALPHA] 1 if there was an error while getting container metrics 0 otherwise + # TYPE scrape_error gauge + scrape_error 0 + # HELP resource_scrape_error [STABLE] 1 if there was an error while getting container metrics 0 otherwise + # TYPE resource_scrape_error gauge + resource_scrape_error 0 + ` + } { name: ""nil node metrics"" summary: &statsapi.Summary{"
kubernetes/kubernetes,bd715a38d32561b45742b2d0cf0762b024107a31,Kubernetes Prow Robot,2025-10-03 14:01:05,Merge pull request #134397 from AwesomePatrol/move-stats-to-get-list  Move stats updates to getList,staging/src/k8s.io/apiserver/pkg/storage/etcd3/store.go,21,21,42,"func (s *store) GetList(ctx context.Context key string opts storage.ListOption metrics.RecordStorageListMetrics(s.groupResource numFetched numEvald numReturn) }() - stats := s.getResourceSizeEstimator() - aggregator := s.listErrAggrFactory() for { getResp err = s.getList(ctx keyPrefix opts.Recursive kubernetes.ListOptions{ func (s *store) GetList(ctx context.Context key string opts storage.ListOption } else { growSlice(v 2048 len(getResp.Kvs)) } - if stats != nil { - stats.Update(getResp.Kvs) - } // take items from the response until the bucket is full filtering as we go for i kv := range getResp.Kvs { func (s *store) GetList(ctx context.Context key string opts storage.ListOption return s.versioner.UpdateList(listObj uint64(withRev) continueValue remainingItemCount) } -func (s *store) getList(ctx context.Context keyPrefix string recursive bool options kubernetes.ListOptions) (kubernetes.ListResponse error) { +func (s *store) getList(ctx context.Context keyPrefix string recursive bool options kubernetes.ListOptions) (resp kubernetes.ListResponse err error) { startTime := time.Now() if recursive { - resp err := s.client.Kubernetes.List(ctx keyPrefix options) + resp err = s.client.Kubernetes.List(ctx keyPrefix options) metrics.RecordEtcdRequest(""list"" s.groupResource err startTime) - return resp err - } - getResp err := s.client.Kubernetes.Get(ctx keyPrefix kubernetes.GetOptions{ - Revision: options.Revision - }) - metrics.RecordEtcdRequest(""get"" s.groupResource err startTime) - var resp kubernetes.ListResponse - if getResp.KV != nil { - resp.Kvs = []*mvccpb.KeyValue{getResp.KV} - resp.Count = 1 - resp.Revision = getResp.Revision } else { - resp.Kvs = []*mvccpb.KeyValue{} - resp.Count = 0 - resp.Revision = getResp.Revision + var getResp kubernetes.GetResponse + getResp err = s.client.Kubernetes.Get(ctx keyPrefix kubernetes.GetOptions{ + Revision: options.Revision + }) + metrics.RecordEtcdRequest(""get"" s.groupResource err startTime) + if getResp.KV != nil { + resp.Kvs = []*mvccpb.KeyValue{getResp.KV} + resp.Count = 1 + resp.Revision = getResp.Revision + } else { + resp.Kvs = []*mvccpb.KeyValue{} + resp.Count = 0 + resp.Revision = getResp.Revision + } + } + + stats := s.getResourceSizeEstimator() + if len(resp.Kvs) > 0 && stats != nil { + stats.Update(resp.Kvs) } return resp err }"
kubernetes/kubernetes,4db43d13217423bf266a1b6362113e7cabf2a823,Kubernetes Prow Robot,2025-10-03 14:00:58,Merge pull request #134251 from joshjms/update-etcd-3.6.5  etcd: Update etcd to v3.6.5,build/dependencies.yaml,2,2,4,"dependencies: # etcd - name: ""etcd"" - version: 3.6.4 + version: 3.6.5 refPaths: - path: cluster/gce/manifests/etcd.manifest match: etcd_docker_tag|etcd_version dependencies: - path: hack/lib/etcd.sh match: ETCD_VERSION= - path: staging/src/k8s.io/sample-apiserver/artifacts/example/deployment.yaml - match: gcr.io/etcd-development/etcd + match: registry.k8s.io/etcd - path: test/utils/image/manifest.go match: configs\[Etcd\] = Config{list\.GcEtcdRegistry ""etcd"" ""\d+\.\d+.\d+(-(alpha|beta|rc).\d+)?(-\d+)?""}"
kubernetes/kubernetes,4db43d13217423bf266a1b6362113e7cabf2a823,Kubernetes Prow Robot,2025-10-03 14:00:58,Merge pull request #134251 from joshjms/update-etcd-3.6.5  etcd: Update etcd to v3.6.5,cluster/gce/manifests/etcd.manifest,2,2,4,"{ ""name"": ""etcd-container"" {{security_context}} - ""image"": ""{{ pillar.get('etcd_docker_repository' 'registry.k8s.io/etcd') }}:{{ pillar.get('etcd_docker_tag' '3.6.4-0') }}"" + ""image"": ""{{ pillar.get('etcd_docker_repository' 'registry.k8s.io/etcd') }}:{{ pillar.get('etcd_docker_tag' '3.6.5-0') }}"" ""resources"": { ""requests"": { ""cpu"": {{ cpulimit }} ""value"": ""{{ pillar.get('storage_backend' 'etcd3') }}"" } { ""name"": ""TARGET_VERSION"" - ""value"": ""{{ pillar.get('etcd_version' '3.6.4') }}"" + ""value"": ""{{ pillar.get('etcd_version' '3.6.5') }}"" } { ""name"": ""DO_NOT_MOVE_BINARIES"""
kubernetes/kubernetes,4db43d13217423bf266a1b6362113e7cabf2a823,Kubernetes Prow Robot,2025-10-03 14:00:58,Merge pull request #134251 from joshjms/update-etcd-3.6.5  etcd: Update etcd to v3.6.5,cluster/gce/upgrade-aliases.sh,2,2,4,"export KUBE_GCE_ENABLE_IP_ALIASES=true export SECONDARY_RANGE_NAME=""pods-default"" export STORAGE_BACKEND=""etcd3"" export STORAGE_MEDIA_TYPE=""application/vnd.kubernetes.protobuf"" -export ETCD_IMAGE=3.6.4-0 -export ETCD_VERSION=3.6.4 +export ETCD_IMAGE=3.6.5-0 +export ETCD_VERSION=3.6.5 # Upgrade master with updated kube envs ""${KUBE_ROOT}/cluster/gce/upgrade.sh"" -M -l"
kubernetes/kubernetes,4db43d13217423bf266a1b6362113e7cabf2a823,Kubernetes Prow Robot,2025-10-03 14:00:58,Merge pull request #134251 from joshjms/update-etcd-3.6.5  etcd: Update etcd to v3.6.5,cmd/kubeadm/app/constants/constants.go,2,2,4,"const ( MinExternalEtcdVersion = ""3.5.21-0"" // DefaultEtcdVersion indicates the default etcd version that kubeadm uses - DefaultEtcdVersion = ""3.6.4-0"" + DefaultEtcdVersion = ""3.6.5-0"" // Etcd defines variable used internally when referring to etcd component Etcd = ""etcd"" var ( 31: ""3.5.21-0"" 32: ""3.5.21-0"" 33: ""3.5.21-0"" - 34: ""3.6.4-0"" + 34: ""3.6.5-0"" } // KubeadmCertsClusterRoleName sets the name for the ClusterRole that allows"
kubernetes/kubernetes,4db43d13217423bf266a1b6362113e7cabf2a823,Kubernetes Prow Robot,2025-10-03 14:00:58,Merge pull request #134251 from joshjms/update-etcd-3.6.5  etcd: Update etcd to v3.6.5,hack/lib/etcd.sh,1,1,2,# A set of helpers for starting/running etcd for tests -ETCD_VERSION=${ETCD_VERSION:-3.6.4} +ETCD_VERSION=${ETCD_VERSION:-3.6.5} ETCD_HOST=${ETCD_HOST:-127.0.0.1} ETCD_PORT=${ETCD_PORT:-2379} # This is intentionally not called ETCD_LOG_LEVEL:
kubernetes/kubernetes,4db43d13217423bf266a1b6362113e7cabf2a823,Kubernetes Prow Robot,2025-10-03 14:00:58,Merge pull request #134251 from joshjms/update-etcd-3.6.5  etcd: Update etcd to v3.6.5,staging/src/k8s.io/sample-apiserver/artifacts/example/deployment.yaml,1,1,2,"spec: imagePullPolicy: Never args: [ ""--etcd-servers=http://localhost:2379"" ] - name: etcd - image: gcr.io/etcd-development/etcd:v3.6.4 + image: registry.k8s.io/etcd:v3.6.5"
kubernetes/kubernetes,4db43d13217423bf266a1b6362113e7cabf2a823,Kubernetes Prow Robot,2025-10-03 14:00:58,Merge pull request #134251 from joshjms/update-etcd-3.6.5  etcd: Update etcd to v3.6.5,test/utils/image/manifest.go,1,1,2,"func initImageConfigs(list RegistryList) (map[ImageID]Config map[ImageID]Config configs[AppArmorLoader] = Config{list.PromoterE2eRegistry ""apparmor-loader"" ""1.4""} configs[BusyBox] = Config{list.PromoterE2eRegistry ""busybox"" ""1.37.0-1""} configs[DistrolessIptables] = Config{list.BuildImageRegistry ""distroless-iptables"" ""v0.8.2""} - configs[Etcd] = Config{list.GcEtcdRegistry ""etcd"" ""3.6.4-0""} + configs[Etcd] = Config{list.GcEtcdRegistry ""etcd"" ""3.6.5-0""} configs[InvalidRegistryImage] = Config{list.InvalidRegistry ""alpine"" ""3.1""} configs[IpcUtils] = Config{list.PromoterE2eRegistry ""ipc-utils"" ""1.3""} configs[JessieDnsutils] = Config{list.PromoterE2eRegistry ""jessie-dnsutils"" ""1.7""}"
kubernetes/kubernetes,1137d51b3588f82daedbd067d2d8b0c8bab3aca8,Maciej Skoczeń,2025-09-23 09:29:44,Disable SchedulerAsyncAPICalls feature gate due to a known regression,pkg/features/kube_features.go,1,1,2,"var defaultVersionedKubernetesFeatureGates = map[featuregate.Feature]featuregate } SchedulerAsyncAPICalls: { - {Version: version.MustParse(""1.34"") Default: true PreRelease: featuregate.Beta} + {Version: version.MustParse(""1.34"") Default: false PreRelease: featuregate.Beta} } SchedulerAsyncPreemption: {"
kubernetes/kubernetes,1137d51b3588f82daedbd067d2d8b0c8bab3aca8,Maciej Skoczeń,2025-09-23 09:29:44,Disable SchedulerAsyncAPICalls feature gate due to a known regression,pkg/scheduler/backend/api_dispatcher/api_dispatcher_test.go,6,4,10,"import ( metav1 ""k8s.io/apimachinery/pkg/apis/meta/v1"" ""k8s.io/apimachinery/pkg/types"" + utilfeature ""k8s.io/apiserver/pkg/util/feature"" clientset ""k8s.io/client-go/kubernetes"" ""k8s.io/client-go/kubernetes/fake"" + featuregatetesting ""k8s.io/component-base/featuregate/testing"" ""k8s.io/component-base/metrics/testutil"" ""k8s.io/klog/v2/ktesting"" fwk ""k8s.io/kube-scheduler/framework"" + ""k8s.io/kubernetes/pkg/features"" ""k8s.io/kubernetes/pkg/scheduler/metrics"" ) -func init() { +func registerAndResetMetrics(t *testing.T) { + featuregatetesting.SetFeatureGateDuringTest(t utilfeature.DefaultFeatureGate features.SchedulerAsyncAPICalls true) metrics.Register() -} -func resetMetrics() { metrics.AsyncAPICallsTotal.Reset() metrics.AsyncAPICallDuration.Reset() metrics.AsyncAPIPendingCalls.Reset() func (mac *mockAPICall) IsNoOp() bool { func TestAPIDispatcherLifecycle(t *testing.T) { // Reset all async API metrics - resetMetrics() + registerAndResetMetrics(t) logger _ := ktesting.NewTestContext(t)"
kubernetes/kubernetes,1137d51b3588f82daedbd067d2d8b0c8bab3aca8,Maciej Skoczeń,2025-09-23 09:29:44,Disable SchedulerAsyncAPICalls feature gate due to a known regression,test/compatibility_lifecycle/reference/versioned_feature_list.yaml,1,1,2,"version: ""1.29"" - name: SchedulerAsyncAPICalls versionedSpecs: - - default: true + - default: false lockToDefault: false preRelease: Beta version: ""1.34"""
kubernetes/kubernetes,aa42060beb0961352cdcff34cec71d2094e000f2,Kubernetes Prow Robot,2025-10-03 11:52:57,Merge pull request #134387 from adrianmoisey/attempt-at-fixing-flake  Use a dedicated delete channel in HPA test,pkg/controller/podautoscaler/horizontal_test.go,3,2,5,"func TestMultipleHPAs(t *testing.T) { const testNamespace = ""dummy-namespace"" processed := make(chan string hpaCount) + processedDeleted := make(chan string 1) testClient := &fake.Clientset{} testScaleClient := &scalefake.FakeScaleClient{} func TestMultipleHPAs(t *testing.T) { testClient.AddReactor(""delete"" ""horizontalpodautoscalers"" func(action core.Action) (handled bool ret runtime.Object err error) { deleteAction := action.(core.DeleteAction) hpaName := deleteAction.GetName() - processed <- hpaName + processedDeleted <- hpaName return true nil nil }) func TestMultipleHPAs(t *testing.T) { // Wait for deletion to be processed select { - case deletedHPAName := <-processed: + case deletedHPAName := <-processedDeleted: assert.Equal(t hpaName deletedHPAName ""Expected the deleted HPA name to match"") case <-time.After(5 * time.Second): t.Fatalf(""Timeout waiting for HPA deletion to be processed"")"
kubernetes/kubernetes,2ddc95555828c49037f7ae2ab0adebf311c41fc1,Humble Devassy Chirammal,2025-10-03 11:17:23,correct metrics function comments  Signed-off-by: Humble Devassy Chirammal <humble.devassy@gmail.com>,pkg/kubelet/metrics/metrics.go,4,4,8,"const ( // Metric for tracking garbage collected images ImageGarbageCollectedTotalKey = ""image_garbage_collected_total"" - // Metric for tracking aligment of compute resources + // Metric for tracking alignment of compute resources ContainerAlignedComputeResourcesNameKey = ""container_aligned_compute_resources_count"" ContainerAlignedComputeResourcesFailureNameKey = ""container_aligned_compute_resources_failure_count"" ContainerAlignedComputeResourcesScopeLabelKey = ""scope"" var ( } ) - // TopologyManagerAdmissionDuration is a Histogram that tracks the duration (in seconds) to serve a pod admission request. + // TopologyManagerAdmissionDuration is a Histogram that tracks the duration (in milliseconds) to serve a pod admission request. TopologyManagerAdmissionDuration = metrics.NewHistogram( &metrics.HistogramOpts{ Subsystem: KubeletSubsystem var ( StabilityLevel: metrics.ALPHA } ) - // OrphanPodCleanedVolumes is number of times that removeOrphanedPodVolumeDirs failed. + // OrphanPodCleanedVolumesErrors is the number of times that removeOrphanedPodVolumeDirs failed. OrphanPodCleanedVolumesErrors = metrics.NewGauge( &metrics.GaugeOpts{ Subsystem: KubeletSubsystem var ( []string{""reason""} ) - // ImageVolumeRequestedTotal trakcs the number of requested image volumes. + // ImageVolumeRequestedTotal tracks the number of requested image volumes. ImageVolumeRequestedTotal = metrics.NewCounter( &metrics.CounterOpts{ Subsystem: KubeletSubsystem"
kubernetes/kubernetes,2ddc95555828c49037f7ae2ab0adebf311c41fc1,Humble Devassy Chirammal,2025-10-03 11:17:23,correct metrics function comments  Signed-off-by: Humble Devassy Chirammal <humble.devassy@gmail.com>,pkg/volume/csi/csi_attacher.go,1,1,2,func (c *csiAttacher) MountDevice(spec *volume.Spec devicePath string deviceMo return nil } - //TODO (vladimirvivien) implement better AccessModes mapping between k8s and CSI + // TODO (vladimirvivien) implement better AccessModes mapping between k8s and CSI accessMode := v1.ReadWriteOnce if spec.PersistentVolume.Spec.AccessModes != nil { accessMode = spec.PersistentVolume.Spec.AccessModes[0]
kubernetes/kubernetes,2ddc95555828c49037f7ae2ab0adebf311c41fc1,Humble Devassy Chirammal,2025-10-03 11:17:23,correct metrics function comments  Signed-off-by: Humble Devassy Chirammal <humble.devassy@gmail.com>,pkg/volume/csi/csi_block.go,2,2,4,func (m *csiBlockMapper) SetUpDevice() (string error) { } } - //TODO (vladimirvivien) implement better AccessModes mapping between k8s and CSI + // TODO (vladimirvivien) implement better AccessModes mapping between k8s and CSI accessMode := v1.ReadWriteOnce if m.spec.PersistentVolume.Spec.AccessModes != nil { accessMode = m.spec.PersistentVolume.Spec.AccessModes[0] func (m *csiBlockMapper) MapPodDevice() (string error) { } } - //TODO (vladimirvivien) implement better AccessModes mapping between k8s and CSI + // TODO (vladimirvivien) implement better AccessModes mapping between k8s and CSI accessMode := v1.ReadWriteOnce if m.spec.PersistentVolume.Spec.AccessModes != nil { accessMode = m.spec.PersistentVolume.Spec.AccessModes[0]
kubernetes/kubernetes,2ddc95555828c49037f7ae2ab0adebf311c41fc1,Humble Devassy Chirammal,2025-10-03 11:17:23,correct metrics function comments  Signed-off-by: Humble Devassy Chirammal <humble.devassy@gmail.com>,pkg/volume/csi/csi_mounter.go,1,1,2,func (c *csiMountMgr) SetUpAt(dir string mounterArgs volume.MounterArgs) error secretRef = pvSrc.NodePublishSecretRef } - //TODO (vladimirvivien) implement better AccessModes mapping between k8s and CSI + // TODO (vladimirvivien) implement better AccessModes mapping between k8s and CSI if c.spec.PersistentVolume.Spec.AccessModes != nil { accessMode = c.spec.PersistentVolume.Spec.AccessModes[0] }
kubernetes/kubernetes,2ddc95555828c49037f7ae2ab0adebf311c41fc1,Humble Devassy Chirammal,2025-10-03 11:17:23,correct metrics function comments  Signed-off-by: Humble Devassy Chirammal <humble.devassy@gmail.com>,pkg/volume/volume.go,1,1,2,type Metrics struct { // and will not equal InodesUsed + InodesFree as the fs is shared. Inodes *resource.Quantity - // InodesFree represent the inodes available for the volume. For Volumes that share + // InodesFree represents the inodes available for the volume. For Volumes that share // a filesystem with the host (e.g. emptydir hostpath) this is the free inodes // on the underlying storage and is shared with host processes and other volumes InodesFree *resource.Quantity
kubernetes/kubernetes,2ddc95555828c49037f7ae2ab0adebf311c41fc1,Humble Devassy Chirammal,2025-10-03 11:17:23,correct metrics function comments  Signed-off-by: Humble Devassy Chirammal <humble.devassy@gmail.com>,pkg/volume/volume_linux.go,1,1,2,func readDirNames(dirname string) ([]string error) { // walkDeep can be used to traverse directories and has two minor differences // from filepath.Walk: // - List of files/dirs is not sorted for performance reasons -// - callback walkFunc is invoked on root directory after visiting children dirs and files +// - callback walkFunc is invoked on root directory after visiting child dirs and files func walkDeep(root string walkFunc filepath.WalkFunc) error { info err := os.Lstat(root) if err != nil {
kubernetes/kubernetes,389507c72325bb4a26b623e7b81a9c5c57d97745,Kubernetes Prow Robot,2025-10-03 10:38:58,Merge pull request #134294 from ania-borowiec/test_for_rollback  Fix for incorrect activation of preemptor pod waiting for deletion of victim  plus integration test verifying the fix,pkg/scheduler/framework/preemption/preemption.go,6,2,8,"func NewEvaluator(pluginName string fh fwk.Handle i Interface enableAsyncPree updated := apipod.UpdatePodCondition(newStatus condition) if updated { if err := util.PatchPodStatus(ctx ev.Handler.ClientSet() victim.Name victim.Namespace &victim.Status newStatus); err != nil { - logger.Error(err ""Could not add DisruptionTarget condition due to preemption"" ""pod"" klog.KObj(victim) ""preemptor"" klog.KObj(preemptor)) - return err + if !apierrors.IsNotFound(err) { + logger.Error(err ""Could not add DisruptionTarget condition due to preemption"" ""preemptor"" klog.KObj(preemptor) ""victim"" klog.KObj(victim)) + return err + } + logger.V(2).Info(""Victim Pod is already deleted"" ""preemptor"" klog.KObj(preemptor) ""victim"" klog.KObj(victim) ""node"" c.Name()) + return nil } } if err := util.DeletePod(ctx ev.Handler.ClientSet() victim); err != nil {"
kubernetes/kubernetes,070d4c1846b98a144ba3ffcb2ce885280efca420,joshjms,2025-09-24 17:12:57,bump etcd to v3.6.5  Signed-off-by: joshjms <joshjms1607@gmail.com>,build/dependencies.yaml,2,2,4,"dependencies: # etcd - name: ""etcd"" - version: 3.6.4 + version: 3.6.5 refPaths: - path: cluster/gce/manifests/etcd.manifest match: etcd_docker_tag|etcd_version dependencies: - path: hack/lib/etcd.sh match: ETCD_VERSION= - path: staging/src/k8s.io/sample-apiserver/artifacts/example/deployment.yaml - match: gcr.io/etcd-development/etcd + match: registry.k8s.io/etcd - path: test/utils/image/manifest.go match: configs\[Etcd\] = Config{list\.GcEtcdRegistry ""etcd"" ""\d+\.\d+.\d+(-(alpha|beta|rc).\d+)?(-\d+)?""}"
kubernetes/kubernetes,070d4c1846b98a144ba3ffcb2ce885280efca420,joshjms,2025-09-24 17:12:57,bump etcd to v3.6.5  Signed-off-by: joshjms <joshjms1607@gmail.com>,cluster/gce/manifests/etcd.manifest,2,2,4,"{ ""name"": ""etcd-container"" {{security_context}} - ""image"": ""{{ pillar.get('etcd_docker_repository' 'registry.k8s.io/etcd') }}:{{ pillar.get('etcd_docker_tag' '3.6.4-0') }}"" + ""image"": ""{{ pillar.get('etcd_docker_repository' 'registry.k8s.io/etcd') }}:{{ pillar.get('etcd_docker_tag' '3.6.5-0') }}"" ""resources"": { ""requests"": { ""cpu"": {{ cpulimit }} ""value"": ""{{ pillar.get('storage_backend' 'etcd3') }}"" } { ""name"": ""TARGET_VERSION"" - ""value"": ""{{ pillar.get('etcd_version' '3.6.4') }}"" + ""value"": ""{{ pillar.get('etcd_version' '3.6.5') }}"" } { ""name"": ""DO_NOT_MOVE_BINARIES"""
kubernetes/kubernetes,070d4c1846b98a144ba3ffcb2ce885280efca420,joshjms,2025-09-24 17:12:57,bump etcd to v3.6.5  Signed-off-by: joshjms <joshjms1607@gmail.com>,cluster/gce/upgrade-aliases.sh,2,2,4,"export KUBE_GCE_ENABLE_IP_ALIASES=true export SECONDARY_RANGE_NAME=""pods-default"" export STORAGE_BACKEND=""etcd3"" export STORAGE_MEDIA_TYPE=""application/vnd.kubernetes.protobuf"" -export ETCD_IMAGE=3.6.4-0 -export ETCD_VERSION=3.6.4 +export ETCD_IMAGE=3.6.5-0 +export ETCD_VERSION=3.6.5 # Upgrade master with updated kube envs ""${KUBE_ROOT}/cluster/gce/upgrade.sh"" -M -l"
kubernetes/kubernetes,070d4c1846b98a144ba3ffcb2ce885280efca420,joshjms,2025-09-24 17:12:57,bump etcd to v3.6.5  Signed-off-by: joshjms <joshjms1607@gmail.com>,cmd/kubeadm/app/constants/constants.go,2,2,4,"const ( MinExternalEtcdVersion = ""3.5.21-0"" // DefaultEtcdVersion indicates the default etcd version that kubeadm uses - DefaultEtcdVersion = ""3.6.4-0"" + DefaultEtcdVersion = ""3.6.5-0"" // Etcd defines variable used internally when referring to etcd component Etcd = ""etcd"" var ( 31: ""3.5.21-0"" 32: ""3.5.21-0"" 33: ""3.5.21-0"" - 34: ""3.6.4-0"" + 34: ""3.6.5-0"" } // KubeadmCertsClusterRoleName sets the name for the ClusterRole that allows"
kubernetes/kubernetes,070d4c1846b98a144ba3ffcb2ce885280efca420,joshjms,2025-09-24 17:12:57,bump etcd to v3.6.5  Signed-off-by: joshjms <joshjms1607@gmail.com>,hack/lib/etcd.sh,1,1,2,# A set of helpers for starting/running etcd for tests -ETCD_VERSION=${ETCD_VERSION:-3.6.4} +ETCD_VERSION=${ETCD_VERSION:-3.6.5} ETCD_HOST=${ETCD_HOST:-127.0.0.1} ETCD_PORT=${ETCD_PORT:-2379} # This is intentionally not called ETCD_LOG_LEVEL:
kubernetes/kubernetes,070d4c1846b98a144ba3ffcb2ce885280efca420,joshjms,2025-09-24 17:12:57,bump etcd to v3.6.5  Signed-off-by: joshjms <joshjms1607@gmail.com>,staging/src/k8s.io/sample-apiserver/artifacts/example/deployment.yaml,1,1,2,"spec: imagePullPolicy: Never args: [ ""--etcd-servers=http://localhost:2379"" ] - name: etcd - image: gcr.io/etcd-development/etcd:v3.6.4 + image: registry.k8s.io/etcd:v3.6.5"
kubernetes/kubernetes,070d4c1846b98a144ba3ffcb2ce885280efca420,joshjms,2025-09-24 17:12:57,bump etcd to v3.6.5  Signed-off-by: joshjms <joshjms1607@gmail.com>,test/utils/image/manifest.go,1,1,2,"func initImageConfigs(list RegistryList) (map[ImageID]Config map[ImageID]Config configs[AppArmorLoader] = Config{list.PromoterE2eRegistry ""apparmor-loader"" ""1.4""} configs[BusyBox] = Config{list.PromoterE2eRegistry ""busybox"" ""1.37.0-1""} configs[DistrolessIptables] = Config{list.BuildImageRegistry ""distroless-iptables"" ""v0.8.2""} - configs[Etcd] = Config{list.GcEtcdRegistry ""etcd"" ""3.6.4-0""} + configs[Etcd] = Config{list.GcEtcdRegistry ""etcd"" ""3.6.5-0""} configs[InvalidRegistryImage] = Config{list.InvalidRegistry ""alpine"" ""3.1""} configs[IpcUtils] = Config{list.PromoterE2eRegistry ""ipc-utils"" ""1.3""} configs[JessieDnsutils] = Config{list.PromoterE2eRegistry ""jessie-dnsutils"" ""1.7""}"
kubernetes/kubernetes,7c5967221374839e51e0f72b914ddc11fc24c8b6,Ania Borowiec,2025-09-26 12:05:52,Fix in code and integration test that verifies that when victim pod is stuck in binding  preemptor pod remains waiting in unschedulable queue until deletion of the victim pod is completed,pkg/scheduler/framework/preemption/preemption.go,6,2,8,"func NewEvaluator(pluginName string fh fwk.Handle i Interface enableAsyncPree updated := apipod.UpdatePodCondition(newStatus condition) if updated { if err := util.PatchPodStatus(ctx ev.Handler.ClientSet() victim.Name victim.Namespace &victim.Status newStatus); err != nil { - logger.Error(err ""Could not add DisruptionTarget condition due to preemption"" ""pod"" klog.KObj(victim) ""preemptor"" klog.KObj(preemptor)) - return err + if !apierrors.IsNotFound(err) { + logger.Error(err ""Could not add DisruptionTarget condition due to preemption"" ""preemptor"" klog.KObj(preemptor) ""victim"" klog.KObj(victim)) + return err + } + logger.V(2).Info(""Victim Pod is already deleted"" ""preemptor"" klog.KObj(preemptor) ""victim"" klog.KObj(victim) ""node"" c.Name()) + return nil } } if err := util.DeletePod(ctx ev.Handler.ClientSet() victim); err != nil {"
kubernetes/kubernetes,e9f61ce511d0ffdbc33b76def09955d3fe3721aa,Aleksander Mistewicz,2025-09-10 09:54:20,Move stats updates to getList  Signed-off-by: Aleksander Mistewicz <amistewicz@google.com>,staging/src/k8s.io/apiserver/pkg/storage/etcd3/store.go,21,21,42,"func (s *store) GetList(ctx context.Context key string opts storage.ListOption metrics.RecordStorageListMetrics(s.groupResource numFetched numEvald numReturn) }() - stats := s.getResourceSizeEstimator() - aggregator := s.listErrAggrFactory() for { getResp err = s.getList(ctx keyPrefix opts.Recursive kubernetes.ListOptions{ func (s *store) GetList(ctx context.Context key string opts storage.ListOption } else { growSlice(v 2048 len(getResp.Kvs)) } - if stats != nil { - stats.Update(getResp.Kvs) - } // take items from the response until the bucket is full filtering as we go for i kv := range getResp.Kvs { func (s *store) GetList(ctx context.Context key string opts storage.ListOption return s.versioner.UpdateList(listObj uint64(withRev) continueValue remainingItemCount) } -func (s *store) getList(ctx context.Context keyPrefix string recursive bool options kubernetes.ListOptions) (kubernetes.ListResponse error) { +func (s *store) getList(ctx context.Context keyPrefix string recursive bool options kubernetes.ListOptions) (resp kubernetes.ListResponse err error) { startTime := time.Now() if recursive { - resp err := s.client.Kubernetes.List(ctx keyPrefix options) + resp err = s.client.Kubernetes.List(ctx keyPrefix options) metrics.RecordEtcdRequest(""list"" s.groupResource err startTime) - return resp err - } - getResp err := s.client.Kubernetes.Get(ctx keyPrefix kubernetes.GetOptions{ - Revision: options.Revision - }) - metrics.RecordEtcdRequest(""get"" s.groupResource err startTime) - var resp kubernetes.ListResponse - if getResp.KV != nil { - resp.Kvs = []*mvccpb.KeyValue{getResp.KV} - resp.Count = 1 - resp.Revision = getResp.Revision } else { - resp.Kvs = []*mvccpb.KeyValue{} - resp.Count = 0 - resp.Revision = getResp.Revision + var getResp kubernetes.GetResponse + getResp err = s.client.Kubernetes.Get(ctx keyPrefix kubernetes.GetOptions{ + Revision: options.Revision + }) + metrics.RecordEtcdRequest(""get"" s.groupResource err startTime) + if getResp.KV != nil { + resp.Kvs = []*mvccpb.KeyValue{getResp.KV} + resp.Count = 1 + resp.Revision = getResp.Revision + } else { + resp.Kvs = []*mvccpb.KeyValue{} + resp.Count = 0 + resp.Revision = getResp.Revision + } + } + + stats := s.getResourceSizeEstimator() + if len(resp.Kvs) > 0 && stats != nil { + stats.Update(resp.Kvs) } return resp err }"
kubernetes/kubernetes,aa38aeaca288996e2b29ca0642a663c27afbe45f,Kubernetes Prow Robot,2025-10-03 03:23:03,Merge pull request #134390 from liggitt/metric-hidden-race  Use lock-free for unguarded isHidden/isDeprecated fields,staging/src/k8s.io/component-base/metrics/metric.go,10,9,19,"package metrics import ( ""sync"" + ""sync/atomic"" ""github.com/blang/semver/v4"" ""github.com/prometheus/client_golang/prometheus"" with the kubeCollector itself as an argument. */ type lazyMetric struct { fqName string - isDeprecated bool - isHidden bool + isDeprecated atomic.Bool + isHidden atomic.Bool isCreated bool createLock sync.RWMutex markDeprecationOnce sync.Once func (r *lazyMetric) preprocessMetric(currentVersion semver.Version) { defer disabledMetricsLock.RUnlock() // disabling metrics is higher in precedence than showing hidden metrics if _ ok := disabledMetrics[r.fqName]; ok { - r.isHidden = true + r.isHidden.Store(true) return } deprecatedVersion := r.self.DeprecatedVersion() if deprecatedVersion == nil { return } r.markDeprecationOnce.Do(func() { - r.isDeprecated = isDeprecated(currentVersion *deprecatedVersion) + r.isDeprecated.Store(isDeprecated(currentVersion *deprecatedVersion)) if shouldHide(r.stabilityLevel &currentVersion deprecatedVersion) { if shouldShowHidden() { func (r *lazyMetric) preprocessMetric(currentVersion semver.Version) { } // TODO(RainbowMango): Remove this log temporarily. https://github.com/kubernetes/kubernetes/issues/85369 // klog.Warningf(""This metric has been deprecated for more than one release hiding."") - r.isHidden = true + r.isHidden.Store(true) } }) } func (r *lazyMetric) IsHidden() bool { - return r.isHidden + return r.isHidden.Load() } func (r *lazyMetric) IsDeprecated() bool { - return r.isDeprecated + return r.isDeprecated.Load() } // Create forces the initialization of metric which has been deferred until func (r *lazyMetric) ClearState() { r.createLock.Lock() defer r.createLock.Unlock() - r.isDeprecated = false - r.isHidden = false + r.isDeprecated.Store(false) + r.isHidden.Store(false) r.isCreated = false r.markDeprecationOnce = sync.Once{} r.createOnce = sync.Once{}"
kubernetes/kubernetes,0dd78f632e42c576f1c28bcfad1a67efeaa79c0f,Kubernetes Prow Robot,2025-10-03 03:22:56,Merge pull request #133747 from pohly/dra-e2e-crud-conformance  DRA: CRUD conformance tests,go.mod,1,1,2,require ( k8s.io/sample-apiserver v0.0.0 k8s.io/system-validators v1.11.1 k8s.io/utils v0.0.0-20250604170112-4c0f3b243397 + sigs.k8s.io/json v0.0.0-20250730193827-2d320260d730 sigs.k8s.io/knftables v0.0.17 sigs.k8s.io/randfill v1.0.0 sigs.k8s.io/structured-merge-diff/v6 v6.3.0 require ( gopkg.in/yaml.v3 v3.0.1 // indirect k8s.io/gengo/v2 v2.0.0-20250922181213-ec3ebc5fd46b // indirect sigs.k8s.io/apiserver-network-proxy/konnectivity-client v0.31.2 // indirect - sigs.k8s.io/json v0.0.0-20250730193827-2d320260d730 // indirect sigs.k8s.io/kustomize/api v0.20.1 // indirect sigs.k8s.io/kustomize/kustomize/v5 v5.7.1 // indirect sigs.k8s.io/kustomize/kyaml v0.20.1 // indirect
kubernetes/kubernetes,0dd78f632e42c576f1c28bcfad1a67efeaa79c0f,Kubernetes Prow Robot,2025-10-03 03:22:56,Merge pull request #133747 from pohly/dra-e2e-crud-conformance  DRA: CRUD conformance tests,test/e2e/dra/utils/deploy.go,2,2,4,"func (nodes *Nodes) init(ctx context.Context f *framework.Framework minNodes claimInformer := cache.NewSharedIndexInformer( &cache.ListWatch{ ListWithContextFunc: func(ctx context.Context options metav1.ListOptions) (runtime.Object error) { - slices err := resourceClient.ResourceClaims("""").List(ctx options) + slices err := resourceClient.ResourceClaims(f.Namespace.Name).List(ctx options) if err == nil { resourceClaimLogger.Info(""Listed ResourceClaims"" ""resourceAPI"" resourceClient.CurrentAPI() ""numClaims"" len(slices.Items) ""listMeta"" slices.ListMeta) } else { func (nodes *Nodes) init(ctx context.Context f *framework.Framework minNodes return slices err } WatchFuncWithContext: func(ctx context.Context options metav1.ListOptions) (watch.Interface error) { - w err := resourceClient.ResourceClaims("""").Watch(ctx options) + w err := resourceClient.ResourceClaims(f.Namespace.Name).Watch(ctx options) if err == nil { resourceClaimLogger.Info(""Started watching ResourceClaims"" ""resourceAPI"" resourceClient.CurrentAPI()) wrapper := newWatchWrapper(klog.LoggerWithName(resourceClaimLogger fmt.Sprintf(""%d"" resourceClaimWatchCounter.Load())) w)"
kubernetes/kubernetes,0dd78f632e42c576f1c28bcfad1a67efeaa79c0f,Kubernetes Prow Robot,2025-10-03 03:22:56,Merge pull request #133747 from pohly/dra-e2e-crud-conformance  DRA: CRUD conformance tests,test/e2e/framework/conformance/.import-restrictions,12,0,12,"+# This E2E framework sub-package is currently allowed to use arbitrary +# dependencies except of k/k/pkg therefore we need to override the +# restrictions from the parent .import-restrictions file. +# +# At some point it may become useful to also check this package's +# dependencies more careful. +rules: + - selectorRegexp: ""^k8s[.]io/kubernetes/pkg"" + allowedPrefixes: [] + + - selectorRegexp: """" + allowedPrefixes: [ """" ]"
kubernetes/kubernetes,0dd78f632e42c576f1c28bcfad1a67efeaa79c0f,Kubernetes Prow Robot,2025-10-03 03:22:56,Merge pull request #133747 from pohly/dra-e2e-crud-conformance  DRA: CRUD conformance tests,test/e2e/framework/conformance/failures.go,60,0,60,"+/* +Copyright 2025 The Kubernetes Authors. + +Licensed under the Apache License Version 2.0 (the ""License""); +you may not use this file except in compliance with the License. +You may obtain a copy of the License at + + http://www.apache.org/licenses/LICENSE-2.0 + +Unless required by applicable law or agreed to in writing software +distributed under the License is distributed on an ""AS IS"" BASIS +WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND either express or implied. +See the License for the specific language governing permissions and +limitations under the License. +*/ + +package architecture + +import ( + ""fmt"" + ""strings"" + + ""github.com/onsi/ginkgo/v2"" + ""github.com/onsi/gomega"" + gtypes ""github.com/onsi/gomega/types"" +) + +type gomegaFailures struct { + failures []string +} + +var _ gtypes.GomegaTestingT = &gomegaFailures{} + +// Helper implements [gtyppes.GomegaTestingT]. +func (g *gomegaFailures) Helper() {} + +// Fatalf implements [gtypes.GomegaTestingT]. +func (g *gomegaFailures) Fatalf(format string args ...any) { + g.Add(fmt.Sprintf(format args...)) +} + +// Adds one failure. +func (g *gomegaFailures) Add(failure string) { + if !strings.HasSuffix(failure ""\n"") { + failure += ""\n"" + } + g.failures = append(g.failures failure) +} + +// Check fails via [ginkgo.Fail] if there were any failures. +func (g *gomegaFailures) Check() { + if len(g.failures) > 0 { + ginkgo.GinkgoHelper() + ginkgo.Fail(strings.Join(g.failures ""\n\n"")) + } +} + +func (g *gomegaFailures) G() *gomega.WithT { + return gomega.NewWithT(g) +}"
kubernetes/kubernetes,0dd78f632e42c576f1c28bcfad1a67efeaa79c0f,Kubernetes Prow Robot,2025-10-03 03:22:56,Merge pull request #133747 from pohly/dra-e2e-crud-conformance  DRA: CRUD conformance tests,test/e2e/framework/gomega.go,65,0,65,"+/* +Copyright 2025 The Kubernetes Authors. + +Licensed under the Apache License Version 2.0 (the ""License""); +you may not use this file except in compliance with the License. +You may obtain a copy of the License at + + http://www.apache.org/licenses/LICENSE-2.0 + +Unless required by applicable law or agreed to in writing software +distributed under the License is distributed on an ""AS IS"" BASIS +WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND either express or implied. +See the License for the specific language governing permissions and +limitations under the License. +*/ + +// Package framework contains provider-independent helper code for +// building and running E2E tests with Ginkgo. The actual Ginkgo test +// suites gets assembled by combining this framework the optional +// provider support code and specific tests via a separate .go file +// like Kubernetes' test/e2e.go. +package framework + +import ( + ""fmt"" + ""strings"" + + ""github.com/onsi/gomega/format"" + gtypes ""github.com/onsi/gomega/types"" +) + +// GomegaObject returns a matcher which appends a full dump of the actual value +// to the failure of the matcher that it wraps. This is useful e.g. for +// gomega.HaveField which otherwise only generates a message containing +// the field that it is checking but not the object in which that field occurs. +func GomegaObject(shouldMatch gtypes.GomegaMatcher) gtypes.GomegaMatcher { + return &gomegaObjectMatcher{ + shouldMatch: shouldMatch + } +} + +type gomegaObjectMatcher struct { + shouldMatch gtypes.GomegaMatcher +} + +func (m *gomegaObjectMatcher) Match(actual interface{}) (success bool err error) { + return m.shouldMatch.Match(actual) +} + +func (m *gomegaObjectMatcher) FailureMessage(actual interface{}) (message string) { + return m.withDump(actual m.shouldMatch.FailureMessage(actual)) +} + +func (m *gomegaObjectMatcher) NegatedFailureMessage(actual interface{}) (message string) { + return m.withDump(actual m.shouldMatch.NegatedFailureMessage(actual)) +} + +func (m *gomegaObjectMatcher) withDump(actual any message string) string { + dump := format.Object(actual 1) + if !strings.HasSuffix(message ""\n"") { + message += ""\n"" + } + message += fmt.Sprintf(""\nFull object:\n%s"" dump) + return message +}"
kubernetes/kubernetes,0dd78f632e42c576f1c28bcfad1a67efeaa79c0f,Kubernetes Prow Robot,2025-10-03 03:22:56,Merge pull request #133747 from pohly/dra-e2e-crud-conformance  DRA: CRUD conformance tests,test/utils/format/format.go,12,0,12,"import ( ""github.com/onsi/gomega/format"" + ""k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"" ""sigs.k8s.io/yaml"" ) func handleYAML(object interface{}) (string bool) { return ""\n"" + strings.TrimSpace(string(y)) true } +var unstructuredObjectType = reflect.TypeOf(unstructured.Unstructured{}) + func useYAML(t reflect.Type) bool { + if t == unstructuredObjectType { + // It looks nicer as YAML. + // + // unstructured.Unstructured is a map but because + // it's wrapped in a struct it does not get recognized + // as one by the code below and thus needs a direct check. + return true + } + switch t.Kind() { case reflect.Pointer reflect.Slice reflect.Array: return useYAML(t.Elem())"
kubernetes/kubernetes,0dd78f632e42c576f1c28bcfad1a67efeaa79c0f,Kubernetes Prow Robot,2025-10-03 03:22:56,Merge pull request #133747 from pohly/dra-e2e-crud-conformance  DRA: CRUD conformance tests,test/utils/format/format_test.go,8,0,8,"import ( ""github.com/stretchr/testify/assert"" v1 ""k8s.io/api/core/v1"" + ""k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"" ) func TestGomegaFormatObject(t *testing.T) { func TestGomegaFormatObject(t *testing.T) { ""podlist"": {value: v1.PodList{} expected: `<v1.PodList>: items: null metadata: {}`} + ""unstructured"": {value: func() any { + var obj unstructured.Unstructured + obj.SetName(""some-name"") + return &obj + }() expected: `<*unstructured.Unstructured | <hex>>: + metadata: + name: some-name`} } { t.Run(name func(t *testing.T) { actual := format.Object(test.value test.indentation)"
kubernetes/kubernetes,ab89efc573d01f4836d64d50ff1958a833c543d0,Kubernetes Prow Robot,2025-10-03 01:30:56,Merge pull request #134302 from lalitc375/device-class-selectors  feat(resource): Add validation for DeviceClass selectors and configs,pkg/apis/resource/validation/validation.go,3,2,5,"func validateDeviceClassSpec(spec oldSpec *resource.DeviceClassSpec fldPath *f func(selector resource.DeviceSelector fldPath *field.Path) field.ErrorList { return validateSelector(selector fldPath stored) } - fldPath.Child(""selectors""))...) + fldPath.Child(""selectors"") sizeCovered)...) // Same logic as above for configs. + stored = false if oldSpec != nil { stored = apiequality.Semantic.DeepEqual(spec.Config oldSpec.Config) } allErrs = append(allErrs validateSlice(spec.Config resource.DeviceConfigMaxSize func(config resource.DeviceClassConfiguration fldPath *field.Path) field.ErrorList { return validateDeviceClassConfiguration(config fldPath stored) } - fldPath.Child(""config""))...) + fldPath.Child(""config"") sizeCovered)...) if spec.ExtendedResourceName != nil && !v1helper.IsExtendedResourceName(corev1.ResourceName(*spec.ExtendedResourceName)) { allErrs = append(allErrs field.Invalid(fldPath.Child(""extendedResourceName"") *spec.ExtendedResourceName ""must be a valid extended resource name""))"
kubernetes/kubernetes,ab89efc573d01f4836d64d50ff1958a833c543d0,Kubernetes Prow Robot,2025-10-03 01:30:56,Merge pull request #134302 from lalitc375/device-class-selectors  feat(resource): Add validation for DeviceClass selectors and configs,pkg/apis/resource/validation/validation_deviceclass_test.go,2,2,4,"func TestValidateClass(t *testing.T) { } ""too-many-selectors"": { wantFailures: field.ErrorList{ - field.TooMany(field.NewPath(""spec"" ""selectors"") resource.DeviceSelectorsMaxSize+1 resource.DeviceSelectorsMaxSize) + field.TooMany(field.NewPath(""spec"" ""selectors"") resource.DeviceSelectorsMaxSize+1 resource.DeviceSelectorsMaxSize).WithOrigin(""maxItems"").MarkCoveredByDeclarative() } class: func() *resource.DeviceClass { class := testClass(goodName) func TestValidateClass(t *testing.T) { } ""too-many-configs"": { wantFailures: field.ErrorList{ - field.TooMany(field.NewPath(""spec"" ""config"") resource.DeviceConfigMaxSize+1 resource.DeviceConfigMaxSize) + field.TooMany(field.NewPath(""spec"" ""config"") resource.DeviceConfigMaxSize+1 resource.DeviceConfigMaxSize).WithOrigin(""maxItems"").MarkCoveredByDeclarative() } class: func() *resource.DeviceClass { class := testClass(goodName)"
kubernetes/kubernetes,ab89efc573d01f4836d64d50ff1958a833c543d0,Kubernetes Prow Robot,2025-10-03 01:30:56,Merge pull request #134302 from lalitc375/device-class-selectors  feat(resource): Add validation for DeviceClass selectors and configs,pkg/registry/resource/deviceclass/strategy.go,1,2,3,func (deviceClassStrategy) ValidateUpdate(ctx context.Context obj old runtime. newClass := obj.(*resource.DeviceClass) oldClass := old.(*resource.DeviceClass) - errorList := validation.ValidateDeviceClass(newClass) - errorList = append(errorList validation.ValidateDeviceClassUpdate(newClass oldClass)...) + errorList := validation.ValidateDeviceClassUpdate(newClass oldClass) return rest.ValidateDeclarativelyWithMigrationChecks(ctx legacyscheme.Scheme newClass oldClass errorList operation.Update) }
kubernetes/kubernetes,ab89efc573d01f4836d64d50ff1958a833c543d0,Kubernetes Prow Robot,2025-10-03 01:30:56,Merge pull request #134302 from lalitc375/device-class-selectors  feat(resource): Add validation for DeviceClass selectors and configs,staging/src/k8s.io/api/resource/v1/generated.proto,4,0,4,message DeviceClassSpec { // // +optional // +listType=atomic + // +k8s:optional + // +k8s:maxItems=32 repeated DeviceSelector selectors = 1; // Config defines configuration parameters that apply to each device that is claimed via this class. message DeviceClassSpec { // // +optional // +listType=atomic + // +k8s:optional + // +k8s:maxItems=32 repeated DeviceClassConfiguration config = 2; // ExtendedResourceName is the extended resource name for the devices of this class.
kubernetes/kubernetes,ab89efc573d01f4836d64d50ff1958a833c543d0,Kubernetes Prow Robot,2025-10-03 01:30:56,Merge pull request #134302 from lalitc375/device-class-selectors  feat(resource): Add validation for DeviceClass selectors and configs,staging/src/k8s.io/api/resource/v1/types.go,4,0,4,"type DeviceClassSpec struct { // // +optional // +listType=atomic + // +k8s:optional + // +k8s:maxItems=32 Selectors []DeviceSelector `json:""selectors omitempty"" protobuf:""bytes 1 opt name=selectors""` // Config defines configuration parameters that apply to each device that is claimed via this class. type DeviceClassSpec struct { // // +optional // +listType=atomic + // +k8s:optional + // +k8s:maxItems=32 Config []DeviceClassConfiguration `json:""config omitempty"" protobuf:""bytes 2 opt name=config""` // SuitableNodes is tombstoned since Kubernetes 1.32 where"
kubernetes/kubernetes,ab89efc573d01f4836d64d50ff1958a833c543d0,Kubernetes Prow Robot,2025-10-03 01:30:56,Merge pull request #134302 from lalitc375/device-class-selectors  feat(resource): Add validation for DeviceClass selectors and configs,staging/src/k8s.io/api/resource/v1beta1/generated.proto,4,0,4,message DeviceClassSpec { // // +optional // +listType=atomic + // +k8s:optional + // +k8s:maxItems=32 repeated DeviceSelector selectors = 1; // Config defines configuration parameters that apply to each device that is claimed via this class. message DeviceClassSpec { // // +optional // +listType=atomic + // +k8s:optional + // +k8s:maxItems=32 repeated DeviceClassConfiguration config = 2; // ExtendedResourceName is the extended resource name for the devices of this class.
kubernetes/kubernetes,ab89efc573d01f4836d64d50ff1958a833c543d0,Kubernetes Prow Robot,2025-10-03 01:30:56,Merge pull request #134302 from lalitc375/device-class-selectors  feat(resource): Add validation for DeviceClass selectors and configs,staging/src/k8s.io/api/resource/v1beta1/types.go,4,0,4,"type DeviceClassSpec struct { // // +optional // +listType=atomic + // +k8s:optional + // +k8s:maxItems=32 Selectors []DeviceSelector `json:""selectors omitempty"" protobuf:""bytes 1 opt name=selectors""` // Config defines configuration parameters that apply to each device that is claimed via this class. type DeviceClassSpec struct { // // +optional // +listType=atomic + // +k8s:optional + // +k8s:maxItems=32 Config []DeviceClassConfiguration `json:""config omitempty"" protobuf:""bytes 2 opt name=config""` // SuitableNodes is tombstoned since Kubernetes 1.32 where"
kubernetes/kubernetes,ab89efc573d01f4836d64d50ff1958a833c543d0,Kubernetes Prow Robot,2025-10-03 01:30:56,Merge pull request #134302 from lalitc375/device-class-selectors  feat(resource): Add validation for DeviceClass selectors and configs,staging/src/k8s.io/api/resource/v1beta2/generated.proto,4,0,4,message DeviceClassSpec { // // +optional // +listType=atomic + // +k8s:optional + // +k8s:maxItems=32 repeated DeviceSelector selectors = 1; // Config defines configuration parameters that apply to each device that is claimed via this class. message DeviceClassSpec { // // +optional // +listType=atomic + // +k8s:optional + // +k8s:maxItems=32 repeated DeviceClassConfiguration config = 2; // ExtendedResourceName is the extended resource name for the devices of this class.
kubernetes/kubernetes,ab89efc573d01f4836d64d50ff1958a833c543d0,Kubernetes Prow Robot,2025-10-03 01:30:56,Merge pull request #134302 from lalitc375/device-class-selectors  feat(resource): Add validation for DeviceClass selectors and configs,staging/src/k8s.io/api/resource/v1beta2/types.go,4,0,4,"type DeviceClassSpec struct { // // +optional // +listType=atomic + // +k8s:optional + // +k8s:maxItems=32 Selectors []DeviceSelector `json:""selectors omitempty"" protobuf:""bytes 1 opt name=selectors""` // Config defines configuration parameters that apply to each device that is claimed via this class. type DeviceClassSpec struct { // // +optional // +listType=atomic + // +k8s:optional + // +k8s:maxItems=32 Config []DeviceClassConfiguration `json:""config omitempty"" protobuf:""bytes 2 opt name=config""` // SuitableNodes is tombstoned since Kubernetes 1.32 where"
kubernetes/kubernetes,ab89efc573d01f4836d64d50ff1958a833c543d0,Kubernetes Prow Robot,2025-10-03 01:30:56,Merge pull request #134302 from lalitc375/device-class-selectors  feat(resource): Add validation for DeviceClass selectors and configs,staging/src/k8s.io/code-generator/cmd/validation-gen/validators/limits.go,2,2,4,"func (mitv maxItemsTagValidator) Docs() TagDoc { return TagDoc{ Tag: mitv.TagName() Scopes: mitv.ValidScopes().UnsortedList() - Description: ""Indicates that a list field has a limit on its size."" + Description: ""Indicates that a list has a limit on its size."" Payloads: []TagPayloadDoc{{ Description: ""<non-negative integer>"" - Docs: ""This field must be no more than X items long."" + Docs: ""This list must be no more than X items long."" }} PayloadsType: codetags.ValueTypeInt PayloadsRequired: true"
kubernetes/kubernetes,5c73384abb1ef3b15b95b7aa1ccc7455b8fd5620,Kubernetes Prow Robot,2025-10-03 00:39:10,Merge pull request #134283 from natasha41575/ippr-tests  [InPlacePodVerticalScaling] refactor and increase coverage for pod resize tests,test/e2e/common/node/framework/podresize/resize.go,7,0,7,"func verifyPodContainersStatusResources(gotCtrStatuses []v1.ContainerStatus wan continue } + if err := framework.Gomega().Expect(gotCtrStatus.AllocatedResources).To(gomega.BeComparableTo(wantCtr.Resources.Requests)); err != nil { + errs = append(errs fmt.Errorf(""container[%s] status allocatedResources mismatch: %w"" wantCtr.Name err)) + } + if err := framework.Gomega().Expect(*gotCtrStatus.Resources).To(gomega.BeComparableTo(wantCtr.Resources)); err != nil { errs = append(errs fmt.Errorf(""container[%s] status resources mismatch: %w"" wantCtr.Name err)) } func UpdateExpectedContainerRestarts(ctx context.Context pod *v1.Pod expectedC for _ ctr := range pod.Status.ContainerStatuses { initialRestarts[ctr.Name] = ctr.RestartCount } + for _ ctr := range pod.Status.InitContainerStatuses { + initialRestarts[ctr.Name] = ctr.RestartCount + } for i ctr := range expectedContainers { newExpectedContainers = append(newExpectedContainers expectedContainers[i]) newExpectedContainers[i].RestartCount += initialRestarts[ctr.Name]"
kubernetes/kubernetes,5da3bd6eb5d5a1a3d885ea5b21ce6b6d198029d5,Kubernetes Prow Robot,2025-10-03 00:38:58,Merge pull request #134127 from aojea/apiserver_noproxy  integration test: webhook proxy behavior,test/integration/apiserver/httpproxy/main_test.go,27,0,27,"+/* +Copyright 2025 The Kubernetes Authors. + +Licensed under the Apache License Version 2.0 (the ""License""); +you may not use this file except in compliance with the License. +You may obtain a copy of the License at + + http://www.apache.org/licenses/LICENSE-2.0 + +Unless required by applicable law or agreed to in writing software +distributed under the License is distributed on an ""AS IS"" BASIS +WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND either express or implied. +See the License for the specific language governing permissions and +limitations under the License. +*/ + +package httpproxy + +import ( + ""testing"" + + ""k8s.io/kubernetes/test/integration/framework"" +) + +func TestMain(m *testing.M) { + framework.EtcdMain(m.Run) +}"
kubernetes/kubernetes,5da3bd6eb5d5a1a3d885ea5b21ce6b6d198029d5,Kubernetes Prow Robot,2025-10-03 00:38:58,Merge pull request #134127 from aojea/apiserver_noproxy  integration test: webhook proxy behavior,third_party/forked/golang/net/testing/fakedns.go,112,0,112,"+// Copyright 2013 The Go Authors. All rights reserved. +// Use of this source code is governed by a BSD-style +// license that can be found in the LICENSE file. + +// This package is copied from Go library net. +// https://golang.org/src/net/dnsclient_unix_test.go +// The original private type FakeDNSServer +// is exported as public type for testing. + +package testing + +import ( + ""context"" + ""errors"" + ""fmt"" + ""net"" + ""time"" + + _ ""testing"" + + ""golang.org/x/net/dns/dnsmessage"" +) + +type FakeDNSServer struct { + ResponseHandler func(n s string q dnsmessage.Message t time.Time) (dnsmessage.Message error) + alwaysTCP bool +} + +func (server *FakeDNSServer) DialContext(_ context.Context n s string) (net.Conn error) { + if server.alwaysTCP || n == ""tcp"" || n == ""tcp4"" || n == ""tcp6"" { + return &fakeDNSConn{tcp: true server: server n: n s: s} nil + } + return &fakeDNSPacketConn{fakeDNSConn: fakeDNSConn{tcp: false server: server n: n s: s}} nil +} + +type fakeDNSConn struct { + net.Conn + tcp bool + server *FakeDNSServer + n string + s string + q dnsmessage.Message + t time.Time + buf []byte +} + +func (f *fakeDNSConn) Close() error { + return nil +} + +func (f *fakeDNSConn) Read(b []byte) (int error) { + if len(f.buf) > 0 { + n := copy(b f.buf) + f.buf = f.buf[n:] + return n nil + } + + resp err := f.server.ResponseHandler(f.n f.s f.q f.t) + if err != nil { + return 0 err + } + + bb := make([]byte 2 514) + bb err = resp.AppendPack(bb) + if err != nil { + return 0 fmt.Errorf(""cannot marshal DNS message: %v"" err) + } + + if f.tcp { + l := len(bb) - 2 + bb[0] = byte(l >> 8) + bb[1] = byte(l) + f.buf = bb + return f.Read(b) + } + + bb = bb[2:] + if len(b) < len(bb) { + return 0 errors.New(""read would fragment DNS message"") + } + + copy(b bb) + return len(bb) nil +} + +func (f *fakeDNSConn) Write(b []byte) (int error) { + if f.tcp && len(b) >= 2 { + b = b[2:] + } + if f.q.Unpack(b) != nil { + return 0 fmt.Errorf(""cannot unmarshal DNS message fake %s (%d)"" f.n len(b)) + } + return len(b) nil +} + +func (f *fakeDNSConn) SetDeadline(t time.Time) error { + f.t = t + return nil +} + +type fakeDNSPacketConn struct { + net.PacketConn + fakeDNSConn +} + +func (f *fakeDNSPacketConn) SetDeadline(t time.Time) error { + return f.fakeDNSConn.SetDeadline(t) +} + +func (f *fakeDNSPacketConn) Close() error { + return f.fakeDNSConn.Close() +}"
kubernetes/kubernetes,5da3bd6eb5d5a1a3d885ea5b21ce6b6d198029d5,Kubernetes Prow Robot,2025-10-03 00:38:58,Merge pull request #134127 from aojea/apiserver_noproxy  integration test: webhook proxy behavior,vendor/modules.txt,1,0,1,golang.org/x/mod/semver # golang.org/x/net v0.43.0 ## explicit; go 1.23.0 golang.org/x/net/context +golang.org/x/net/dns/dnsmessage golang.org/x/net/html golang.org/x/net/html/atom golang.org/x/net/html/charset
kubernetes/kubernetes,d9405d9eafb8a1af5d6c20efc3f4b3d7c2ddd02a,Kubernetes Prow Robot,2025-10-02 23:00:57,Merge pull request #133394 from BenTheElder/invariants  check invariant metrics after e2e tests,test/e2e/e2e_test.go,1,0,1,"import ( _ ""k8s.io/kubernetes/test/e2e/common"" _ ""k8s.io/kubernetes/test/e2e/dra"" _ ""k8s.io/kubernetes/test/e2e/instrumentation"" + _ ""k8s.io/kubernetes/test/e2e/invariants"" _ ""k8s.io/kubernetes/test/e2e/kubectl"" _ ""k8s.io/kubernetes/test/e2e/lifecycle"" _ ""k8s.io/kubernetes/test/e2e/lifecycle/bootstrap"""
kubernetes/kubernetes,d9405d9eafb8a1af5d6c20efc3f4b3d7c2ddd02a,Kubernetes Prow Robot,2025-10-02 23:00:57,Merge pull request #133394 from BenTheElder/invariants  check invariant metrics after e2e tests,test/e2e/invariants/OWNERS,11,0,11,+# go.k8s.io/owners +options: + no_parent_owners: true +approvers: + - bentheelder + - aojea + - pohly +reviewers: + - bentheelder + - aojea + - pohly
kubernetes/kubernetes,d9405d9eafb8a1af5d6c20efc3f4b3d7c2ddd02a,Kubernetes Prow Robot,2025-10-02 23:00:57,Merge pull request #133394 from BenTheElder/invariants  check invariant metrics after e2e tests,test/e2e/invariants/README.md,12,0,12,+# Invariant Tests + +This package implements [KEP-5468 Invariant Testing][kep]. + +Before adding new tests here please reach out to SIG-Testing to discuss +with the SIG and Tech Leads. + +https://github.com/kubernetes/community/tree/master/sig-testing#contact + +For more details see [the kep][kep]. + +[kep]: https://git.k8s.io/enhancements/keps/sig-testing/5468-invariant-testing
kubernetes/kubernetes,d9405d9eafb8a1af5d6c20efc3f4b3d7c2ddd02a,Kubernetes Prow Robot,2025-10-02 23:00:57,Merge pull request #133394 from BenTheElder/invariants  check invariant metrics after e2e tests,test/e2e/invariants/metrics_test.go,37,0,37,"+/* +Copyright 2025 The Kubernetes Authors. + +Licensed under the Apache License Version 2.0 (the ""License""); +you may not use this file except in compliance with the License. +You may obtain a copy of the License at + + http://www.apache.org/licenses/LICENSE-2.0 + +Unless required by applicable law or agreed to in writing software +distributed under the License is distributed on an ""AS IS"" BASIS +WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND either express or implied. +See the License for the specific language governing permissions and +limitations under the License. +*/ + +package invariants + +import ""testing"" + +func TestApiServerMetricInvariantsFieldsAreSet(t *testing.T) { + // enforce that all fields are set for all registered metrics + for i inv := range apiServerMetricInvariants { + if inv.Metric == """" { + t.Errorf(""apiServerMetricInvariants[%d].Metric is not set"" i) + } + if inv.SIG == """" { + t.Errorf(""apiServerMetricInvariants[%d].SIG is not set"" i) + } + if len(inv.Owners) == 0 { + t.Errorf(""apiServerMetricInvariants[%d].Owners is not set"" i) + } + if inv.IsValid == nil { + t.Errorf(""apiServerMetricInvariants[%d].IsValid is not set"" i) + } + } +}"
kubernetes/kubernetes,d9405d9eafb8a1af5d6c20efc3f4b3d7c2ddd02a,Kubernetes Prow Robot,2025-10-02 23:00:57,Merge pull request #133394 from BenTheElder/invariants  check invariant metrics after e2e tests,test/e2e/suites.go,1,0,1,"func AfterSuiteActions(ctx context.Context) { if framework.TestContext.ReportDir != """" { framework.CoreDump(framework.TestContext.ReportDir) } + // TODO: nothing is using this? what should we do with it? if framework.TestContext.GatherSuiteMetricsAfterTest { if err := gatherTestSuiteMetrics(ctx); err != nil { framework.Logf(""Error gathering metrics: %v"" err)"
kubernetes/kubernetes,0b0a5974f829f4d8ff0f4c43165d1a0e492a5742,Antonio Ojea,2025-09-18 08:51:32,integration test: webhook proxy behavior  adds a new integration test to verify that the API server's egress to admission webhooks correctly respects the standard `HTTPS_PROXY` and `NO_PROXY` environment variables.  It adds a new test util to implement a Fake DNS server that allows to override DNS resolution in tests  specially useful for integration test that can only bind to localhost the servers  that is ignored by certain functionalities.,test/integration/apiserver/httpproxy/main_test.go,27,0,27,"+/* +Copyright 2025 The Kubernetes Authors. + +Licensed under the Apache License Version 2.0 (the ""License""); +you may not use this file except in compliance with the License. +You may obtain a copy of the License at + + http://www.apache.org/licenses/LICENSE-2.0 + +Unless required by applicable law or agreed to in writing software +distributed under the License is distributed on an ""AS IS"" BASIS +WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND either express or implied. +See the License for the specific language governing permissions and +limitations under the License. +*/ + +package httpproxy + +import ( + ""testing"" + + ""k8s.io/kubernetes/test/integration/framework"" +) + +func TestMain(m *testing.M) { + framework.EtcdMain(m.Run) +}"
kubernetes/kubernetes,0b0a5974f829f4d8ff0f4c43165d1a0e492a5742,Antonio Ojea,2025-09-18 08:51:32,integration test: webhook proxy behavior  adds a new integration test to verify that the API server's egress to admission webhooks correctly respects the standard `HTTPS_PROXY` and `NO_PROXY` environment variables.  It adds a new test util to implement a Fake DNS server that allows to override DNS resolution in tests  specially useful for integration test that can only bind to localhost the servers  that is ignored by certain functionalities.,third_party/forked/golang/net/testing/fakedns.go,112,0,112,"+// Copyright 2013 The Go Authors. All rights reserved. +// Use of this source code is governed by a BSD-style +// license that can be found in the LICENSE file. + +// This package is copied from Go library net. +// https://golang.org/src/net/dnsclient_unix_test.go +// The original private type FakeDNSServer +// is exported as public type for testing. + +package testing + +import ( + ""context"" + ""errors"" + ""fmt"" + ""net"" + ""time"" + + _ ""testing"" + + ""golang.org/x/net/dns/dnsmessage"" +) + +type FakeDNSServer struct { + ResponseHandler func(n s string q dnsmessage.Message t time.Time) (dnsmessage.Message error) + alwaysTCP bool +} + +func (server *FakeDNSServer) DialContext(_ context.Context n s string) (net.Conn error) { + if server.alwaysTCP || n == ""tcp"" || n == ""tcp4"" || n == ""tcp6"" { + return &fakeDNSConn{tcp: true server: server n: n s: s} nil + } + return &fakeDNSPacketConn{fakeDNSConn: fakeDNSConn{tcp: false server: server n: n s: s}} nil +} + +type fakeDNSConn struct { + net.Conn + tcp bool + server *FakeDNSServer + n string + s string + q dnsmessage.Message + t time.Time + buf []byte +} + +func (f *fakeDNSConn) Close() error { + return nil +} + +func (f *fakeDNSConn) Read(b []byte) (int error) { + if len(f.buf) > 0 { + n := copy(b f.buf) + f.buf = f.buf[n:] + return n nil + } + + resp err := f.server.ResponseHandler(f.n f.s f.q f.t) + if err != nil { + return 0 err + } + + bb := make([]byte 2 514) + bb err = resp.AppendPack(bb) + if err != nil { + return 0 fmt.Errorf(""cannot marshal DNS message: %v"" err) + } + + if f.tcp { + l := len(bb) - 2 + bb[0] = byte(l >> 8) + bb[1] = byte(l) + f.buf = bb + return f.Read(b) + } + + bb = bb[2:] + if len(b) < len(bb) { + return 0 errors.New(""read would fragment DNS message"") + } + + copy(b bb) + return len(bb) nil +} + +func (f *fakeDNSConn) Write(b []byte) (int error) { + if f.tcp && len(b) >= 2 { + b = b[2:] + } + if f.q.Unpack(b) != nil { + return 0 fmt.Errorf(""cannot unmarshal DNS message fake %s (%d)"" f.n len(b)) + } + return len(b) nil +} + +func (f *fakeDNSConn) SetDeadline(t time.Time) error { + f.t = t + return nil +} + +type fakeDNSPacketConn struct { + net.PacketConn + fakeDNSConn +} + +func (f *fakeDNSPacketConn) SetDeadline(t time.Time) error { + return f.fakeDNSConn.SetDeadline(t) +} + +func (f *fakeDNSPacketConn) Close() error { + return f.fakeDNSConn.Close() +}"
kubernetes/kubernetes,0b0a5974f829f4d8ff0f4c43165d1a0e492a5742,Antonio Ojea,2025-09-18 08:51:32,integration test: webhook proxy behavior  adds a new integration test to verify that the API server's egress to admission webhooks correctly respects the standard `HTTPS_PROXY` and `NO_PROXY` environment variables.  It adds a new test util to implement a Fake DNS server that allows to override DNS resolution in tests  specially useful for integration test that can only bind to localhost the servers  that is ignored by certain functionalities.,vendor/modules.txt,1,0,1,golang.org/x/mod/semver # golang.org/x/net v0.43.0 ## explicit; go 1.23.0 golang.org/x/net/context +golang.org/x/net/dns/dnsmessage golang.org/x/net/html golang.org/x/net/html/atom golang.org/x/net/html/charset
kubernetes/kubernetes,26c7846e6dd5d0fb43c1e1e82315e2fbc20f1f11,Jordan Liggitt,2025-10-02 22:11:59,Use lock-free for unguarded isHidden/isDeprecated fields,staging/src/k8s.io/component-base/metrics/metric.go,10,9,19,"package metrics import ( ""sync"" + ""sync/atomic"" ""github.com/blang/semver/v4"" ""github.com/prometheus/client_golang/prometheus"" with the kubeCollector itself as an argument. */ type lazyMetric struct { fqName string - isDeprecated bool - isHidden bool + isDeprecated atomic.Bool + isHidden atomic.Bool isCreated bool createLock sync.RWMutex markDeprecationOnce sync.Once func (r *lazyMetric) preprocessMetric(currentVersion semver.Version) { defer disabledMetricsLock.RUnlock() // disabling metrics is higher in precedence than showing hidden metrics if _ ok := disabledMetrics[r.fqName]; ok { - r.isHidden = true + r.isHidden.Store(true) return } deprecatedVersion := r.self.DeprecatedVersion() if deprecatedVersion == nil { return } r.markDeprecationOnce.Do(func() { - r.isDeprecated = isDeprecated(currentVersion *deprecatedVersion) + r.isDeprecated.Store(isDeprecated(currentVersion *deprecatedVersion)) if shouldHide(r.stabilityLevel &currentVersion deprecatedVersion) { if shouldShowHidden() { func (r *lazyMetric) preprocessMetric(currentVersion semver.Version) { } // TODO(RainbowMango): Remove this log temporarily. https://github.com/kubernetes/kubernetes/issues/85369 // klog.Warningf(""This metric has been deprecated for more than one release hiding."") - r.isHidden = true + r.isHidden.Store(true) } }) } func (r *lazyMetric) IsHidden() bool { - return r.isHidden + return r.isHidden.Load() } func (r *lazyMetric) IsDeprecated() bool { - return r.isDeprecated + return r.isDeprecated.Load() } // Create forces the initialization of metric which has been deferred until func (r *lazyMetric) ClearState() { r.createLock.Lock() defer r.createLock.Unlock() - r.isDeprecated = false - r.isHidden = false + r.isDeprecated.Store(false) + r.isHidden.Store(false) r.isCreated = false r.markDeprecationOnce = sync.Once{} r.createOnce = sync.Once{}"
kubernetes/kubernetes,52dec274b362dc43883d1985b54bf0802e202f41,Benjamin Elder,2025-10-02 22:03:29,add TODO to migrate when new metrics mature and old metrics are deprecated,test/e2e/invariants/metrics.go,6,0,6,"type apiServerMetricInvariant struct { // All fields must be specified var apiServerMetricInvariants = []apiServerMetricInvariant{ { + // TODO: Migrate to apiserver_validation_declarative_validation_parity_discrepancies_total + // when it reaches beta / when this metric is deprecated. + // For now we uare using the previous beta metric. Metric: ""apiserver_validation_declarative_validation_mismatch_total"" SIG: ""api-machinery"" Owners: []string{""aaron-prindle"" ""jpbetz"" ""thockin""} var apiServerMetricInvariants = []apiServerMetricInvariant{ } } { + // TODO: Migrate to apiserver_validation_declarative_validation_panics_total + // when it reaches beta / when this metric is deprecated. + // For now we uare using the previous beta metric. Metric: ""apiserver_validation_declarative_validation_panic_total"" SIG: ""api-machinery"" Owners: []string{""aaron-prindle"" ""jpbetz"" ""thockin""}"
kubernetes/kubernetes,7c529f25f4dbc9e12e62a53cd48f74b6386a012e,Benjamin Elder,2025-10-02 22:00:44,add apiserver_validation_declarative_validation_panic_total invariant,test/e2e/invariants/metrics.go,14,0,14,"var apiServerMetricInvariants = []apiServerMetricInvariant{ return true } } + { + Metric: ""apiserver_validation_declarative_validation_panic_total"" + SIG: ""api-machinery"" + Owners: []string{""aaron-prindle"" ""jpbetz"" ""thockin""} + IsValid: func(samples testutil.Samples) bool { + // declarative validation panics should never be non-zero + for _ sample := range samples { + if sample.Value != 0 { + return false + } + } + return true + } + } } func checkInvariantMetrics(ctx context.Context) {"
kubernetes/kubernetes,84ce0f57f27280ed5f82e84819f5b1fad8f20bc5,Benjamin Elder,2025-10-02 21:57:49,add test to verify invariants are fully specified,test/e2e/invariants/metrics_test.go,37,0,37,"+/* +Copyright 2025 The Kubernetes Authors. + +Licensed under the Apache License Version 2.0 (the ""License""); +you may not use this file except in compliance with the License. +You may obtain a copy of the License at + + http://www.apache.org/licenses/LICENSE-2.0 + +Unless required by applicable law or agreed to in writing software +distributed under the License is distributed on an ""AS IS"" BASIS +WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND either express or implied. +See the License for the specific language governing permissions and +limitations under the License. +*/ + +package invariants + +import ""testing"" + +func TestApiServerMetricInvariantsFieldsAreSet(t *testing.T) { + // enforce that all fields are set for all registered metrics + for i inv := range apiServerMetricInvariants { + if inv.Metric == """" { + t.Errorf(""apiServerMetricInvariants[%d].Metric is not set"" i) + } + if inv.SIG == """" { + t.Errorf(""apiServerMetricInvariants[%d].SIG is not set"" i) + } + if len(inv.Owners) == 0 { + t.Errorf(""apiServerMetricInvariants[%d].Owners is not set"" i) + } + if inv.IsValid == nil { + t.Errorf(""apiServerMetricInvariants[%d].IsValid is not set"" i) + } + } +}"
kubernetes/kubernetes,41ae5cdf4b0d54e05e7ebb59e76c53bc14c180b0,Benjamin Elder,2025-08-05 23:10:25,check invariant metrics after e2e tests,test/e2e/e2e_test.go,1,0,1,"import ( _ ""k8s.io/kubernetes/test/e2e/common"" _ ""k8s.io/kubernetes/test/e2e/dra"" _ ""k8s.io/kubernetes/test/e2e/instrumentation"" + _ ""k8s.io/kubernetes/test/e2e/invariants"" _ ""k8s.io/kubernetes/test/e2e/kubectl"" _ ""k8s.io/kubernetes/test/e2e/lifecycle"" _ ""k8s.io/kubernetes/test/e2e/lifecycle/bootstrap"""
kubernetes/kubernetes,41ae5cdf4b0d54e05e7ebb59e76c53bc14c180b0,Benjamin Elder,2025-08-05 23:10:25,check invariant metrics after e2e tests,test/e2e/invariants/OWNERS,11,0,11,+# go.k8s.io/owners +options: + no_parent_owners: true +approvers: + - bentheelder + - aojea + - pohly +reviewers: + - bentheelder + - aojea + - pohly
kubernetes/kubernetes,41ae5cdf4b0d54e05e7ebb59e76c53bc14c180b0,Benjamin Elder,2025-08-05 23:10:25,check invariant metrics after e2e tests,test/e2e/invariants/README.md,12,0,12,+# Invariant Tests + +This package implements [KEP-5468 Invariant Testing][kep]. + +Before adding new tests here please reach out to SIG-Testing to discuss +with the SIG and Tech Leads. + +https://github.com/kubernetes/community/tree/master/sig-testing#contact + +For more details see [the kep][kep]. + +[kep]: https://git.k8s.io/enhancements/keps/sig-testing/5468-invariant-testing
kubernetes/kubernetes,41ae5cdf4b0d54e05e7ebb59e76c53bc14c180b0,Benjamin Elder,2025-08-05 23:10:25,check invariant metrics after e2e tests,test/e2e/suites.go,1,0,1,"func AfterSuiteActions(ctx context.Context) { if framework.TestContext.ReportDir != """" { framework.CoreDump(framework.TestContext.ReportDir) } + // TODO: nothing is using this? what should we do with it? if framework.TestContext.GatherSuiteMetricsAfterTest { if err := gatherTestSuiteMetrics(ctx); err != nil { framework.Logf(""Error gathering metrics: %v"" err)"
kubernetes/kubernetes,748510b8ee0210dffabd1321305d7c678a825080,Natasha Sarkar,2025-09-23 18:51:19,refactor and increase coverage for pod resize tests,test/e2e/common/node/framework/podresize/resize.go,7,0,7,"func verifyPodContainersStatusResources(gotCtrStatuses []v1.ContainerStatus wan continue } + if err := framework.Gomega().Expect(gotCtrStatus.AllocatedResources).To(gomega.BeComparableTo(wantCtr.Resources.Requests)); err != nil { + errs = append(errs fmt.Errorf(""container[%s] status allocatedResources mismatch: %w"" wantCtr.Name err)) + } + if err := framework.Gomega().Expect(*gotCtrStatus.Resources).To(gomega.BeComparableTo(wantCtr.Resources)); err != nil { errs = append(errs fmt.Errorf(""container[%s] status resources mismatch: %w"" wantCtr.Name err)) } func UpdateExpectedContainerRestarts(ctx context.Context pod *v1.Pod expectedC for _ ctr := range pod.Status.ContainerStatuses { initialRestarts[ctr.Name] = ctr.RestartCount } + for _ ctr := range pod.Status.InitContainerStatuses { + initialRestarts[ctr.Name] = ctr.RestartCount + } for i ctr := range expectedContainers { newExpectedContainers = append(newExpectedContainers expectedContainers[i]) newExpectedContainers[i].RestartCount += initialRestarts[ctr.Name]"
kubernetes/kubernetes,a412a15109529c4cf059303892646563434c4da8,Kubernetes Prow Robot,2025-10-02 20:00:57,Merge pull request #134304 from humblec/volume-fixes  Update CSI sidecar container images in test manifest,pkg/volume/util/fsquota/common/quota_common_linux_impl.go,4,2,6,"var ( type VolumeProvider struct { } -var quotaCmds = []string{""/sbin/xfs_quota"" +var quotaCmds = []string{ + ""/sbin/xfs_quota"" ""/usr/sbin/xfs_quota"" - ""/bin/xfs_quota""} + ""/bin/xfs_quota"" +} var quotaParseRegexp = regexp.MustCompilePOSIX(""^[^ \t]*[ \t]*([0-9]+)"")"
kubernetes/kubernetes,a412a15109529c4cf059303892646563434c4da8,Kubernetes Prow Robot,2025-10-02 20:00:57,Merge pull request #134304 from humblec/volume-fixes  Update CSI sidecar container images in test manifest,pkg/volume/util/nested_volumes.go,3,3,6,"func getNestedMountpoints(name baseDir string pod v1.Pod) ([]string error) { // Don't let a container trick us into creating directories outside of its rootfs return fmt.Errorf(""invalid container mount point %v"" myMountPoint) } - myMPSlash := myMountPoint + string(os.PathSeparator) + myMountPointWithSlash := myMountPoint + string(os.PathSeparator) // The previously found nested mountpoints. // NOTE: We can't simply rely on sort.Strings to have all the mountpoints sorted and // grouped. For example the following strings are sorted in this exact order: func getNestedMountpoints(name baseDir string pod v1.Pod) ([]string error) { // For example if this volume is mounted as /dir and other volumes are mounted // as /dir/nested and /dir/nested/other only create /dir/nested. for _ mp := range allMountPoints { - if !strings.HasPrefix(mp myMPSlash) { + if !strings.HasPrefix(mp myMountPointWithSlash) { continue // skip -- not nested beneath myMountPoint } func getNestedMountpoints(name baseDir string pod v1.Pod) ([]string error) { } // since this mount point is nested remember it so that we can check that following ones aren't nested beneath this one prevNestedMPs = append(prevNestedMPs mp+string(os.PathSeparator)) - retval = append(retval mp[len(myMPSlash):]) + retval = append(retval mp[len(myMountPointWithSlash):]) } } return nil"
kubernetes/kubernetes,a412a15109529c4cf059303892646563434c4da8,Kubernetes Prow Robot,2025-10-02 20:00:57,Merge pull request #134304 from humblec/volume-fixes  Update CSI sidecar container images in test manifest,pkg/volume/util/operationexecutor/operation_executor.go,3,3,6,"type VolumeLogger interface { GenerateError(prefixMsg string err error) (simpleErr detailedErr error) } -// Generates an error string with the format "": <err>"" if err exists +// errSuffix generates an error string with the format "": <err>"" if err exists func errSuffix(err error) string { errStr := """" if err != nil { func errSuffix(err error) string { return errStr } -// Generate a detailed error msg for logs +// generateVolumeMsgDetailed generates a detailed error msg for logs func generateVolumeMsgDetailed(prefixMsg suffixMsg volumeName details string) (detailedMsg string) { return fmt.Sprintf(""%v for volume %q %v %v"" prefixMsg volumeName details suffixMsg) } -// Generate a simplified error msg for events and a detailed error msg for logs +// generateVolumeMsg generates a simplified error msg for events and a detailed error msg for logs func generateVolumeMsg(prefixMsg suffixMsg volumeName details string) (simpleMsg detailedMsg string) { simpleMsg = fmt.Sprintf(""%v for volume %q %v"" prefixMsg volumeName suffixMsg) return simpleMsg generateVolumeMsgDetailed(prefixMsg suffixMsg volumeName details)"
kubernetes/kubernetes,a412a15109529c4cf059303892646563434c4da8,Kubernetes Prow Robot,2025-10-02 20:00:57,Merge pull request #134304 from humblec/volume-fixes  Update CSI sidecar container images in test manifest,test/e2e/testing-manifests/storage-csi/external-snapshotter/volume-group-snapshots/csi-hostpath-plugin.yaml,5,5,10,spec: mountPath: /csi - name: node-driver-registrar - image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0 + image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.15.0 args: - --v=5 - --csi-address=/csi/csi.sock spec: volumeMounts: - mountPath: /csi name: socket-dir - image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0 + image: registry.k8s.io/sig-storage/livenessprobe:v2.17.0 args: - --csi-address=/csi/csi.sock - --health-port=9898 - name: csi-attacher - image: registry.k8s.io/sig-storage/csi-attacher:v4.8.0 + image: registry.k8s.io/sig-storage/csi-attacher:v4.10.0 args: - --v=5 - --csi-address=/csi/csi.sock spec: name: socket-dir - name: csi-provisioner - image: registry.k8s.io/sig-storage/csi-provisioner:v5.1.0 + image: registry.k8s.io/sig-storage/csi-provisioner:v5.3.0 args: - -v=5 - --csi-address=/csi/csi.sock spec: name: socket-dir - name: csi-resizer - image: registry.k8s.io/sig-storage/csi-resizer:v1.13.1 + image: registry.k8s.io/sig-storage/csi-resizer:v1.14.0 args: - -v=5 - -csi-address=/csi/csi.sock
kubernetes/kubernetes,a412a15109529c4cf059303892646563434c4da8,Kubernetes Prow Robot,2025-10-02 20:00:57,Merge pull request #134304 from humblec/volume-fixes  Update CSI sidecar container images in test manifest,test/e2e/testing-manifests/storage-csi/hostpath/hostpath/csi-hostpath-plugin.yaml,5,5,10,spec: mountPath: /csi - name: node-driver-registrar - image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0 + image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.15.0 args: - --v=5 - --csi-address=/csi/csi.sock spec: volumeMounts: - mountPath: /csi name: socket-dir - image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0 + image: registry.k8s.io/sig-storage/livenessprobe:v2.17.0 args: - --csi-address=/csi/csi.sock - --health-port=9898 - name: csi-attacher - image: registry.k8s.io/sig-storage/csi-attacher:v4.8.0 + image: registry.k8s.io/sig-storage/csi-attacher:v4.10.0 args: - --v=5 - --csi-address=/csi/csi.sock spec: name: socket-dir - name: csi-provisioner - image: registry.k8s.io/sig-storage/csi-provisioner:v5.1.0 + image: registry.k8s.io/sig-storage/csi-provisioner:v5.3.0 args: - -v=5 - --csi-address=/csi/csi.sock spec: name: socket-dir - name: csi-resizer - image: registry.k8s.io/sig-storage/csi-resizer:v1.13.1 + image: registry.k8s.io/sig-storage/csi-resizer:v1.14.0 args: - -v=5 - -csi-address=/csi/csi.sock
kubernetes/kubernetes,ae2597979033240481a93b65751249cf46a35d26,Adrian Moisey,2025-10-02 19:22:10,Use a dedicated delete channel in HPA test  This is an attempt to fix a flake,pkg/controller/podautoscaler/horizontal_test.go,3,2,5,"func TestMultipleHPAs(t *testing.T) { const testNamespace = ""dummy-namespace"" processed := make(chan string hpaCount) + processedDeleted := make(chan string 1) testClient := &fake.Clientset{} testScaleClient := &scalefake.FakeScaleClient{} func TestMultipleHPAs(t *testing.T) { testClient.AddReactor(""delete"" ""horizontalpodautoscalers"" func(action core.Action) (handled bool ret runtime.Object err error) { deleteAction := action.(core.DeleteAction) hpaName := deleteAction.GetName() - processed <- hpaName + processedDeleted <- hpaName return true nil nil }) func TestMultipleHPAs(t *testing.T) { // Wait for deletion to be processed select { - case deletedHPAName := <-processed: + case deletedHPAName := <-processedDeleted: assert.Equal(t hpaName deletedHPAName ""Expected the deleted HPA name to match"") case <-time.After(5 * time.Second): t.Fatalf(""Timeout waiting for HPA deletion to be processed"")"
